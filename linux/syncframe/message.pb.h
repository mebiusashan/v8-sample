// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace syncframe {
class CfgActions;
struct CfgActionsDefaultTypeInternal;
extern CfgActionsDefaultTypeInternal _CfgActions_default_instance_;
class CfgProtocolActions;
struct CfgProtocolActionsDefaultTypeInternal;
extern CfgProtocolActionsDefaultTypeInternal _CfgProtocolActions_default_instance_;
class CfgProtocolActions_ClientEntry_DoNotUse;
struct CfgProtocolActions_ClientEntry_DoNotUseDefaultTypeInternal;
extern CfgProtocolActions_ClientEntry_DoNotUseDefaultTypeInternal _CfgProtocolActions_ClientEntry_DoNotUse_default_instance_;
class CfgProtocolActions_ServerEntry_DoNotUse;
struct CfgProtocolActions_ServerEntry_DoNotUseDefaultTypeInternal;
extern CfgProtocolActions_ServerEntry_DoNotUseDefaultTypeInternal _CfgProtocolActions_ServerEntry_DoNotUse_default_instance_;
class CfgServer;
struct CfgServerDefaultTypeInternal;
extern CfgServerDefaultTypeInternal _CfgServer_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class RequestClientHeartbeat;
struct RequestClientHeartbeatDefaultTypeInternal;
extern RequestClientHeartbeatDefaultTypeInternal _RequestClientHeartbeat_default_instance_;
class RequestClientPing;
struct RequestClientPingDefaultTypeInternal;
extern RequestClientPingDefaultTypeInternal _RequestClientPing_default_instance_;
class RequestClientPong;
struct RequestClientPongDefaultTypeInternal;
extern RequestClientPongDefaultTypeInternal _RequestClientPong_default_instance_;
class RequestGameOver;
struct RequestGameOverDefaultTypeInternal;
extern RequestGameOverDefaultTypeInternal _RequestGameOver_default_instance_;
class RequestGetRoom;
struct RequestGetRoomDefaultTypeInternal;
extern RequestGetRoomDefaultTypeInternal _RequestGetRoom_default_instance_;
class RequestLogin;
struct RequestLoginDefaultTypeInternal;
extern RequestLoginDefaultTypeInternal _RequestLogin_default_instance_;
class RequestPlayerMatchSign;
struct RequestPlayerMatchSignDefaultTypeInternal;
extern RequestPlayerMatchSignDefaultTypeInternal _RequestPlayerMatchSign_default_instance_;
class RequestPlayerMatchSignCancel;
struct RequestPlayerMatchSignCancelDefaultTypeInternal;
extern RequestPlayerMatchSignCancelDefaultTypeInternal _RequestPlayerMatchSignCancel_default_instance_;
class RequestPlayerOperations;
struct RequestPlayerOperationsDefaultTypeInternal;
extern RequestPlayerOperationsDefaultTypeInternal _RequestPlayerOperations_default_instance_;
class RequestPlayerOver;
struct RequestPlayerOverDefaultTypeInternal;
extern RequestPlayerOverDefaultTypeInternal _RequestPlayerOver_default_instance_;
class RequestPlayerReady;
struct RequestPlayerReadyDefaultTypeInternal;
extern RequestPlayerReadyDefaultTypeInternal _RequestPlayerReady_default_instance_;
class RequestPlayerResumeGame;
struct RequestPlayerResumeGameDefaultTypeInternal;
extern RequestPlayerResumeGameDefaultTypeInternal _RequestPlayerResumeGame_default_instance_;
class RequestRoomHistory;
struct RequestRoomHistoryDefaultTypeInternal;
extern RequestRoomHistoryDefaultTypeInternal _RequestRoomHistory_default_instance_;
class ResponseEnterBattle;
struct ResponseEnterBattleDefaultTypeInternal;
extern ResponseEnterBattleDefaultTypeInternal _ResponseEnterBattle_default_instance_;
class ResponseGameOver;
struct ResponseGameOverDefaultTypeInternal;
extern ResponseGameOverDefaultTypeInternal _ResponseGameOver_default_instance_;
class ResponseKickOff;
struct ResponseKickOffDefaultTypeInternal;
extern ResponseKickOffDefaultTypeInternal _ResponseKickOff_default_instance_;
class ResponseLoginRes;
struct ResponseLoginResDefaultTypeInternal;
extern ResponseLoginResDefaultTypeInternal _ResponseLoginRes_default_instance_;
class ResponseOtherPlayerOffline;
struct ResponseOtherPlayerOfflineDefaultTypeInternal;
extern ResponseOtherPlayerOfflineDefaultTypeInternal _ResponseOtherPlayerOffline_default_instance_;
class ResponseOtherPlayerOver;
struct ResponseOtherPlayerOverDefaultTypeInternal;
extern ResponseOtherPlayerOverDefaultTypeInternal _ResponseOtherPlayerOver_default_instance_;
class ResponseOtherPlayerResumeGame;
struct ResponseOtherPlayerResumeGameDefaultTypeInternal;
extern ResponseOtherPlayerResumeGameDefaultTypeInternal _ResponseOtherPlayerResumeGame_default_instance_;
class ResponsePlayerMatchSignFailed;
struct ResponsePlayerMatchSignFailedDefaultTypeInternal;
extern ResponsePlayerMatchSignFailedDefaultTypeInternal _ResponsePlayerMatchSignFailed_default_instance_;
class ResponsePlayerMatchingFailed;
struct ResponsePlayerMatchingFailedDefaultTypeInternal;
extern ResponsePlayerMatchingFailedDefaultTypeInternal _ResponsePlayerMatchingFailed_default_instance_;
class ResponsePlayerStatus;
struct ResponsePlayerStatusDefaultTypeInternal;
extern ResponsePlayerStatusDefaultTypeInternal _ResponsePlayerStatus_default_instance_;
class ResponsePushLogicFrame;
struct ResponsePushLogicFrameDefaultTypeInternal;
extern ResponsePushLogicFrameDefaultTypeInternal _ResponsePushLogicFrame_default_instance_;
class ResponsePushRoomHistory;
struct ResponsePushRoomHistoryDefaultTypeInternal;
extern ResponsePushRoomHistoryDefaultTypeInternal _ResponsePushRoomHistory_default_instance_;
class ResponsePushRoomInfo;
struct ResponsePushRoomInfoDefaultTypeInternal;
extern ResponsePushRoomInfoDefaultTypeInternal _ResponsePushRoomInfo_default_instance_;
class ResponseReadyTimeout;
struct ResponseReadyTimeoutDefaultTypeInternal;
extern ResponseReadyTimeoutDefaultTypeInternal _ResponseReadyTimeout_default_instance_;
class ResponseRestartGame;
struct ResponseRestartGameDefaultTypeInternal;
extern ResponseRestartGameDefaultTypeInternal _ResponseRestartGame_default_instance_;
class ResponseRoomHistory;
struct ResponseRoomHistoryDefaultTypeInternal;
extern ResponseRoomHistoryDefaultTypeInternal _ResponseRoomHistory_default_instance_;
class ResponseServerPing;
struct ResponseServerPingDefaultTypeInternal;
extern ResponseServerPingDefaultTypeInternal _ResponseServerPing_default_instance_;
class ResponseServerPong;
struct ResponseServerPongDefaultTypeInternal;
extern ResponseServerPongDefaultTypeInternal _ResponseServerPong_default_instance_;
class ResponseStartBattle;
struct ResponseStartBattleDefaultTypeInternal;
extern ResponseStartBattleDefaultTypeInternal _ResponseStartBattle_default_instance_;
}  // namespace syncframe
PROTOBUF_NAMESPACE_OPEN
template<> ::syncframe::CfgActions* Arena::CreateMaybeMessage<::syncframe::CfgActions>(Arena*);
template<> ::syncframe::CfgProtocolActions* Arena::CreateMaybeMessage<::syncframe::CfgProtocolActions>(Arena*);
template<> ::syncframe::CfgProtocolActions_ClientEntry_DoNotUse* Arena::CreateMaybeMessage<::syncframe::CfgProtocolActions_ClientEntry_DoNotUse>(Arena*);
template<> ::syncframe::CfgProtocolActions_ServerEntry_DoNotUse* Arena::CreateMaybeMessage<::syncframe::CfgProtocolActions_ServerEntry_DoNotUse>(Arena*);
template<> ::syncframe::CfgServer* Arena::CreateMaybeMessage<::syncframe::CfgServer>(Arena*);
template<> ::syncframe::Operation* Arena::CreateMaybeMessage<::syncframe::Operation>(Arena*);
template<> ::syncframe::Player* Arena::CreateMaybeMessage<::syncframe::Player>(Arena*);
template<> ::syncframe::RequestClientHeartbeat* Arena::CreateMaybeMessage<::syncframe::RequestClientHeartbeat>(Arena*);
template<> ::syncframe::RequestClientPing* Arena::CreateMaybeMessage<::syncframe::RequestClientPing>(Arena*);
template<> ::syncframe::RequestClientPong* Arena::CreateMaybeMessage<::syncframe::RequestClientPong>(Arena*);
template<> ::syncframe::RequestGameOver* Arena::CreateMaybeMessage<::syncframe::RequestGameOver>(Arena*);
template<> ::syncframe::RequestGetRoom* Arena::CreateMaybeMessage<::syncframe::RequestGetRoom>(Arena*);
template<> ::syncframe::RequestLogin* Arena::CreateMaybeMessage<::syncframe::RequestLogin>(Arena*);
template<> ::syncframe::RequestPlayerMatchSign* Arena::CreateMaybeMessage<::syncframe::RequestPlayerMatchSign>(Arena*);
template<> ::syncframe::RequestPlayerMatchSignCancel* Arena::CreateMaybeMessage<::syncframe::RequestPlayerMatchSignCancel>(Arena*);
template<> ::syncframe::RequestPlayerOperations* Arena::CreateMaybeMessage<::syncframe::RequestPlayerOperations>(Arena*);
template<> ::syncframe::RequestPlayerOver* Arena::CreateMaybeMessage<::syncframe::RequestPlayerOver>(Arena*);
template<> ::syncframe::RequestPlayerReady* Arena::CreateMaybeMessage<::syncframe::RequestPlayerReady>(Arena*);
template<> ::syncframe::RequestPlayerResumeGame* Arena::CreateMaybeMessage<::syncframe::RequestPlayerResumeGame>(Arena*);
template<> ::syncframe::RequestRoomHistory* Arena::CreateMaybeMessage<::syncframe::RequestRoomHistory>(Arena*);
template<> ::syncframe::ResponseEnterBattle* Arena::CreateMaybeMessage<::syncframe::ResponseEnterBattle>(Arena*);
template<> ::syncframe::ResponseGameOver* Arena::CreateMaybeMessage<::syncframe::ResponseGameOver>(Arena*);
template<> ::syncframe::ResponseKickOff* Arena::CreateMaybeMessage<::syncframe::ResponseKickOff>(Arena*);
template<> ::syncframe::ResponseLoginRes* Arena::CreateMaybeMessage<::syncframe::ResponseLoginRes>(Arena*);
template<> ::syncframe::ResponseOtherPlayerOffline* Arena::CreateMaybeMessage<::syncframe::ResponseOtherPlayerOffline>(Arena*);
template<> ::syncframe::ResponseOtherPlayerOver* Arena::CreateMaybeMessage<::syncframe::ResponseOtherPlayerOver>(Arena*);
template<> ::syncframe::ResponseOtherPlayerResumeGame* Arena::CreateMaybeMessage<::syncframe::ResponseOtherPlayerResumeGame>(Arena*);
template<> ::syncframe::ResponsePlayerMatchSignFailed* Arena::CreateMaybeMessage<::syncframe::ResponsePlayerMatchSignFailed>(Arena*);
template<> ::syncframe::ResponsePlayerMatchingFailed* Arena::CreateMaybeMessage<::syncframe::ResponsePlayerMatchingFailed>(Arena*);
template<> ::syncframe::ResponsePlayerStatus* Arena::CreateMaybeMessage<::syncframe::ResponsePlayerStatus>(Arena*);
template<> ::syncframe::ResponsePushLogicFrame* Arena::CreateMaybeMessage<::syncframe::ResponsePushLogicFrame>(Arena*);
template<> ::syncframe::ResponsePushRoomHistory* Arena::CreateMaybeMessage<::syncframe::ResponsePushRoomHistory>(Arena*);
template<> ::syncframe::ResponsePushRoomInfo* Arena::CreateMaybeMessage<::syncframe::ResponsePushRoomInfo>(Arena*);
template<> ::syncframe::ResponseReadyTimeout* Arena::CreateMaybeMessage<::syncframe::ResponseReadyTimeout>(Arena*);
template<> ::syncframe::ResponseRestartGame* Arena::CreateMaybeMessage<::syncframe::ResponseRestartGame>(Arena*);
template<> ::syncframe::ResponseRoomHistory* Arena::CreateMaybeMessage<::syncframe::ResponseRoomHistory>(Arena*);
template<> ::syncframe::ResponseServerPing* Arena::CreateMaybeMessage<::syncframe::ResponseServerPing>(Arena*);
template<> ::syncframe::ResponseServerPong* Arena::CreateMaybeMessage<::syncframe::ResponseServerPong>(Arena*);
template<> ::syncframe::ResponseStartBattle* Arena::CreateMaybeMessage<::syncframe::ResponseStartBattle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syncframe {

// ===================================================================

class RequestLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestLogin) */ {
 public:
  inline RequestLogin() : RequestLogin(nullptr) {}
  ~RequestLogin() override;
  explicit constexpr RequestLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestLogin(const RequestLogin& from);
  RequestLogin(RequestLogin&& from) noexcept
    : RequestLogin() {
    *this = ::std::move(from);
  }

  inline RequestLogin& operator=(const RequestLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestLogin& operator=(RequestLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestLogin* internal_default_instance() {
    return reinterpret_cast<const RequestLogin*>(
               &_RequestLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestLogin& a, RequestLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestLogin* New() const final {
    return new RequestLogin();
  }

  RequestLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestLogin& from);
  void MergeFrom(const RequestLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestLogin";
  }
  protected:
  explicit RequestLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestClientPong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestClientPong) */ {
 public:
  inline RequestClientPong() : RequestClientPong(nullptr) {}
  ~RequestClientPong() override;
  explicit constexpr RequestClientPong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestClientPong(const RequestClientPong& from);
  RequestClientPong(RequestClientPong&& from) noexcept
    : RequestClientPong() {
    *this = ::std::move(from);
  }

  inline RequestClientPong& operator=(const RequestClientPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestClientPong& operator=(RequestClientPong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestClientPong& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestClientPong* internal_default_instance() {
    return reinterpret_cast<const RequestClientPong*>(
               &_RequestClientPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestClientPong& a, RequestClientPong& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestClientPong* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestClientPong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestClientPong* New() const final {
    return new RequestClientPong();
  }

  RequestClientPong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestClientPong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestClientPong& from);
  void MergeFrom(const RequestClientPong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestClientPong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestClientPong";
  }
  protected:
  explicit RequestClientPong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddTimeFieldNumber = 1,
    kClientReceiveTimeFieldNumber = 2,
    kServerResponseTimeFieldNumber = 3,
    kRttTimeoutFieldNumber = 4,
    kRttTimesFieldNumber = 5,
  };
  // int64 add_time = 1;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int64 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 client_receive_time = 2;
  void clear_client_receive_time();
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time() const;
  void set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_receive_time() const;
  void _internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 server_response_time = 3;
  void clear_server_response_time();
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time() const;
  void set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_response_time() const;
  void _internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rtt_timeout = 4;
  void clear_rtt_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout() const;
  void set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rtt_timeout() const;
  void _internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rtt_times = 5;
  void clear_rtt_times();
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times() const;
  void set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rtt_times() const;
  void _internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestClientPong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestPlayerOperations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestPlayerOperations) */ {
 public:
  inline RequestPlayerOperations() : RequestPlayerOperations(nullptr) {}
  ~RequestPlayerOperations() override;
  explicit constexpr RequestPlayerOperations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPlayerOperations(const RequestPlayerOperations& from);
  RequestPlayerOperations(RequestPlayerOperations&& from) noexcept
    : RequestPlayerOperations() {
    *this = ::std::move(from);
  }

  inline RequestPlayerOperations& operator=(const RequestPlayerOperations& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPlayerOperations& operator=(RequestPlayerOperations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPlayerOperations& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPlayerOperations* internal_default_instance() {
    return reinterpret_cast<const RequestPlayerOperations*>(
               &_RequestPlayerOperations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestPlayerOperations& a, RequestPlayerOperations& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPlayerOperations* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPlayerOperations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPlayerOperations* New() const final {
    return new RequestPlayerOperations();
  }

  RequestPlayerOperations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPlayerOperations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPlayerOperations& from);
  void MergeFrom(const RequestPlayerOperations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPlayerOperations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestPlayerOperations";
  }
  protected:
  explicit RequestPlayerOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 4,
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
  };
  // repeated .syncframe.Operation operations = 4;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::syncframe::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >*
      mutable_operations();
  private:
  const ::syncframe::Operation& _internal_operations(int index) const;
  ::syncframe::Operation* _internal_add_operations();
  public:
  const ::syncframe::Operation& operations(int index) const;
  ::syncframe::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >&
      operations() const;

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestPlayerOperations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit constexpr Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return new Operation();
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
    kPlayerIdFieldNumber = 4,
  };
  // string event = 2;
  void clear_event();
  const std::string& event() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_id = 4;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestClientPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestClientPing) */ {
 public:
  inline RequestClientPing() : RequestClientPing(nullptr) {}
  ~RequestClientPing() override;
  explicit constexpr RequestClientPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestClientPing(const RequestClientPing& from);
  RequestClientPing(RequestClientPing&& from) noexcept
    : RequestClientPing() {
    *this = ::std::move(from);
  }

  inline RequestClientPing& operator=(const RequestClientPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestClientPing& operator=(RequestClientPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestClientPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestClientPing* internal_default_instance() {
    return reinterpret_cast<const RequestClientPing*>(
               &_RequestClientPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestClientPing& a, RequestClientPing& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestClientPing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestClientPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestClientPing* New() const final {
    return new RequestClientPing();
  }

  RequestClientPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestClientPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestClientPing& from);
  void MergeFrom(const RequestClientPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestClientPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestClientPing";
  }
  protected:
  explicit RequestClientPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddTimeFieldNumber = 1,
    kClientReceiveTimeFieldNumber = 2,
    kServerResponseTimeFieldNumber = 3,
    kRttTimeoutFieldNumber = 4,
    kRttTimesFieldNumber = 5,
  };
  // int64 add_time = 1;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int64 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 client_receive_time = 2;
  void clear_client_receive_time();
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time() const;
  void set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_receive_time() const;
  void _internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 server_response_time = 3;
  void clear_server_response_time();
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time() const;
  void set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_response_time() const;
  void _internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rtt_timeout = 4;
  void clear_rtt_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout() const;
  void set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rtt_timeout() const;
  void _internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rtt_times = 5;
  void clear_rtt_times();
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times() const;
  void set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rtt_times() const;
  void _internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestClientPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestPlayerResumeGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestPlayerResumeGame) */ {
 public:
  inline RequestPlayerResumeGame() : RequestPlayerResumeGame(nullptr) {}
  ~RequestPlayerResumeGame() override;
  explicit constexpr RequestPlayerResumeGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPlayerResumeGame(const RequestPlayerResumeGame& from);
  RequestPlayerResumeGame(RequestPlayerResumeGame&& from) noexcept
    : RequestPlayerResumeGame() {
    *this = ::std::move(from);
  }

  inline RequestPlayerResumeGame& operator=(const RequestPlayerResumeGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPlayerResumeGame& operator=(RequestPlayerResumeGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPlayerResumeGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPlayerResumeGame* internal_default_instance() {
    return reinterpret_cast<const RequestPlayerResumeGame*>(
               &_RequestPlayerResumeGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RequestPlayerResumeGame& a, RequestPlayerResumeGame& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPlayerResumeGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPlayerResumeGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPlayerResumeGame* New() const final {
    return new RequestPlayerResumeGame();
  }

  RequestPlayerResumeGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPlayerResumeGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPlayerResumeGame& from);
  void MergeFrom(const RequestPlayerResumeGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPlayerResumeGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestPlayerResumeGame";
  }
  protected:
  explicit RequestPlayerResumeGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestPlayerResumeGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestPlayerMatchSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestPlayerMatchSign) */ {
 public:
  inline RequestPlayerMatchSign() : RequestPlayerMatchSign(nullptr) {}
  ~RequestPlayerMatchSign() override;
  explicit constexpr RequestPlayerMatchSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPlayerMatchSign(const RequestPlayerMatchSign& from);
  RequestPlayerMatchSign(RequestPlayerMatchSign&& from) noexcept
    : RequestPlayerMatchSign() {
    *this = ::std::move(from);
  }

  inline RequestPlayerMatchSign& operator=(const RequestPlayerMatchSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPlayerMatchSign& operator=(RequestPlayerMatchSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPlayerMatchSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPlayerMatchSign* internal_default_instance() {
    return reinterpret_cast<const RequestPlayerMatchSign*>(
               &_RequestPlayerMatchSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RequestPlayerMatchSign& a, RequestPlayerMatchSign& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPlayerMatchSign* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPlayerMatchSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPlayerMatchSign* New() const final {
    return new RequestPlayerMatchSign();
  }

  RequestPlayerMatchSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPlayerMatchSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPlayerMatchSign& from);
  void MergeFrom(const RequestPlayerMatchSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPlayerMatchSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestPlayerMatchSign";
  }
  protected:
  explicit RequestPlayerMatchSign(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestPlayerMatchSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestPlayerReady final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestPlayerReady) */ {
 public:
  inline RequestPlayerReady() : RequestPlayerReady(nullptr) {}
  ~RequestPlayerReady() override;
  explicit constexpr RequestPlayerReady(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPlayerReady(const RequestPlayerReady& from);
  RequestPlayerReady(RequestPlayerReady&& from) noexcept
    : RequestPlayerReady() {
    *this = ::std::move(from);
  }

  inline RequestPlayerReady& operator=(const RequestPlayerReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPlayerReady& operator=(RequestPlayerReady&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPlayerReady& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPlayerReady* internal_default_instance() {
    return reinterpret_cast<const RequestPlayerReady*>(
               &_RequestPlayerReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestPlayerReady& a, RequestPlayerReady& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPlayerReady* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPlayerReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPlayerReady* New() const final {
    return new RequestPlayerReady();
  }

  RequestPlayerReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPlayerReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPlayerReady& from);
  void MergeFrom(const RequestPlayerReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPlayerReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestPlayerReady";
  }
  protected:
  explicit RequestPlayerReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestPlayerReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestGetRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestGetRoom) */ {
 public:
  inline RequestGetRoom() : RequestGetRoom(nullptr) {}
  ~RequestGetRoom() override;
  explicit constexpr RequestGetRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestGetRoom(const RequestGetRoom& from);
  RequestGetRoom(RequestGetRoom&& from) noexcept
    : RequestGetRoom() {
    *this = ::std::move(from);
  }

  inline RequestGetRoom& operator=(const RequestGetRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGetRoom& operator=(RequestGetRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestGetRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestGetRoom* internal_default_instance() {
    return reinterpret_cast<const RequestGetRoom*>(
               &_RequestGetRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RequestGetRoom& a, RequestGetRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGetRoom* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestGetRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestGetRoom* New() const final {
    return new RequestGetRoom();
  }

  RequestGetRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestGetRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestGetRoom& from);
  void MergeFrom(const RequestGetRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGetRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestGetRoom";
  }
  protected:
  explicit RequestGetRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestGetRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestRoomHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestRoomHistory) */ {
 public:
  inline RequestRoomHistory() : RequestRoomHistory(nullptr) {}
  ~RequestRoomHistory() override;
  explicit constexpr RequestRoomHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestRoomHistory(const RequestRoomHistory& from);
  RequestRoomHistory(RequestRoomHistory&& from) noexcept
    : RequestRoomHistory() {
    *this = ::std::move(from);
  }

  inline RequestRoomHistory& operator=(const RequestRoomHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRoomHistory& operator=(RequestRoomHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestRoomHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestRoomHistory* internal_default_instance() {
    return reinterpret_cast<const RequestRoomHistory*>(
               &_RequestRoomHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RequestRoomHistory& a, RequestRoomHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestRoomHistory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRoomHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestRoomHistory* New() const final {
    return new RequestRoomHistory();
  }

  RequestRoomHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestRoomHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestRoomHistory& from);
  void MergeFrom(const RequestRoomHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestRoomHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestRoomHistory";
  }
  protected:
  explicit RequestRoomHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kSequenceNumberStartFieldNumber = 3,
    kSequenceNumberEndFieldNumber = 4,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_numberStart = 3;
  void clear_sequence_numberstart();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_numberstart() const;
  void set_sequence_numberstart(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_numberstart() const;
  void _internal_set_sequence_numberstart(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_numberEnd = 4;
  void clear_sequence_numberend();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_numberend() const;
  void set_sequence_numberend(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_numberend() const;
  void _internal_set_sequence_numberend(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestRoomHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_numberstart_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_numberend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestPlayerMatchSignCancel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestPlayerMatchSignCancel) */ {
 public:
  inline RequestPlayerMatchSignCancel() : RequestPlayerMatchSignCancel(nullptr) {}
  ~RequestPlayerMatchSignCancel() override;
  explicit constexpr RequestPlayerMatchSignCancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPlayerMatchSignCancel(const RequestPlayerMatchSignCancel& from);
  RequestPlayerMatchSignCancel(RequestPlayerMatchSignCancel&& from) noexcept
    : RequestPlayerMatchSignCancel() {
    *this = ::std::move(from);
  }

  inline RequestPlayerMatchSignCancel& operator=(const RequestPlayerMatchSignCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPlayerMatchSignCancel& operator=(RequestPlayerMatchSignCancel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPlayerMatchSignCancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPlayerMatchSignCancel* internal_default_instance() {
    return reinterpret_cast<const RequestPlayerMatchSignCancel*>(
               &_RequestPlayerMatchSignCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RequestPlayerMatchSignCancel& a, RequestPlayerMatchSignCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPlayerMatchSignCancel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPlayerMatchSignCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPlayerMatchSignCancel* New() const final {
    return new RequestPlayerMatchSignCancel();
  }

  RequestPlayerMatchSignCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPlayerMatchSignCancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPlayerMatchSignCancel& from);
  void MergeFrom(const RequestPlayerMatchSignCancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPlayerMatchSignCancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestPlayerMatchSignCancel";
  }
  protected:
  explicit RequestPlayerMatchSignCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestPlayerMatchSignCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestClientHeartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestClientHeartbeat) */ {
 public:
  inline RequestClientHeartbeat() : RequestClientHeartbeat(nullptr) {}
  ~RequestClientHeartbeat() override;
  explicit constexpr RequestClientHeartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestClientHeartbeat(const RequestClientHeartbeat& from);
  RequestClientHeartbeat(RequestClientHeartbeat&& from) noexcept
    : RequestClientHeartbeat() {
    *this = ::std::move(from);
  }

  inline RequestClientHeartbeat& operator=(const RequestClientHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestClientHeartbeat& operator=(RequestClientHeartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestClientHeartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestClientHeartbeat* internal_default_instance() {
    return reinterpret_cast<const RequestClientHeartbeat*>(
               &_RequestClientHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RequestClientHeartbeat& a, RequestClientHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestClientHeartbeat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestClientHeartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestClientHeartbeat* New() const final {
    return new RequestClientHeartbeat();
  }

  RequestClientHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestClientHeartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestClientHeartbeat& from);
  void MergeFrom(const RequestClientHeartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestClientHeartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestClientHeartbeat";
  }
  protected:
  explicit RequestClientHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestClientHeartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestGameOver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestGameOver) */ {
 public:
  inline RequestGameOver() : RequestGameOver(nullptr) {}
  ~RequestGameOver() override;
  explicit constexpr RequestGameOver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestGameOver(const RequestGameOver& from);
  RequestGameOver(RequestGameOver&& from) noexcept
    : RequestGameOver() {
    *this = ::std::move(from);
  }

  inline RequestGameOver& operator=(const RequestGameOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestGameOver& operator=(RequestGameOver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestGameOver& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestGameOver* internal_default_instance() {
    return reinterpret_cast<const RequestGameOver*>(
               &_RequestGameOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RequestGameOver& a, RequestGameOver& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestGameOver* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestGameOver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestGameOver* New() const final {
    return new RequestGameOver();
  }

  RequestGameOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestGameOver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestGameOver& from);
  void MergeFrom(const RequestGameOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestGameOver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestGameOver";
  }
  protected:
  explicit RequestGameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kResultFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string result = 4;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestGameOver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestPlayerOver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.RequestPlayerOver) */ {
 public:
  inline RequestPlayerOver() : RequestPlayerOver(nullptr) {}
  ~RequestPlayerOver() override;
  explicit constexpr RequestPlayerOver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPlayerOver(const RequestPlayerOver& from);
  RequestPlayerOver(RequestPlayerOver&& from) noexcept
    : RequestPlayerOver() {
    *this = ::std::move(from);
  }

  inline RequestPlayerOver& operator=(const RequestPlayerOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPlayerOver& operator=(RequestPlayerOver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPlayerOver& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPlayerOver* internal_default_instance() {
    return reinterpret_cast<const RequestPlayerOver*>(
               &_RequestPlayerOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RequestPlayerOver& a, RequestPlayerOver& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPlayerOver* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPlayerOver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestPlayerOver* New() const final {
    return new RequestPlayerOver();
  }

  RequestPlayerOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestPlayerOver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestPlayerOver& from);
  void MergeFrom(const RequestPlayerOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestPlayerOver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.RequestPlayerOver";
  }
  protected:
  explicit RequestPlayerOver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.RequestPlayerOver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseLoginRes) */ {
 public:
  inline ResponseLoginRes() : ResponseLoginRes(nullptr) {}
  ~ResponseLoginRes() override;
  explicit constexpr ResponseLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseLoginRes(const ResponseLoginRes& from);
  ResponseLoginRes(ResponseLoginRes&& from) noexcept
    : ResponseLoginRes() {
    *this = ::std::move(from);
  }

  inline ResponseLoginRes& operator=(const ResponseLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLoginRes& operator=(ResponseLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseLoginRes* internal_default_instance() {
    return reinterpret_cast<const ResponseLoginRes*>(
               &_ResponseLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ResponseLoginRes& a, ResponseLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLoginRes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseLoginRes* New() const final {
    return new ResponseLoginRes();
  }

  ResponseLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseLoginRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseLoginRes& from);
  void MergeFrom(const ResponseLoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseLoginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseLoginRes";
  }
  protected:
  explicit ResponseLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kPlayerFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string errMsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .syncframe.Player player = 3;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::syncframe::Player& player() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::syncframe::Player* release_player();
  ::syncframe::Player* mutable_player();
  void set_allocated_player(::syncframe::Player* player);
  private:
  const ::syncframe::Player& _internal_player() const;
  ::syncframe::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::syncframe::Player* player);
  ::syncframe::Player* unsafe_arena_release_player();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::syncframe::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponsePlayerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponsePlayerStatus) */ {
 public:
  inline ResponsePlayerStatus() : ResponsePlayerStatus(nullptr) {}
  ~ResponsePlayerStatus() override;
  explicit constexpr ResponsePlayerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePlayerStatus(const ResponsePlayerStatus& from);
  ResponsePlayerStatus(ResponsePlayerStatus&& from) noexcept
    : ResponsePlayerStatus() {
    *this = ::std::move(from);
  }

  inline ResponsePlayerStatus& operator=(const ResponsePlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePlayerStatus& operator=(ResponsePlayerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePlayerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePlayerStatus* internal_default_instance() {
    return reinterpret_cast<const ResponsePlayerStatus*>(
               &_ResponsePlayerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ResponsePlayerStatus& a, ResponsePlayerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePlayerStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePlayerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePlayerStatus* New() const final {
    return new ResponsePlayerStatus();
  }

  ResponsePlayerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePlayerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePlayerStatus& from);
  void MergeFrom(const ResponsePlayerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePlayerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponsePlayerStatus";
  }
  protected:
  explicit ResponsePlayerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kRoomIdFieldNumber = 4,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 3,
    kAddTimeFieldNumber = 5,
    kUpTimeFieldNumber = 6,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string room_id = 4;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 add_time = 5;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int32 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 up_time = 6;
  void clear_up_time();
  ::PROTOBUF_NAMESPACE_ID::int32 up_time() const;
  void set_up_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_up_time() const;
  void _internal_set_up_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponsePlayerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 up_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseOtherPlayerOffline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseOtherPlayerOffline) */ {
 public:
  inline ResponseOtherPlayerOffline() : ResponseOtherPlayerOffline(nullptr) {}
  ~ResponseOtherPlayerOffline() override;
  explicit constexpr ResponseOtherPlayerOffline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseOtherPlayerOffline(const ResponseOtherPlayerOffline& from);
  ResponseOtherPlayerOffline(ResponseOtherPlayerOffline&& from) noexcept
    : ResponseOtherPlayerOffline() {
    *this = ::std::move(from);
  }

  inline ResponseOtherPlayerOffline& operator=(const ResponseOtherPlayerOffline& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOtherPlayerOffline& operator=(ResponseOtherPlayerOffline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseOtherPlayerOffline& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseOtherPlayerOffline* internal_default_instance() {
    return reinterpret_cast<const ResponseOtherPlayerOffline*>(
               &_ResponseOtherPlayerOffline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResponseOtherPlayerOffline& a, ResponseOtherPlayerOffline& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseOtherPlayerOffline* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseOtherPlayerOffline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseOtherPlayerOffline* New() const final {
    return new ResponseOtherPlayerOffline();
  }

  ResponseOtherPlayerOffline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseOtherPlayerOffline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseOtherPlayerOffline& from);
  void MergeFrom(const ResponseOtherPlayerOffline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseOtherPlayerOffline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseOtherPlayerOffline";
  }
  protected:
  explicit ResponseOtherPlayerOffline(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseOtherPlayerOffline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseKickOff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseKickOff) */ {
 public:
  inline ResponseKickOff() : ResponseKickOff(nullptr) {}
  ~ResponseKickOff() override;
  explicit constexpr ResponseKickOff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseKickOff(const ResponseKickOff& from);
  ResponseKickOff(ResponseKickOff&& from) noexcept
    : ResponseKickOff() {
    *this = ::std::move(from);
  }

  inline ResponseKickOff& operator=(const ResponseKickOff& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseKickOff& operator=(ResponseKickOff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseKickOff& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseKickOff* internal_default_instance() {
    return reinterpret_cast<const ResponseKickOff*>(
               &_ResponseKickOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ResponseKickOff& a, ResponseKickOff& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseKickOff* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseKickOff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseKickOff* New() const final {
    return new ResponseKickOff();
  }

  ResponseKickOff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseKickOff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseKickOff& from);
  void MergeFrom(const ResponseKickOff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseKickOff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseKickOff";
  }
  protected:
  explicit ResponseKickOff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseKickOff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseStartBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseStartBattle) */ {
 public:
  inline ResponseStartBattle() : ResponseStartBattle(nullptr) {}
  ~ResponseStartBattle() override;
  explicit constexpr ResponseStartBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseStartBattle(const ResponseStartBattle& from);
  ResponseStartBattle(ResponseStartBattle&& from) noexcept
    : ResponseStartBattle() {
    *this = ::std::move(from);
  }

  inline ResponseStartBattle& operator=(const ResponseStartBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseStartBattle& operator=(ResponseStartBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseStartBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseStartBattle* internal_default_instance() {
    return reinterpret_cast<const ResponseStartBattle*>(
               &_ResponseStartBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ResponseStartBattle& a, ResponseStartBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseStartBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseStartBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseStartBattle* New() const final {
    return new ResponseStartBattle();
  }

  ResponseStartBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseStartBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseStartBattle& from);
  void MergeFrom(const ResponseStartBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseStartBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseStartBattle";
  }
  protected:
  explicit ResponseStartBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberStartFieldNumber = 1,
  };
  // int32 sequence_number_start = 1;
  void clear_sequence_number_start();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_start() const;
  void set_sequence_number_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number_start() const;
  void _internal_set_sequence_number_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseStartBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseServerPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseServerPing) */ {
 public:
  inline ResponseServerPing() : ResponseServerPing(nullptr) {}
  ~ResponseServerPing() override;
  explicit constexpr ResponseServerPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseServerPing(const ResponseServerPing& from);
  ResponseServerPing(ResponseServerPing&& from) noexcept
    : ResponseServerPing() {
    *this = ::std::move(from);
  }

  inline ResponseServerPing& operator=(const ResponseServerPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseServerPing& operator=(ResponseServerPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseServerPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseServerPing* internal_default_instance() {
    return reinterpret_cast<const ResponseServerPing*>(
               &_ResponseServerPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ResponseServerPing& a, ResponseServerPing& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseServerPing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseServerPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseServerPing* New() const final {
    return new ResponseServerPing();
  }

  ResponseServerPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseServerPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseServerPing& from);
  void MergeFrom(const ResponseServerPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseServerPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseServerPing";
  }
  protected:
  explicit ResponseServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddTimeFieldNumber = 1,
    kClientReceiveTimeFieldNumber = 2,
    kServerResponseTimeFieldNumber = 3,
    kRttTimeoutFieldNumber = 4,
    kRttTimesFieldNumber = 5,
  };
  // int64 add_time = 1;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int64 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 client_receive_time = 2;
  void clear_client_receive_time();
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time() const;
  void set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_receive_time() const;
  void _internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 server_response_time = 3;
  void clear_server_response_time();
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time() const;
  void set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_response_time() const;
  void _internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rtt_timeout = 4;
  void clear_rtt_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout() const;
  void set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rtt_timeout() const;
  void _internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rtt_times = 5;
  void clear_rtt_times();
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times() const;
  void set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rtt_times() const;
  void _internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseServerPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseServerPong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseServerPong) */ {
 public:
  inline ResponseServerPong() : ResponseServerPong(nullptr) {}
  ~ResponseServerPong() override;
  explicit constexpr ResponseServerPong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseServerPong(const ResponseServerPong& from);
  ResponseServerPong(ResponseServerPong&& from) noexcept
    : ResponseServerPong() {
    *this = ::std::move(from);
  }

  inline ResponseServerPong& operator=(const ResponseServerPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseServerPong& operator=(ResponseServerPong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseServerPong& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseServerPong* internal_default_instance() {
    return reinterpret_cast<const ResponseServerPong*>(
               &_ResponseServerPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ResponseServerPong& a, ResponseServerPong& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseServerPong* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseServerPong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseServerPong* New() const final {
    return new ResponseServerPong();
  }

  ResponseServerPong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseServerPong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseServerPong& from);
  void MergeFrom(const ResponseServerPong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseServerPong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseServerPong";
  }
  protected:
  explicit ResponseServerPong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddTimeFieldNumber = 1,
    kClientReceiveTimeFieldNumber = 2,
    kServerResponseTimeFieldNumber = 3,
    kRttTimeoutFieldNumber = 4,
    kRttTimesFieldNumber = 5,
  };
  // int64 add_time = 1;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int64 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 client_receive_time = 2;
  void clear_client_receive_time();
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time() const;
  void set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_receive_time() const;
  void _internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 server_response_time = 3;
  void clear_server_response_time();
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time() const;
  void set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_response_time() const;
  void _internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rtt_timeout = 4;
  void clear_rtt_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout() const;
  void set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rtt_timeout() const;
  void _internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rtt_times = 5;
  void clear_rtt_times();
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times() const;
  void set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rtt_times() const;
  void _internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseServerPong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_receive_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_response_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 rtt_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 rtt_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseEnterBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseEnterBattle) */ {
 public:
  inline ResponseEnterBattle() : ResponseEnterBattle(nullptr) {}
  ~ResponseEnterBattle() override;
  explicit constexpr ResponseEnterBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseEnterBattle(const ResponseEnterBattle& from);
  ResponseEnterBattle(ResponseEnterBattle&& from) noexcept
    : ResponseEnterBattle() {
    *this = ::std::move(from);
  }

  inline ResponseEnterBattle& operator=(const ResponseEnterBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseEnterBattle& operator=(ResponseEnterBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseEnterBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseEnterBattle* internal_default_instance() {
    return reinterpret_cast<const ResponseEnterBattle*>(
               &_ResponseEnterBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ResponseEnterBattle& a, ResponseEnterBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseEnterBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseEnterBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseEnterBattle* New() const final {
    return new ResponseEnterBattle();
  }

  ResponseEnterBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseEnterBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseEnterBattle& from);
  void MergeFrom(const ResponseEnterBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseEnterBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseEnterBattle";
  }
  protected:
  explicit ResponseEnterBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerListFieldNumber = 7,
    kRoomIdFieldNumber = 2,
    kRandSeekFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
    kStatusFieldNumber = 4,
    kAddTimeFieldNumber = 5,
    kTimeFieldNumber = 6,
  };
  // repeated .syncframe.Player player_list = 7;
  int player_list_size() const;
  private:
  int _internal_player_list_size() const;
  public:
  void clear_player_list();
  ::syncframe::Player* mutable_player_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >*
      mutable_player_list();
  private:
  const ::syncframe::Player& _internal_player_list(int index) const;
  ::syncframe::Player* _internal_add_player_list();
  public:
  const ::syncframe::Player& player_list(int index) const;
  ::syncframe::Player* add_player_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >&
      player_list() const;

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 rand_seek = 1;
  void clear_rand_seek();
  ::PROTOBUF_NAMESPACE_ID::int32 rand_seek() const;
  void set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rand_seek() const;
  void _internal_set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 add_time = 5;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int32 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseEnterBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player > player_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rand_seek_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponsePushLogicFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponsePushLogicFrame) */ {
 public:
  inline ResponsePushLogicFrame() : ResponsePushLogicFrame(nullptr) {}
  ~ResponsePushLogicFrame() override;
  explicit constexpr ResponsePushLogicFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePushLogicFrame(const ResponsePushLogicFrame& from);
  ResponsePushLogicFrame(ResponsePushLogicFrame&& from) noexcept
    : ResponsePushLogicFrame() {
    *this = ::std::move(from);
  }

  inline ResponsePushLogicFrame& operator=(const ResponsePushLogicFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePushLogicFrame& operator=(ResponsePushLogicFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePushLogicFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePushLogicFrame* internal_default_instance() {
    return reinterpret_cast<const ResponsePushLogicFrame*>(
               &_ResponsePushLogicFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ResponsePushLogicFrame& a, ResponsePushLogicFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePushLogicFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePushLogicFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePushLogicFrame* New() const final {
    return new ResponsePushLogicFrame();
  }

  ResponsePushLogicFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePushLogicFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePushLogicFrame& from);
  void MergeFrom(const ResponsePushLogicFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePushLogicFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponsePushLogicFrame";
  }
  protected:
  explicit ResponsePushLogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 4,
    kRoomIdFieldNumber = 2,
    kIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
  };
  // repeated .syncframe.Operation operations = 4;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::syncframe::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >*
      mutable_operations();
  private:
  const ::syncframe::Operation& _internal_operations(int index) const;
  ::syncframe::Operation* _internal_add_operations();
  public:
  const ::syncframe::Operation& operations(int index) const;
  ::syncframe::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >&
      operations() const;

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponsePushLogicFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseOtherPlayerOver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseOtherPlayerOver) */ {
 public:
  inline ResponseOtherPlayerOver() : ResponseOtherPlayerOver(nullptr) {}
  ~ResponseOtherPlayerOver() override;
  explicit constexpr ResponseOtherPlayerOver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseOtherPlayerOver(const ResponseOtherPlayerOver& from);
  ResponseOtherPlayerOver(ResponseOtherPlayerOver&& from) noexcept
    : ResponseOtherPlayerOver() {
    *this = ::std::move(from);
  }

  inline ResponseOtherPlayerOver& operator=(const ResponseOtherPlayerOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOtherPlayerOver& operator=(ResponseOtherPlayerOver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseOtherPlayerOver& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseOtherPlayerOver* internal_default_instance() {
    return reinterpret_cast<const ResponseOtherPlayerOver*>(
               &_ResponseOtherPlayerOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ResponseOtherPlayerOver& a, ResponseOtherPlayerOver& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseOtherPlayerOver* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseOtherPlayerOver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseOtherPlayerOver* New() const final {
    return new ResponseOtherPlayerOver();
  }

  ResponseOtherPlayerOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseOtherPlayerOver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseOtherPlayerOver& from);
  void MergeFrom(const ResponseOtherPlayerOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseOtherPlayerOver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseOtherPlayerOver";
  }
  protected:
  explicit ResponseOtherPlayerOver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseOtherPlayerOver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseGameOver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseGameOver) */ {
 public:
  inline ResponseGameOver() : ResponseGameOver(nullptr) {}
  ~ResponseGameOver() override;
  explicit constexpr ResponseGameOver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseGameOver(const ResponseGameOver& from);
  ResponseGameOver(ResponseGameOver&& from) noexcept
    : ResponseGameOver() {
    *this = ::std::move(from);
  }

  inline ResponseGameOver& operator=(const ResponseGameOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseGameOver& operator=(ResponseGameOver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseGameOver& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseGameOver* internal_default_instance() {
    return reinterpret_cast<const ResponseGameOver*>(
               &_ResponseGameOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ResponseGameOver& a, ResponseGameOver& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseGameOver* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseGameOver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseGameOver* New() const final {
    return new ResponseGameOver();
  }

  ResponseGameOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseGameOver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseGameOver& from);
  void MergeFrom(const ResponseGameOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseGameOver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseGameOver";
  }
  protected:
  explicit ResponseGameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kResultFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string result = 4;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseGameOver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseReadyTimeout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseReadyTimeout) */ {
 public:
  inline ResponseReadyTimeout() : ResponseReadyTimeout(nullptr) {}
  ~ResponseReadyTimeout() override;
  explicit constexpr ResponseReadyTimeout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseReadyTimeout(const ResponseReadyTimeout& from);
  ResponseReadyTimeout(ResponseReadyTimeout&& from) noexcept
    : ResponseReadyTimeout() {
    *this = ::std::move(from);
  }

  inline ResponseReadyTimeout& operator=(const ResponseReadyTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseReadyTimeout& operator=(ResponseReadyTimeout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseReadyTimeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseReadyTimeout* internal_default_instance() {
    return reinterpret_cast<const ResponseReadyTimeout*>(
               &_ResponseReadyTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ResponseReadyTimeout& a, ResponseReadyTimeout& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseReadyTimeout* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseReadyTimeout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseReadyTimeout* New() const final {
    return new ResponseReadyTimeout();
  }

  ResponseReadyTimeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseReadyTimeout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseReadyTimeout& from);
  void MergeFrom(const ResponseReadyTimeout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseReadyTimeout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseReadyTimeout";
  }
  protected:
  explicit ResponseReadyTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseReadyTimeout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponsePushRoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponsePushRoomInfo) */ {
 public:
  inline ResponsePushRoomInfo() : ResponsePushRoomInfo(nullptr) {}
  ~ResponsePushRoomInfo() override;
  explicit constexpr ResponsePushRoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePushRoomInfo(const ResponsePushRoomInfo& from);
  ResponsePushRoomInfo(ResponsePushRoomInfo&& from) noexcept
    : ResponsePushRoomInfo() {
    *this = ::std::move(from);
  }

  inline ResponsePushRoomInfo& operator=(const ResponsePushRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePushRoomInfo& operator=(ResponsePushRoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePushRoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePushRoomInfo* internal_default_instance() {
    return reinterpret_cast<const ResponsePushRoomInfo*>(
               &_ResponsePushRoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ResponsePushRoomInfo& a, ResponsePushRoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePushRoomInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePushRoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePushRoomInfo* New() const final {
    return new ResponsePushRoomInfo();
  }

  ResponsePushRoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePushRoomInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePushRoomInfo& from);
  void MergeFrom(const ResponsePushRoomInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePushRoomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponsePushRoomInfo";
  }
  protected:
  explicit ResponsePushRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerListFieldNumber = 7,
    kIdFieldNumber = 1,
    kRoomIdFieldNumber = 8,
    kAddTimeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTimeoutFieldNumber = 4,
    kSequenceNumberFieldNumber = 5,
    kRandSeekFieldNumber = 6,
    kStartTimeFieldNumber = 9,
    kEndTimeFieldNumber = 10,
  };
  // repeated .syncframe.Player player_list = 7;
  int player_list_size() const;
  private:
  int _internal_player_list_size() const;
  public:
  void clear_player_list();
  ::syncframe::Player* mutable_player_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >*
      mutable_player_list();
  private:
  const ::syncframe::Player& _internal_player_list(int index) const;
  ::syncframe::Player* _internal_add_player_list();
  public:
  const ::syncframe::Player& player_list(int index) const;
  ::syncframe::Player* add_player_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >&
      player_list() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string room_id = 8;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 add_time = 2;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int32 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeout = 4;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 5;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rand_seek = 6;
  void clear_rand_seek();
  ::PROTOBUF_NAMESPACE_ID::int32 rand_seek() const;
  void set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rand_seek() const;
  void _internal_set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_time = 9;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_time = 10;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponsePushRoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player > player_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 rand_seek_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponsePushRoomHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponsePushRoomHistory) */ {
 public:
  inline ResponsePushRoomHistory() : ResponsePushRoomHistory(nullptr) {}
  ~ResponsePushRoomHistory() override;
  explicit constexpr ResponsePushRoomHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePushRoomHistory(const ResponsePushRoomHistory& from);
  ResponsePushRoomHistory(ResponsePushRoomHistory&& from) noexcept
    : ResponsePushRoomHistory() {
    *this = ::std::move(from);
  }

  inline ResponsePushRoomHistory& operator=(const ResponsePushRoomHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePushRoomHistory& operator=(ResponsePushRoomHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePushRoomHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePushRoomHistory* internal_default_instance() {
    return reinterpret_cast<const ResponsePushRoomHistory*>(
               &_ResponsePushRoomHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ResponsePushRoomHistory& a, ResponsePushRoomHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePushRoomHistory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePushRoomHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePushRoomHistory* New() const final {
    return new ResponsePushRoomHistory();
  }

  ResponsePushRoomHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePushRoomHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePushRoomHistory& from);
  void MergeFrom(const ResponsePushRoomHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePushRoomHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponsePushRoomHistory";
  }
  protected:
  explicit ResponsePushRoomHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .syncframe.ResponseRoomHistory list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::syncframe::ResponseRoomHistory* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::ResponseRoomHistory >*
      mutable_list();
  private:
  const ::syncframe::ResponseRoomHistory& _internal_list(int index) const;
  ::syncframe::ResponseRoomHistory* _internal_add_list();
  public:
  const ::syncframe::ResponseRoomHistory& list(int index) const;
  ::syncframe::ResponseRoomHistory* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::ResponseRoomHistory >&
      list() const;

  // @@protoc_insertion_point(class_scope:syncframe.ResponsePushRoomHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::ResponseRoomHistory > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseRoomHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseRoomHistory) */ {
 public:
  inline ResponseRoomHistory() : ResponseRoomHistory(nullptr) {}
  ~ResponseRoomHistory() override;
  explicit constexpr ResponseRoomHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseRoomHistory(const ResponseRoomHistory& from);
  ResponseRoomHistory(ResponseRoomHistory&& from) noexcept
    : ResponseRoomHistory() {
    *this = ::std::move(from);
  }

  inline ResponseRoomHistory& operator=(const ResponseRoomHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseRoomHistory& operator=(ResponseRoomHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseRoomHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseRoomHistory* internal_default_instance() {
    return reinterpret_cast<const ResponseRoomHistory*>(
               &_ResponseRoomHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ResponseRoomHistory& a, ResponseRoomHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseRoomHistory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseRoomHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseRoomHistory* New() const final {
    return new ResponseRoomHistory();
  }

  ResponseRoomHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseRoomHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseRoomHistory& from);
  void MergeFrom(const ResponseRoomHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseRoomHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseRoomHistory";
  }
  protected:
  explicit ResponseRoomHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kContentFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string action = 2;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseRoomHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseOtherPlayerResumeGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseOtherPlayerResumeGame) */ {
 public:
  inline ResponseOtherPlayerResumeGame() : ResponseOtherPlayerResumeGame(nullptr) {}
  ~ResponseOtherPlayerResumeGame() override;
  explicit constexpr ResponseOtherPlayerResumeGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseOtherPlayerResumeGame(const ResponseOtherPlayerResumeGame& from);
  ResponseOtherPlayerResumeGame(ResponseOtherPlayerResumeGame&& from) noexcept
    : ResponseOtherPlayerResumeGame() {
    *this = ::std::move(from);
  }

  inline ResponseOtherPlayerResumeGame& operator=(const ResponseOtherPlayerResumeGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOtherPlayerResumeGame& operator=(ResponseOtherPlayerResumeGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseOtherPlayerResumeGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseOtherPlayerResumeGame* internal_default_instance() {
    return reinterpret_cast<const ResponseOtherPlayerResumeGame*>(
               &_ResponseOtherPlayerResumeGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ResponseOtherPlayerResumeGame& a, ResponseOtherPlayerResumeGame& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseOtherPlayerResumeGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseOtherPlayerResumeGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseOtherPlayerResumeGame* New() const final {
    return new ResponseOtherPlayerResumeGame();
  }

  ResponseOtherPlayerResumeGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseOtherPlayerResumeGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseOtherPlayerResumeGame& from);
  void MergeFrom(const ResponseOtherPlayerResumeGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseOtherPlayerResumeGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseOtherPlayerResumeGame";
  }
  protected:
  explicit ResponseOtherPlayerResumeGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 3,
  };
  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseOtherPlayerResumeGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kRoomIdFieldNumber = 7,
    kIpFieldNumber = 9,
    kIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kStatusFieldNumber = 4,
    kAddTimeFieldNumber = 5,
    kUpTimeFieldNumber = 6,
    kUpdPortFieldNumber = 8,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string room_id = 7;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string ip = 9;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 add_time = 5;
  void clear_add_time();
  ::PROTOBUF_NAMESPACE_ID::int32 add_time() const;
  void set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add_time() const;
  void _internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upTime = 6;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int32 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 upd_port = 8;
  void clear_upd_port();
  ::PROTOBUF_NAMESPACE_ID::int32 upd_port() const;
  void set_upd_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upd_port() const;
  void _internal_set_upd_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 uptime_;
  ::PROTOBUF_NAMESPACE_ID::int32 upd_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseRestartGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponseRestartGame) */ {
 public:
  inline ResponseRestartGame() : ResponseRestartGame(nullptr) {}
  ~ResponseRestartGame() override;
  explicit constexpr ResponseRestartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseRestartGame(const ResponseRestartGame& from);
  ResponseRestartGame(ResponseRestartGame&& from) noexcept
    : ResponseRestartGame() {
    *this = ::std::move(from);
  }

  inline ResponseRestartGame& operator=(const ResponseRestartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseRestartGame& operator=(ResponseRestartGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseRestartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseRestartGame* internal_default_instance() {
    return reinterpret_cast<const ResponseRestartGame*>(
               &_ResponseRestartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ResponseRestartGame& a, ResponseRestartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseRestartGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseRestartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseRestartGame* New() const final {
    return new ResponseRestartGame();
  }

  ResponseRestartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseRestartGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseRestartGame& from);
  void MergeFrom(const ResponseRestartGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseRestartGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponseRestartGame";
  }
  protected:
  explicit ResponseRestartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdsFieldNumber = 2,
    kRoomIdFieldNumber = 1,
  };
  // repeated int32 player_ids = 2;
  int player_ids_size() const;
  private:
  int _internal_player_ids_size() const;
  public:
  void clear_player_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_player_ids() const;
  void _internal_add_player_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_player_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 player_ids(int index) const;
  void set_player_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_player_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      player_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_player_ids();

  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponseRestartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > player_ids_;
  mutable std::atomic<int> _player_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponsePlayerMatchSignFailed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponsePlayerMatchSignFailed) */ {
 public:
  inline ResponsePlayerMatchSignFailed() : ResponsePlayerMatchSignFailed(nullptr) {}
  ~ResponsePlayerMatchSignFailed() override;
  explicit constexpr ResponsePlayerMatchSignFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePlayerMatchSignFailed(const ResponsePlayerMatchSignFailed& from);
  ResponsePlayerMatchSignFailed(ResponsePlayerMatchSignFailed&& from) noexcept
    : ResponsePlayerMatchSignFailed() {
    *this = ::std::move(from);
  }

  inline ResponsePlayerMatchSignFailed& operator=(const ResponsePlayerMatchSignFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePlayerMatchSignFailed& operator=(ResponsePlayerMatchSignFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePlayerMatchSignFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePlayerMatchSignFailed* internal_default_instance() {
    return reinterpret_cast<const ResponsePlayerMatchSignFailed*>(
               &_ResponsePlayerMatchSignFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ResponsePlayerMatchSignFailed& a, ResponsePlayerMatchSignFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePlayerMatchSignFailed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePlayerMatchSignFailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePlayerMatchSignFailed* New() const final {
    return new ResponsePlayerMatchSignFailed();
  }

  ResponsePlayerMatchSignFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePlayerMatchSignFailed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePlayerMatchSignFailed& from);
  void MergeFrom(const ResponsePlayerMatchSignFailed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePlayerMatchSignFailed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponsePlayerMatchSignFailed";
  }
  protected:
  explicit ResponsePlayerMatchSignFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kCodeFieldNumber = 3,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponsePlayerMatchSignFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponsePlayerMatchingFailed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.ResponsePlayerMatchingFailed) */ {
 public:
  inline ResponsePlayerMatchingFailed() : ResponsePlayerMatchingFailed(nullptr) {}
  ~ResponsePlayerMatchingFailed() override;
  explicit constexpr ResponsePlayerMatchingFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePlayerMatchingFailed(const ResponsePlayerMatchingFailed& from);
  ResponsePlayerMatchingFailed(ResponsePlayerMatchingFailed&& from) noexcept
    : ResponsePlayerMatchingFailed() {
    *this = ::std::move(from);
  }

  inline ResponsePlayerMatchingFailed& operator=(const ResponsePlayerMatchingFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePlayerMatchingFailed& operator=(ResponsePlayerMatchingFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePlayerMatchingFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePlayerMatchingFailed* internal_default_instance() {
    return reinterpret_cast<const ResponsePlayerMatchingFailed*>(
               &_ResponsePlayerMatchingFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ResponsePlayerMatchingFailed& a, ResponsePlayerMatchingFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePlayerMatchingFailed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePlayerMatchingFailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponsePlayerMatchingFailed* New() const final {
    return new ResponsePlayerMatchingFailed();
  }

  ResponsePlayerMatchingFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponsePlayerMatchingFailed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponsePlayerMatchingFailed& from);
  void MergeFrom(const ResponsePlayerMatchingFailed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponsePlayerMatchingFailed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.ResponsePlayerMatchingFailed";
  }
  protected:
  explicit ResponsePlayerMatchingFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kRoomIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kCodeFieldNumber = 4,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string roomId = 3;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.ResponsePlayerMatchingFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CfgServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.CfgServer) */ {
 public:
  inline CfgServer() : CfgServer(nullptr) {}
  ~CfgServer() override;
  explicit constexpr CfgServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CfgServer(const CfgServer& from);
  CfgServer(CfgServer&& from) noexcept
    : CfgServer() {
    *this = ::std::move(from);
  }

  inline CfgServer& operator=(const CfgServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CfgServer& operator=(CfgServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CfgServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CfgServer* internal_default_instance() {
    return reinterpret_cast<const CfgServer*>(
               &_CfgServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CfgServer& a, CfgServer& b) {
    a.Swap(&b);
  }
  inline void Swap(CfgServer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CfgServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CfgServer* New() const final {
    return new CfgServer();
  }

  CfgServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CfgServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CfgServer& from);
  void MergeFrom(const CfgServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CfgServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.CfgServer";
  }
  protected:
  explicit CfgServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenIpFieldNumber = 1,
    kOutIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kUdpPortFieldNumber = 4,
    kWsUriFieldNumber = 6,
    kLoginAuthTypeFieldNumber = 8,
    kLoginAuthSecretKeyFieldNumber = 9,
    kProtocolFieldNumber = 5,
    kContentTypeFieldNumber = 7,
    kMaxClientConnNumFieldNumber = 10,
    kMsgContentMaxFieldNumber = 11,
    kIOTimeoutFieldNumber = 12,
    kConnTimeoutFieldNumber = 13,
    kMapSizeFieldNumber = 14,
    kRoomPeopleFieldNumber = 15,
    kRoomTimeoutFieldNumber = 16,
    kOffLineWaitTimeFieldNumber = 17,
    kLockModeFieldNumber = 18,
    kFPSFieldNumber = 19,
    kRoomReadyTimeoutFieldNumber = 20,
    kStoreFieldNumber = 21,
  };
  // string ListenIp = 1;
  void clear_listenip();
  const std::string& listenip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listenip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listenip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_listenip();
  void set_allocated_listenip(std::string* listenip);
  private:
  const std::string& _internal_listenip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listenip(const std::string& value);
  std::string* _internal_mutable_listenip();
  public:

  // string OutIp = 2;
  void clear_outip();
  const std::string& outip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_outip();
  void set_allocated_outip(std::string* outip);
  private:
  const std::string& _internal_outip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outip(const std::string& value);
  std::string* _internal_mutable_outip();
  public:

  // string Port = 3;
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string UdpPort = 4;
  void clear_udpport();
  const std::string& udpport() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_udpport(ArgT0&& arg0, ArgT... args);
  std::string* mutable_udpport();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_udpport();
  void set_allocated_udpport(std::string* udpport);
  private:
  const std::string& _internal_udpport() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udpport(const std::string& value);
  std::string* _internal_mutable_udpport();
  public:

  // string WsUri = 6;
  void clear_wsuri();
  const std::string& wsuri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wsuri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wsuri();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_wsuri();
  void set_allocated_wsuri(std::string* wsuri);
  private:
  const std::string& _internal_wsuri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wsuri(const std::string& value);
  std::string* _internal_mutable_wsuri();
  public:

  // string LoginAuthType = 8;
  void clear_loginauthtype();
  const std::string& loginauthtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loginauthtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loginauthtype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_loginauthtype();
  void set_allocated_loginauthtype(std::string* loginauthtype);
  private:
  const std::string& _internal_loginauthtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loginauthtype(const std::string& value);
  std::string* _internal_mutable_loginauthtype();
  public:

  // string LoginAuthSecretKey = 9;
  void clear_loginauthsecretkey();
  const std::string& loginauthsecretkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loginauthsecretkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loginauthsecretkey();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_loginauthsecretkey();
  void set_allocated_loginauthsecretkey(std::string* loginauthsecretkey);
  private:
  const std::string& _internal_loginauthsecretkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loginauthsecretkey(const std::string& value);
  std::string* _internal_mutable_loginauthsecretkey();
  public:

  // int32 Protocol = 5;
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol() const;
  void _internal_set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ContentType = 7;
  void clear_contenttype();
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype() const;
  void set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contenttype() const;
  void _internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxClientConnNum = 10;
  void clear_maxclientconnnum();
  ::PROTOBUF_NAMESPACE_ID::int32 maxclientconnnum() const;
  void set_maxclientconnnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxclientconnnum() const;
  void _internal_set_maxclientconnnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MsgContentMax = 11;
  void clear_msgcontentmax();
  ::PROTOBUF_NAMESPACE_ID::int32 msgcontentmax() const;
  void set_msgcontentmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgcontentmax() const;
  void _internal_set_msgcontentmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 IOTimeout = 12;
  void clear_iotimeout();
  ::PROTOBUF_NAMESPACE_ID::int64 iotimeout() const;
  void set_iotimeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iotimeout() const;
  void _internal_set_iotimeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ConnTimeout = 13;
  void clear_conntimeout();
  ::PROTOBUF_NAMESPACE_ID::int32 conntimeout() const;
  void set_conntimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conntimeout() const;
  void _internal_set_conntimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MapSize = 14;
  void clear_mapsize();
  ::PROTOBUF_NAMESPACE_ID::int32 mapsize() const;
  void set_mapsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mapsize() const;
  void _internal_set_mapsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 RoomPeople = 15;
  void clear_roompeople();
  ::PROTOBUF_NAMESPACE_ID::int32 roompeople() const;
  void set_roompeople(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roompeople() const;
  void _internal_set_roompeople(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 RoomTimeout = 16;
  void clear_roomtimeout();
  ::PROTOBUF_NAMESPACE_ID::int32 roomtimeout() const;
  void set_roomtimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomtimeout() const;
  void _internal_set_roomtimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OffLineWaitTime = 17;
  void clear_offlinewaittime();
  ::PROTOBUF_NAMESPACE_ID::int32 offlinewaittime() const;
  void set_offlinewaittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offlinewaittime() const;
  void _internal_set_offlinewaittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LockMode = 18;
  void clear_lockmode();
  ::PROTOBUF_NAMESPACE_ID::int32 lockmode() const;
  void set_lockmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lockmode() const;
  void _internal_set_lockmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 FPS = 19;
  void clear_fps();
  ::PROTOBUF_NAMESPACE_ID::int32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fps() const;
  void _internal_set_fps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 RoomReadyTimeout = 20;
  void clear_roomreadytimeout();
  ::PROTOBUF_NAMESPACE_ID::int32 roomreadytimeout() const;
  void set_roomreadytimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomreadytimeout() const;
  void _internal_set_roomreadytimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Store = 21;
  void clear_store();
  ::PROTOBUF_NAMESPACE_ID::int32 store() const;
  void set_store(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_store() const;
  void _internal_set_store(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.CfgServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listenip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udpport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wsuri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginauthtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginauthsecretkey_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_;
  ::PROTOBUF_NAMESPACE_ID::int32 contenttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxclientconnnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgcontentmax_;
  ::PROTOBUF_NAMESPACE_ID::int64 iotimeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 conntimeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 roompeople_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomtimeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 offlinewaittime_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 fps_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomreadytimeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 store_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CfgProtocolActions_ClientEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CfgProtocolActions_ClientEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CfgProtocolActions_ClientEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CfgProtocolActions_ClientEntry_DoNotUse();
  explicit constexpr CfgProtocolActions_ClientEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CfgProtocolActions_ClientEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CfgProtocolActions_ClientEntry_DoNotUse& other);
  static const CfgProtocolActions_ClientEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CfgProtocolActions_ClientEntry_DoNotUse*>(&_CfgProtocolActions_ClientEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CfgProtocolActions_ServerEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CfgProtocolActions_ServerEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CfgProtocolActions_ServerEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CfgProtocolActions_ServerEntry_DoNotUse();
  explicit constexpr CfgProtocolActions_ServerEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CfgProtocolActions_ServerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CfgProtocolActions_ServerEntry_DoNotUse& other);
  static const CfgProtocolActions_ServerEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CfgProtocolActions_ServerEntry_DoNotUse*>(&_CfgProtocolActions_ServerEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CfgProtocolActions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.CfgProtocolActions) */ {
 public:
  inline CfgProtocolActions() : CfgProtocolActions(nullptr) {}
  ~CfgProtocolActions() override;
  explicit constexpr CfgProtocolActions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CfgProtocolActions(const CfgProtocolActions& from);
  CfgProtocolActions(CfgProtocolActions&& from) noexcept
    : CfgProtocolActions() {
    *this = ::std::move(from);
  }

  inline CfgProtocolActions& operator=(const CfgProtocolActions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CfgProtocolActions& operator=(CfgProtocolActions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CfgProtocolActions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CfgProtocolActions* internal_default_instance() {
    return reinterpret_cast<const CfgProtocolActions*>(
               &_CfgProtocolActions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CfgProtocolActions& a, CfgProtocolActions& b) {
    a.Swap(&b);
  }
  inline void Swap(CfgProtocolActions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CfgProtocolActions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CfgProtocolActions* New() const final {
    return new CfgProtocolActions();
  }

  CfgProtocolActions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CfgProtocolActions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CfgProtocolActions& from);
  void MergeFrom(const CfgProtocolActions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CfgProtocolActions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.CfgProtocolActions";
  }
  protected:
  explicit CfgProtocolActions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kServerFieldNumber = 2,
  };
  // map<int32, .syncframe.CfgActions> client = 1;
  int client_size() const;
  private:
  int _internal_client_size() const;
  public:
  void clear_client();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
      _internal_client() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
      _internal_mutable_client();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
      client() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
      mutable_client();

  // map<int32, .syncframe.CfgActions> server = 2;
  int server_size() const;
  private:
  int _internal_server_size() const;
  public:
  void clear_server();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
      _internal_server() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
      _internal_mutable_server();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
      server() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
      mutable_server();

  // @@protoc_insertion_point(class_scope:syncframe.CfgProtocolActions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CfgProtocolActions_ClientEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> client_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CfgProtocolActions_ServerEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CfgActions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syncframe.CfgActions) */ {
 public:
  inline CfgActions() : CfgActions(nullptr) {}
  ~CfgActions() override;
  explicit constexpr CfgActions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CfgActions(const CfgActions& from);
  CfgActions(CfgActions&& from) noexcept
    : CfgActions() {
    *this = ::std::move(from);
  }

  inline CfgActions& operator=(const CfgActions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CfgActions& operator=(CfgActions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CfgActions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CfgActions* internal_default_instance() {
    return reinterpret_cast<const CfgActions*>(
               &_CfgActions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CfgActions& a, CfgActions& b) {
    a.Swap(&b);
  }
  inline void Swap(CfgActions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CfgActions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CfgActions* New() const final {
    return new CfgActions();
  }

  CfgActions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CfgActions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CfgActions& from);
  void MergeFrom(const CfgActions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CfgActions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syncframe.CfgActions";
  }
  protected:
  explicit CfgActions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kDescFieldNumber = 3,
    kDemoFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string action = 2;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string demo = 4;
  void clear_demo();
  const std::string& demo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_demo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_demo();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_demo();
  void set_allocated_demo(std::string* demo);
  private:
  const std::string& _internal_demo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_demo(const std::string& value);
  std::string* _internal_mutable_demo();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:syncframe.CfgActions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr demo_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestLogin

// string token = 1;
inline void RequestLogin::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& RequestLogin::token() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestLogin.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestLogin::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestLogin.token)
}
inline std::string* RequestLogin::mutable_token() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestLogin.token)
  return _internal_mutable_token();
}
inline const std::string& RequestLogin::_internal_token() const {
  return token_.Get();
}
inline void RequestLogin::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestLogin::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestLogin::release_token() {
  // @@protoc_insertion_point(field_release:syncframe.RequestLogin.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestLogin::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestLogin.token)
}

// -------------------------------------------------------------------

// RequestClientPong

// int64 add_time = 1;
inline void RequestClientPong::clear_add_time() {
  add_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPong.add_time)
  return _internal_add_time();
}
inline void RequestClientPong::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  add_time_ = value;
}
inline void RequestClientPong::set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPong.add_time)
}

// int64 client_receive_time = 2;
inline void RequestClientPong::clear_client_receive_time() {
  client_receive_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::_internal_client_receive_time() const {
  return client_receive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::client_receive_time() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPong.client_receive_time)
  return _internal_client_receive_time();
}
inline void RequestClientPong::_internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_receive_time_ = value;
}
inline void RequestClientPong::set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_receive_time(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPong.client_receive_time)
}

// int64 server_response_time = 3;
inline void RequestClientPong::clear_server_response_time() {
  server_response_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::_internal_server_response_time() const {
  return server_response_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::server_response_time() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPong.server_response_time)
  return _internal_server_response_time();
}
inline void RequestClientPong::_internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_response_time_ = value;
}
inline void RequestClientPong::set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_response_time(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPong.server_response_time)
}

// int64 rtt_timeout = 4;
inline void RequestClientPong::clear_rtt_timeout() {
  rtt_timeout_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::_internal_rtt_timeout() const {
  return rtt_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPong::rtt_timeout() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPong.rtt_timeout)
  return _internal_rtt_timeout();
}
inline void RequestClientPong::_internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rtt_timeout_ = value;
}
inline void RequestClientPong::set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rtt_timeout(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPong.rtt_timeout)
}

// int32 rtt_times = 5;
inline void RequestClientPong::clear_rtt_times() {
  rtt_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestClientPong::_internal_rtt_times() const {
  return rtt_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestClientPong::rtt_times() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPong.rtt_times)
  return _internal_rtt_times();
}
inline void RequestClientPong::_internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rtt_times_ = value;
}
inline void RequestClientPong::set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rtt_times(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPong.rtt_times)
}

// -------------------------------------------------------------------

// RequestPlayerOperations

// int32 id = 1;
inline void RequestPlayerOperations::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOperations::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOperations::id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerOperations.id)
  return _internal_id();
}
inline void RequestPlayerOperations::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RequestPlayerOperations::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerOperations.id)
}

// string room_id = 2;
inline void RequestPlayerOperations::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& RequestPlayerOperations::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerOperations.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestPlayerOperations::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerOperations.room_id)
}
inline std::string* RequestPlayerOperations::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestPlayerOperations.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& RequestPlayerOperations::_internal_room_id() const {
  return room_id_.Get();
}
inline void RequestPlayerOperations::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestPlayerOperations::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestPlayerOperations::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.RequestPlayerOperations.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestPlayerOperations::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestPlayerOperations.room_id)
}

// int32 sequence_number = 3;
inline void RequestPlayerOperations::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOperations::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOperations::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerOperations.sequence_number)
  return _internal_sequence_number();
}
inline void RequestPlayerOperations::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void RequestPlayerOperations::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerOperations.sequence_number)
}

// repeated .syncframe.Operation operations = 4;
inline int RequestPlayerOperations::_internal_operations_size() const {
  return operations_.size();
}
inline int RequestPlayerOperations::operations_size() const {
  return _internal_operations_size();
}
inline void RequestPlayerOperations::clear_operations() {
  operations_.Clear();
}
inline ::syncframe::Operation* RequestPlayerOperations::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestPlayerOperations.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >*
RequestPlayerOperations::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:syncframe.RequestPlayerOperations.operations)
  return &operations_;
}
inline const ::syncframe::Operation& RequestPlayerOperations::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::syncframe::Operation& RequestPlayerOperations::operations(int index) const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerOperations.operations)
  return _internal_operations(index);
}
inline ::syncframe::Operation* RequestPlayerOperations::_internal_add_operations() {
  return operations_.Add();
}
inline ::syncframe::Operation* RequestPlayerOperations::add_operations() {
  // @@protoc_insertion_point(field_add:syncframe.RequestPlayerOperations.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >&
RequestPlayerOperations::operations() const {
  // @@protoc_insertion_point(field_list:syncframe.RequestPlayerOperations.operations)
  return operations_;
}

// -------------------------------------------------------------------

// Operation

// int32 id = 1;
inline void Operation::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::id() const {
  // @@protoc_insertion_point(field_get:syncframe.Operation.id)
  return _internal_id();
}
inline void Operation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Operation::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:syncframe.Operation.id)
}

// string event = 2;
inline void Operation::clear_event() {
  event_.ClearToEmpty();
}
inline const std::string& Operation::event() const {
  // @@protoc_insertion_point(field_get:syncframe.Operation.event)
  return _internal_event();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_event(ArgT0&& arg0, ArgT... args) {
 
 event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.Operation.event)
}
inline std::string* Operation::mutable_event() {
  // @@protoc_insertion_point(field_mutable:syncframe.Operation.event)
  return _internal_mutable_event();
}
inline const std::string& Operation::_internal_event() const {
  return event_.Get();
}
inline void Operation::_internal_set_event(const std::string& value) {
  
  event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_event() {
  
  return event_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_event() {
  // @@protoc_insertion_point(field_release:syncframe.Operation.event)
  return event_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.Operation.event)
}

// string value = 3;
inline void Operation::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Operation::value() const {
  // @@protoc_insertion_point(field_get:syncframe.Operation.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.Operation.value)
}
inline std::string* Operation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:syncframe.Operation.value)
  return _internal_mutable_value();
}
inline const std::string& Operation::_internal_value() const {
  return value_.Get();
}
inline void Operation::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Operation::release_value() {
  // @@protoc_insertion_point(field_release:syncframe.Operation.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Operation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.Operation.value)
}

// int32 player_id = 4;
inline void Operation::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.Operation.player_id)
  return _internal_player_id();
}
inline void Operation::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void Operation::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.Operation.player_id)
}

// -------------------------------------------------------------------

// RequestClientPing

// int64 add_time = 1;
inline void RequestClientPing::clear_add_time() {
  add_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPing.add_time)
  return _internal_add_time();
}
inline void RequestClientPing::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  add_time_ = value;
}
inline void RequestClientPing::set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPing.add_time)
}

// int64 client_receive_time = 2;
inline void RequestClientPing::clear_client_receive_time() {
  client_receive_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::_internal_client_receive_time() const {
  return client_receive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::client_receive_time() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPing.client_receive_time)
  return _internal_client_receive_time();
}
inline void RequestClientPing::_internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_receive_time_ = value;
}
inline void RequestClientPing::set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_receive_time(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPing.client_receive_time)
}

// int64 server_response_time = 3;
inline void RequestClientPing::clear_server_response_time() {
  server_response_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::_internal_server_response_time() const {
  return server_response_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::server_response_time() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPing.server_response_time)
  return _internal_server_response_time();
}
inline void RequestClientPing::_internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_response_time_ = value;
}
inline void RequestClientPing::set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_response_time(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPing.server_response_time)
}

// int64 rtt_timeout = 4;
inline void RequestClientPing::clear_rtt_timeout() {
  rtt_timeout_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::_internal_rtt_timeout() const {
  return rtt_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientPing::rtt_timeout() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPing.rtt_timeout)
  return _internal_rtt_timeout();
}
inline void RequestClientPing::_internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rtt_timeout_ = value;
}
inline void RequestClientPing::set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rtt_timeout(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPing.rtt_timeout)
}

// int32 rtt_times = 5;
inline void RequestClientPing::clear_rtt_times() {
  rtt_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestClientPing::_internal_rtt_times() const {
  return rtt_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestClientPing::rtt_times() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientPing.rtt_times)
  return _internal_rtt_times();
}
inline void RequestClientPing::_internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rtt_times_ = value;
}
inline void RequestClientPing::set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rtt_times(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientPing.rtt_times)
}

// -------------------------------------------------------------------

// RequestPlayerResumeGame

// int32 player_id = 1;
inline void RequestPlayerResumeGame::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerResumeGame::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerResumeGame::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerResumeGame.player_id)
  return _internal_player_id();
}
inline void RequestPlayerResumeGame::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestPlayerResumeGame::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerResumeGame.player_id)
}

// string room_id = 2;
inline void RequestPlayerResumeGame::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& RequestPlayerResumeGame::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerResumeGame.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestPlayerResumeGame::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerResumeGame.room_id)
}
inline std::string* RequestPlayerResumeGame::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestPlayerResumeGame.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& RequestPlayerResumeGame::_internal_room_id() const {
  return room_id_.Get();
}
inline void RequestPlayerResumeGame::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestPlayerResumeGame::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestPlayerResumeGame::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.RequestPlayerResumeGame.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestPlayerResumeGame::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestPlayerResumeGame.room_id)
}

// int32 sequence_number = 3;
inline void RequestPlayerResumeGame::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerResumeGame::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerResumeGame::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerResumeGame.sequence_number)
  return _internal_sequence_number();
}
inline void RequestPlayerResumeGame::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void RequestPlayerResumeGame::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerResumeGame.sequence_number)
}

// -------------------------------------------------------------------

// RequestPlayerMatchSign

// int32 player_id = 1;
inline void RequestPlayerMatchSign::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerMatchSign::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerMatchSign::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerMatchSign.player_id)
  return _internal_player_id();
}
inline void RequestPlayerMatchSign::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestPlayerMatchSign::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerMatchSign.player_id)
}

// -------------------------------------------------------------------

// RequestPlayerReady

// int32 player_id = 1;
inline void RequestPlayerReady::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerReady::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerReady::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerReady.player_id)
  return _internal_player_id();
}
inline void RequestPlayerReady::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestPlayerReady::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerReady.player_id)
}

// string room_id = 2;
inline void RequestPlayerReady::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& RequestPlayerReady::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerReady.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestPlayerReady::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerReady.room_id)
}
inline std::string* RequestPlayerReady::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestPlayerReady.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& RequestPlayerReady::_internal_room_id() const {
  return room_id_.Get();
}
inline void RequestPlayerReady::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestPlayerReady::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestPlayerReady::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.RequestPlayerReady.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestPlayerReady::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestPlayerReady.room_id)
}

// -------------------------------------------------------------------

// RequestGetRoom

// int32 player_id = 1;
inline void RequestGetRoom::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestGetRoom::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestGetRoom::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestGetRoom.player_id)
  return _internal_player_id();
}
inline void RequestGetRoom::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestGetRoom::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestGetRoom.player_id)
}

// string room_id = 2;
inline void RequestGetRoom::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& RequestGetRoom::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestGetRoom.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestGetRoom::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestGetRoom.room_id)
}
inline std::string* RequestGetRoom::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestGetRoom.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& RequestGetRoom::_internal_room_id() const {
  return room_id_.Get();
}
inline void RequestGetRoom::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestGetRoom::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestGetRoom::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.RequestGetRoom.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestGetRoom::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestGetRoom.room_id)
}

// -------------------------------------------------------------------

// RequestRoomHistory

// int32 player_id = 1;
inline void RequestRoomHistory::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoomHistory::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoomHistory::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestRoomHistory.player_id)
  return _internal_player_id();
}
inline void RequestRoomHistory::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestRoomHistory::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestRoomHistory.player_id)
}

// string room_id = 2;
inline void RequestRoomHistory::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& RequestRoomHistory::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestRoomHistory.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestRoomHistory::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestRoomHistory.room_id)
}
inline std::string* RequestRoomHistory::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestRoomHistory.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& RequestRoomHistory::_internal_room_id() const {
  return room_id_.Get();
}
inline void RequestRoomHistory::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestRoomHistory::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestRoomHistory::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.RequestRoomHistory.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestRoomHistory::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestRoomHistory.room_id)
}

// int32 sequence_numberStart = 3;
inline void RequestRoomHistory::clear_sequence_numberstart() {
  sequence_numberstart_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoomHistory::_internal_sequence_numberstart() const {
  return sequence_numberstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoomHistory::sequence_numberstart() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestRoomHistory.sequence_numberStart)
  return _internal_sequence_numberstart();
}
inline void RequestRoomHistory::_internal_set_sequence_numberstart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_numberstart_ = value;
}
inline void RequestRoomHistory::set_sequence_numberstart(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_numberstart(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestRoomHistory.sequence_numberStart)
}

// int32 sequence_numberEnd = 4;
inline void RequestRoomHistory::clear_sequence_numberend() {
  sequence_numberend_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoomHistory::_internal_sequence_numberend() const {
  return sequence_numberend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoomHistory::sequence_numberend() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestRoomHistory.sequence_numberEnd)
  return _internal_sequence_numberend();
}
inline void RequestRoomHistory::_internal_set_sequence_numberend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_numberend_ = value;
}
inline void RequestRoomHistory::set_sequence_numberend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_numberend(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestRoomHistory.sequence_numberEnd)
}

// -------------------------------------------------------------------

// RequestPlayerMatchSignCancel

// int32 player_id = 1;
inline void RequestPlayerMatchSignCancel::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerMatchSignCancel::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerMatchSignCancel::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerMatchSignCancel.player_id)
  return _internal_player_id();
}
inline void RequestPlayerMatchSignCancel::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestPlayerMatchSignCancel::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerMatchSignCancel.player_id)
}

// -------------------------------------------------------------------

// RequestClientHeartbeat

// int64 time = 1;
inline void RequestClientHeartbeat::clear_time() {
  time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientHeartbeat::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestClientHeartbeat::time() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestClientHeartbeat.time)
  return _internal_time();
}
inline void RequestClientHeartbeat::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void RequestClientHeartbeat::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestClientHeartbeat.time)
}

// -------------------------------------------------------------------

// RequestGameOver

// int32 player_id = 1;
inline void RequestGameOver::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestGameOver::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestGameOver::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestGameOver.player_id)
  return _internal_player_id();
}
inline void RequestGameOver::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestGameOver::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestGameOver.player_id)
}

// string room_id = 2;
inline void RequestGameOver::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& RequestGameOver::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestGameOver.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestGameOver::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestGameOver.room_id)
}
inline std::string* RequestGameOver::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestGameOver.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& RequestGameOver::_internal_room_id() const {
  return room_id_.Get();
}
inline void RequestGameOver::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestGameOver::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestGameOver::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.RequestGameOver.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestGameOver::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestGameOver.room_id)
}

// int32 sequence_number = 3;
inline void RequestGameOver::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestGameOver::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestGameOver::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestGameOver.sequence_number)
  return _internal_sequence_number();
}
inline void RequestGameOver::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void RequestGameOver::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestGameOver.sequence_number)
}

// string result = 4;
inline void RequestGameOver::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& RequestGameOver::result() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestGameOver.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestGameOver::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.RequestGameOver.result)
}
inline std::string* RequestGameOver::mutable_result() {
  // @@protoc_insertion_point(field_mutable:syncframe.RequestGameOver.result)
  return _internal_mutable_result();
}
inline const std::string& RequestGameOver::_internal_result() const {
  return result_.Get();
}
inline void RequestGameOver::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestGameOver::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestGameOver::release_result() {
  // @@protoc_insertion_point(field_release:syncframe.RequestGameOver.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestGameOver::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.RequestGameOver.result)
}

// -------------------------------------------------------------------

// RequestPlayerOver

// int32 player_id = 1;
inline void RequestPlayerOver::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOver::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOver::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerOver.player_id)
  return _internal_player_id();
}
inline void RequestPlayerOver::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void RequestPlayerOver::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerOver.player_id)
}

// int32 sequence_number = 2;
inline void RequestPlayerOver::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOver::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestPlayerOver::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.RequestPlayerOver.sequence_number)
  return _internal_sequence_number();
}
inline void RequestPlayerOver::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void RequestPlayerOver::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.RequestPlayerOver.sequence_number)
}

// -------------------------------------------------------------------

// ResponseLoginRes

// int32 code = 1;
inline void ResponseLoginRes::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseLoginRes::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseLoginRes::code() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseLoginRes.code)
  return _internal_code();
}
inline void ResponseLoginRes::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ResponseLoginRes::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseLoginRes.code)
}

// string errMsg = 2;
inline void ResponseLoginRes::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& ResponseLoginRes::errmsg() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseLoginRes.errMsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseLoginRes::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseLoginRes.errMsg)
}
inline std::string* ResponseLoginRes::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseLoginRes.errMsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResponseLoginRes::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ResponseLoginRes::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseLoginRes::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseLoginRes::release_errmsg() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseLoginRes.errMsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseLoginRes::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseLoginRes.errMsg)
}

// .syncframe.Player player = 3;
inline bool ResponseLoginRes::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool ResponseLoginRes::has_player() const {
  return _internal_has_player();
}
inline void ResponseLoginRes::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::syncframe::Player& ResponseLoginRes::_internal_player() const {
  const ::syncframe::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::syncframe::Player&>(
      ::syncframe::_Player_default_instance_);
}
inline const ::syncframe::Player& ResponseLoginRes::player() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseLoginRes.player)
  return _internal_player();
}
inline void ResponseLoginRes::unsafe_arena_set_allocated_player(
    ::syncframe::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:syncframe.ResponseLoginRes.player)
}
inline ::syncframe::Player* ResponseLoginRes::release_player() {
  
  ::syncframe::Player* temp = player_;
  player_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::syncframe::Player* ResponseLoginRes::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseLoginRes.player)
  
  ::syncframe::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::syncframe::Player* ResponseLoginRes::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::syncframe::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::syncframe::Player* ResponseLoginRes::mutable_player() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseLoginRes.player)
  return _internal_mutable_player();
}
inline void ResponseLoginRes::set_allocated_player(::syncframe::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::syncframe::Player>::GetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseLoginRes.player)
}

// -------------------------------------------------------------------

// ResponsePlayerStatus

// int32 id = 1;
inline void ResponsePlayerStatus::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerStatus.id)
  return _internal_id();
}
inline void ResponsePlayerStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ResponsePlayerStatus::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerStatus.id)
}

// string nickname = 2;
inline void ResponsePlayerStatus::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& ResponsePlayerStatus::nickname() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerStatus.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePlayerStatus::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerStatus.nickname)
}
inline std::string* ResponsePlayerStatus::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePlayerStatus.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& ResponsePlayerStatus::_internal_nickname() const {
  return nickname_.Get();
}
inline void ResponsePlayerStatus::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePlayerStatus::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePlayerStatus::release_nickname() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePlayerStatus.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePlayerStatus::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePlayerStatus.nickname)
}

// int32 status = 3;
inline void ResponsePlayerStatus::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::status() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerStatus.status)
  return _internal_status();
}
inline void ResponsePlayerStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ResponsePlayerStatus::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerStatus.status)
}

// string room_id = 4;
inline void ResponsePlayerStatus::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponsePlayerStatus::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerStatus.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePlayerStatus::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerStatus.room_id)
}
inline std::string* ResponsePlayerStatus::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePlayerStatus.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponsePlayerStatus::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponsePlayerStatus::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePlayerStatus::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePlayerStatus::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePlayerStatus.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePlayerStatus::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePlayerStatus.room_id)
}

// int32 add_time = 5;
inline void ResponsePlayerStatus::clear_add_time() {
  add_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerStatus.add_time)
  return _internal_add_time();
}
inline void ResponsePlayerStatus::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_time_ = value;
}
inline void ResponsePlayerStatus::set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerStatus.add_time)
}

// int32 up_time = 6;
inline void ResponsePlayerStatus::clear_up_time() {
  up_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::_internal_up_time() const {
  return up_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerStatus::up_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerStatus.up_time)
  return _internal_up_time();
}
inline void ResponsePlayerStatus::_internal_set_up_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  up_time_ = value;
}
inline void ResponsePlayerStatus::set_up_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_up_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerStatus.up_time)
}

// -------------------------------------------------------------------

// ResponseOtherPlayerOffline

// int32 player_id = 1;
inline void ResponseOtherPlayerOffline::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerOffline::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerOffline::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseOtherPlayerOffline.player_id)
  return _internal_player_id();
}
inline void ResponseOtherPlayerOffline::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void ResponseOtherPlayerOffline::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseOtherPlayerOffline.player_id)
}

// -------------------------------------------------------------------

// ResponseKickOff

// int64 time = 1;
inline void ResponseKickOff::clear_time() {
  time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseKickOff::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseKickOff::time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseKickOff.time)
  return _internal_time();
}
inline void ResponseKickOff::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void ResponseKickOff::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseKickOff.time)
}

// -------------------------------------------------------------------

// ResponseStartBattle

// int32 sequence_number_start = 1;
inline void ResponseStartBattle::clear_sequence_number_start() {
  sequence_number_start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseStartBattle::_internal_sequence_number_start() const {
  return sequence_number_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseStartBattle::sequence_number_start() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseStartBattle.sequence_number_start)
  return _internal_sequence_number_start();
}
inline void ResponseStartBattle::_internal_set_sequence_number_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_start_ = value;
}
inline void ResponseStartBattle::set_sequence_number_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number_start(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseStartBattle.sequence_number_start)
}

// -------------------------------------------------------------------

// ResponseServerPing

// int64 add_time = 1;
inline void ResponseServerPing::clear_add_time() {
  add_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPing.add_time)
  return _internal_add_time();
}
inline void ResponseServerPing::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  add_time_ = value;
}
inline void ResponseServerPing::set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPing.add_time)
}

// int64 client_receive_time = 2;
inline void ResponseServerPing::clear_client_receive_time() {
  client_receive_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::_internal_client_receive_time() const {
  return client_receive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::client_receive_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPing.client_receive_time)
  return _internal_client_receive_time();
}
inline void ResponseServerPing::_internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_receive_time_ = value;
}
inline void ResponseServerPing::set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_receive_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPing.client_receive_time)
}

// int64 server_response_time = 3;
inline void ResponseServerPing::clear_server_response_time() {
  server_response_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::_internal_server_response_time() const {
  return server_response_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::server_response_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPing.server_response_time)
  return _internal_server_response_time();
}
inline void ResponseServerPing::_internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_response_time_ = value;
}
inline void ResponseServerPing::set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_response_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPing.server_response_time)
}

// int64 rtt_timeout = 4;
inline void ResponseServerPing::clear_rtt_timeout() {
  rtt_timeout_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::_internal_rtt_timeout() const {
  return rtt_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPing::rtt_timeout() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPing.rtt_timeout)
  return _internal_rtt_timeout();
}
inline void ResponseServerPing::_internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rtt_timeout_ = value;
}
inline void ResponseServerPing::set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rtt_timeout(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPing.rtt_timeout)
}

// int32 rtt_times = 5;
inline void ResponseServerPing::clear_rtt_times() {
  rtt_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseServerPing::_internal_rtt_times() const {
  return rtt_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseServerPing::rtt_times() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPing.rtt_times)
  return _internal_rtt_times();
}
inline void ResponseServerPing::_internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rtt_times_ = value;
}
inline void ResponseServerPing::set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rtt_times(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPing.rtt_times)
}

// -------------------------------------------------------------------

// ResponseServerPong

// int64 add_time = 1;
inline void ResponseServerPong::clear_add_time() {
  add_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPong.add_time)
  return _internal_add_time();
}
inline void ResponseServerPong::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  add_time_ = value;
}
inline void ResponseServerPong::set_add_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPong.add_time)
}

// int64 client_receive_time = 2;
inline void ResponseServerPong::clear_client_receive_time() {
  client_receive_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::_internal_client_receive_time() const {
  return client_receive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::client_receive_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPong.client_receive_time)
  return _internal_client_receive_time();
}
inline void ResponseServerPong::_internal_set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_receive_time_ = value;
}
inline void ResponseServerPong::set_client_receive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_receive_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPong.client_receive_time)
}

// int64 server_response_time = 3;
inline void ResponseServerPong::clear_server_response_time() {
  server_response_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::_internal_server_response_time() const {
  return server_response_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::server_response_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPong.server_response_time)
  return _internal_server_response_time();
}
inline void ResponseServerPong::_internal_set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_response_time_ = value;
}
inline void ResponseServerPong::set_server_response_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_response_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPong.server_response_time)
}

// int64 rtt_timeout = 4;
inline void ResponseServerPong::clear_rtt_timeout() {
  rtt_timeout_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::_internal_rtt_timeout() const {
  return rtt_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseServerPong::rtt_timeout() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPong.rtt_timeout)
  return _internal_rtt_timeout();
}
inline void ResponseServerPong::_internal_set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rtt_timeout_ = value;
}
inline void ResponseServerPong::set_rtt_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rtt_timeout(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPong.rtt_timeout)
}

// int32 rtt_times = 5;
inline void ResponseServerPong::clear_rtt_times() {
  rtt_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseServerPong::_internal_rtt_times() const {
  return rtt_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseServerPong::rtt_times() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseServerPong.rtt_times)
  return _internal_rtt_times();
}
inline void ResponseServerPong::_internal_set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rtt_times_ = value;
}
inline void ResponseServerPong::set_rtt_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rtt_times(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseServerPong.rtt_times)
}

// -------------------------------------------------------------------

// ResponseEnterBattle

// int32 rand_seek = 1;
inline void ResponseEnterBattle::clear_rand_seek() {
  rand_seek_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::_internal_rand_seek() const {
  return rand_seek_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::rand_seek() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseEnterBattle.rand_seek)
  return _internal_rand_seek();
}
inline void ResponseEnterBattle::_internal_set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rand_seek_ = value;
}
inline void ResponseEnterBattle::set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rand_seek(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseEnterBattle.rand_seek)
}

// string room_id = 2;
inline void ResponseEnterBattle::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponseEnterBattle::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseEnterBattle.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseEnterBattle::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseEnterBattle.room_id)
}
inline std::string* ResponseEnterBattle::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseEnterBattle.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponseEnterBattle::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponseEnterBattle::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseEnterBattle::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseEnterBattle::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseEnterBattle.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseEnterBattle::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseEnterBattle.room_id)
}

// int32 sequence_number = 3;
inline void ResponseEnterBattle::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseEnterBattle.sequence_number)
  return _internal_sequence_number();
}
inline void ResponseEnterBattle::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void ResponseEnterBattle::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseEnterBattle.sequence_number)
}

// int32 status = 4;
inline void ResponseEnterBattle::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::status() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseEnterBattle.status)
  return _internal_status();
}
inline void ResponseEnterBattle::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ResponseEnterBattle::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseEnterBattle.status)
}

// int32 add_time = 5;
inline void ResponseEnterBattle::clear_add_time() {
  add_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseEnterBattle::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseEnterBattle.add_time)
  return _internal_add_time();
}
inline void ResponseEnterBattle::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_time_ = value;
}
inline void ResponseEnterBattle::set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseEnterBattle.add_time)
}

// int64 time = 6;
inline void ResponseEnterBattle::clear_time() {
  time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseEnterBattle::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseEnterBattle::time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseEnterBattle.time)
  return _internal_time();
}
inline void ResponseEnterBattle::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void ResponseEnterBattle::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseEnterBattle.time)
}

// repeated .syncframe.Player player_list = 7;
inline int ResponseEnterBattle::_internal_player_list_size() const {
  return player_list_.size();
}
inline int ResponseEnterBattle::player_list_size() const {
  return _internal_player_list_size();
}
inline void ResponseEnterBattle::clear_player_list() {
  player_list_.Clear();
}
inline ::syncframe::Player* ResponseEnterBattle::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseEnterBattle.player_list)
  return player_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >*
ResponseEnterBattle::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:syncframe.ResponseEnterBattle.player_list)
  return &player_list_;
}
inline const ::syncframe::Player& ResponseEnterBattle::_internal_player_list(int index) const {
  return player_list_.Get(index);
}
inline const ::syncframe::Player& ResponseEnterBattle::player_list(int index) const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseEnterBattle.player_list)
  return _internal_player_list(index);
}
inline ::syncframe::Player* ResponseEnterBattle::_internal_add_player_list() {
  return player_list_.Add();
}
inline ::syncframe::Player* ResponseEnterBattle::add_player_list() {
  // @@protoc_insertion_point(field_add:syncframe.ResponseEnterBattle.player_list)
  return _internal_add_player_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >&
ResponseEnterBattle::player_list() const {
  // @@protoc_insertion_point(field_list:syncframe.ResponseEnterBattle.player_list)
  return player_list_;
}

// -------------------------------------------------------------------

// ResponsePushLogicFrame

// int32 id = 1;
inline void ResponsePushLogicFrame::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushLogicFrame::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushLogicFrame::id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushLogicFrame.id)
  return _internal_id();
}
inline void ResponsePushLogicFrame::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ResponsePushLogicFrame::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushLogicFrame.id)
}

// string room_id = 2;
inline void ResponsePushLogicFrame::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponsePushLogicFrame::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushLogicFrame.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePushLogicFrame::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushLogicFrame.room_id)
}
inline std::string* ResponsePushLogicFrame::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePushLogicFrame.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponsePushLogicFrame::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponsePushLogicFrame::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePushLogicFrame::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePushLogicFrame::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePushLogicFrame.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePushLogicFrame::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePushLogicFrame.room_id)
}

// int32 sequence_number = 3;
inline void ResponsePushLogicFrame::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushLogicFrame::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushLogicFrame::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushLogicFrame.sequence_number)
  return _internal_sequence_number();
}
inline void ResponsePushLogicFrame::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void ResponsePushLogicFrame::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushLogicFrame.sequence_number)
}

// repeated .syncframe.Operation operations = 4;
inline int ResponsePushLogicFrame::_internal_operations_size() const {
  return operations_.size();
}
inline int ResponsePushLogicFrame::operations_size() const {
  return _internal_operations_size();
}
inline void ResponsePushLogicFrame::clear_operations() {
  operations_.Clear();
}
inline ::syncframe::Operation* ResponsePushLogicFrame::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePushLogicFrame.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >*
ResponsePushLogicFrame::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:syncframe.ResponsePushLogicFrame.operations)
  return &operations_;
}
inline const ::syncframe::Operation& ResponsePushLogicFrame::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::syncframe::Operation& ResponsePushLogicFrame::operations(int index) const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushLogicFrame.operations)
  return _internal_operations(index);
}
inline ::syncframe::Operation* ResponsePushLogicFrame::_internal_add_operations() {
  return operations_.Add();
}
inline ::syncframe::Operation* ResponsePushLogicFrame::add_operations() {
  // @@protoc_insertion_point(field_add:syncframe.ResponsePushLogicFrame.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Operation >&
ResponsePushLogicFrame::operations() const {
  // @@protoc_insertion_point(field_list:syncframe.ResponsePushLogicFrame.operations)
  return operations_;
}

// -------------------------------------------------------------------

// ResponseOtherPlayerOver

// int32 player_id = 1;
inline void ResponseOtherPlayerOver::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerOver::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerOver::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseOtherPlayerOver.player_id)
  return _internal_player_id();
}
inline void ResponseOtherPlayerOver::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void ResponseOtherPlayerOver::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseOtherPlayerOver.player_id)
}

// int32 sequence_number = 2;
inline void ResponseOtherPlayerOver::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerOver::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerOver::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseOtherPlayerOver.sequence_number)
  return _internal_sequence_number();
}
inline void ResponseOtherPlayerOver::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void ResponseOtherPlayerOver::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseOtherPlayerOver.sequence_number)
}

// -------------------------------------------------------------------

// ResponseGameOver

// int32 player_id = 1;
inline void ResponseGameOver::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseGameOver::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseGameOver::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseGameOver.player_id)
  return _internal_player_id();
}
inline void ResponseGameOver::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void ResponseGameOver::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseGameOver.player_id)
}

// string room_id = 2;
inline void ResponseGameOver::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponseGameOver::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseGameOver.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseGameOver::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseGameOver.room_id)
}
inline std::string* ResponseGameOver::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseGameOver.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponseGameOver::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponseGameOver::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseGameOver::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseGameOver::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseGameOver.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseGameOver::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseGameOver.room_id)
}

// int32 sequence_number = 3;
inline void ResponseGameOver::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseGameOver::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseGameOver::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseGameOver.sequence_number)
  return _internal_sequence_number();
}
inline void ResponseGameOver::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void ResponseGameOver::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseGameOver.sequence_number)
}

// string result = 4;
inline void ResponseGameOver::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& ResponseGameOver::result() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseGameOver.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseGameOver::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseGameOver.result)
}
inline std::string* ResponseGameOver::mutable_result() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseGameOver.result)
  return _internal_mutable_result();
}
inline const std::string& ResponseGameOver::_internal_result() const {
  return result_.Get();
}
inline void ResponseGameOver::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseGameOver::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseGameOver::release_result() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseGameOver.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseGameOver::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseGameOver.result)
}

// -------------------------------------------------------------------

// ResponseReadyTimeout

// string room_id = 1;
inline void ResponseReadyTimeout::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponseReadyTimeout::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseReadyTimeout.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseReadyTimeout::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseReadyTimeout.room_id)
}
inline std::string* ResponseReadyTimeout::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseReadyTimeout.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponseReadyTimeout::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponseReadyTimeout::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseReadyTimeout::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseReadyTimeout::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseReadyTimeout.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseReadyTimeout::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseReadyTimeout.room_id)
}

// -------------------------------------------------------------------

// ResponsePushRoomInfo

// string id = 1;
inline void ResponsePushRoomInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ResponsePushRoomInfo::id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePushRoomInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.id)
}
inline std::string* ResponsePushRoomInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePushRoomInfo.id)
  return _internal_mutable_id();
}
inline const std::string& ResponsePushRoomInfo::_internal_id() const {
  return id_.Get();
}
inline void ResponsePushRoomInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePushRoomInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePushRoomInfo::release_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePushRoomInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePushRoomInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePushRoomInfo.id)
}

// int32 add_time = 2;
inline void ResponsePushRoomInfo::clear_add_time() {
  add_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.add_time)
  return _internal_add_time();
}
inline void ResponsePushRoomInfo::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_time_ = value;
}
inline void ResponsePushRoomInfo::set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.add_time)
}

// int32 status = 3;
inline void ResponsePushRoomInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::status() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.status)
  return _internal_status();
}
inline void ResponsePushRoomInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ResponsePushRoomInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.status)
}

// int32 timeout = 4;
inline void ResponsePushRoomInfo::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::timeout() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.timeout)
  return _internal_timeout();
}
inline void ResponsePushRoomInfo::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void ResponsePushRoomInfo::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.timeout)
}

// int32 sequence_number = 5;
inline void ResponsePushRoomInfo::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.sequence_number)
  return _internal_sequence_number();
}
inline void ResponsePushRoomInfo::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void ResponsePushRoomInfo::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.sequence_number)
}

// int32 rand_seek = 6;
inline void ResponsePushRoomInfo::clear_rand_seek() {
  rand_seek_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::_internal_rand_seek() const {
  return rand_seek_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::rand_seek() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.rand_seek)
  return _internal_rand_seek();
}
inline void ResponsePushRoomInfo::_internal_set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rand_seek_ = value;
}
inline void ResponsePushRoomInfo::set_rand_seek(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rand_seek(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.rand_seek)
}

// repeated .syncframe.Player player_list = 7;
inline int ResponsePushRoomInfo::_internal_player_list_size() const {
  return player_list_.size();
}
inline int ResponsePushRoomInfo::player_list_size() const {
  return _internal_player_list_size();
}
inline void ResponsePushRoomInfo::clear_player_list() {
  player_list_.Clear();
}
inline ::syncframe::Player* ResponsePushRoomInfo::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePushRoomInfo.player_list)
  return player_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >*
ResponsePushRoomInfo::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:syncframe.ResponsePushRoomInfo.player_list)
  return &player_list_;
}
inline const ::syncframe::Player& ResponsePushRoomInfo::_internal_player_list(int index) const {
  return player_list_.Get(index);
}
inline const ::syncframe::Player& ResponsePushRoomInfo::player_list(int index) const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.player_list)
  return _internal_player_list(index);
}
inline ::syncframe::Player* ResponsePushRoomInfo::_internal_add_player_list() {
  return player_list_.Add();
}
inline ::syncframe::Player* ResponsePushRoomInfo::add_player_list() {
  // @@protoc_insertion_point(field_add:syncframe.ResponsePushRoomInfo.player_list)
  return _internal_add_player_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::Player >&
ResponsePushRoomInfo::player_list() const {
  // @@protoc_insertion_point(field_list:syncframe.ResponsePushRoomInfo.player_list)
  return player_list_;
}

// string room_id = 8;
inline void ResponsePushRoomInfo::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponsePushRoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePushRoomInfo::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.room_id)
}
inline std::string* ResponsePushRoomInfo::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePushRoomInfo.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponsePushRoomInfo::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponsePushRoomInfo::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePushRoomInfo::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePushRoomInfo::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePushRoomInfo.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePushRoomInfo::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePushRoomInfo.room_id)
}

// int32 start_time = 9;
inline void ResponsePushRoomInfo::clear_start_time() {
  start_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::start_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.start_time)
  return _internal_start_time();
}
inline void ResponsePushRoomInfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_time_ = value;
}
inline void ResponsePushRoomInfo::set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.start_time)
}

// int32 end_time = 10;
inline void ResponsePushRoomInfo::clear_end_time() {
  end_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePushRoomInfo::end_time() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomInfo.end_time)
  return _internal_end_time();
}
inline void ResponsePushRoomInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_time_ = value;
}
inline void ResponsePushRoomInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePushRoomInfo.end_time)
}

// -------------------------------------------------------------------

// ResponsePushRoomHistory

// repeated .syncframe.ResponseRoomHistory list = 1;
inline int ResponsePushRoomHistory::_internal_list_size() const {
  return list_.size();
}
inline int ResponsePushRoomHistory::list_size() const {
  return _internal_list_size();
}
inline void ResponsePushRoomHistory::clear_list() {
  list_.Clear();
}
inline ::syncframe::ResponseRoomHistory* ResponsePushRoomHistory::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePushRoomHistory.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::ResponseRoomHistory >*
ResponsePushRoomHistory::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:syncframe.ResponsePushRoomHistory.list)
  return &list_;
}
inline const ::syncframe::ResponseRoomHistory& ResponsePushRoomHistory::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::syncframe::ResponseRoomHistory& ResponsePushRoomHistory::list(int index) const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePushRoomHistory.list)
  return _internal_list(index);
}
inline ::syncframe::ResponseRoomHistory* ResponsePushRoomHistory::_internal_add_list() {
  return list_.Add();
}
inline ::syncframe::ResponseRoomHistory* ResponsePushRoomHistory::add_list() {
  // @@protoc_insertion_point(field_add:syncframe.ResponsePushRoomHistory.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syncframe::ResponseRoomHistory >&
ResponsePushRoomHistory::list() const {
  // @@protoc_insertion_point(field_list:syncframe.ResponsePushRoomHistory.list)
  return list_;
}

// -------------------------------------------------------------------

// ResponseRoomHistory

// int32 id = 1;
inline void ResponseRoomHistory::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseRoomHistory::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseRoomHistory::id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseRoomHistory.id)
  return _internal_id();
}
inline void ResponseRoomHistory::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ResponseRoomHistory::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseRoomHistory.id)
}

// string action = 2;
inline void ResponseRoomHistory::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& ResponseRoomHistory::action() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseRoomHistory.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRoomHistory::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseRoomHistory.action)
}
inline std::string* ResponseRoomHistory::mutable_action() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseRoomHistory.action)
  return _internal_mutable_action();
}
inline const std::string& ResponseRoomHistory::_internal_action() const {
  return action_.Get();
}
inline void ResponseRoomHistory::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRoomHistory::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRoomHistory::release_action() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseRoomHistory.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRoomHistory::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseRoomHistory.action)
}

// string content = 3;
inline void ResponseRoomHistory::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ResponseRoomHistory::content() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseRoomHistory.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRoomHistory::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseRoomHistory.content)
}
inline std::string* ResponseRoomHistory::mutable_content() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseRoomHistory.content)
  return _internal_mutable_content();
}
inline const std::string& ResponseRoomHistory::_internal_content() const {
  return content_.Get();
}
inline void ResponseRoomHistory::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRoomHistory::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRoomHistory::release_content() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseRoomHistory.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRoomHistory::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseRoomHistory.content)
}

// -------------------------------------------------------------------

// ResponseOtherPlayerResumeGame

// int32 player_id = 1;
inline void ResponseOtherPlayerResumeGame::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerResumeGame::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerResumeGame::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseOtherPlayerResumeGame.player_id)
  return _internal_player_id();
}
inline void ResponseOtherPlayerResumeGame::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void ResponseOtherPlayerResumeGame::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseOtherPlayerResumeGame.player_id)
}

// string room_id = 2;
inline void ResponseOtherPlayerResumeGame::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponseOtherPlayerResumeGame::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseOtherPlayerResumeGame.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseOtherPlayerResumeGame::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseOtherPlayerResumeGame.room_id)
}
inline std::string* ResponseOtherPlayerResumeGame::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseOtherPlayerResumeGame.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponseOtherPlayerResumeGame::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponseOtherPlayerResumeGame::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseOtherPlayerResumeGame::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseOtherPlayerResumeGame::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseOtherPlayerResumeGame.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseOtherPlayerResumeGame::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseOtherPlayerResumeGame.room_id)
}

// int32 sequence_number = 3;
inline void ResponseOtherPlayerResumeGame::clear_sequence_number() {
  sequence_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerResumeGame::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseOtherPlayerResumeGame::sequence_number() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseOtherPlayerResumeGame.sequence_number)
  return _internal_sequence_number();
}
inline void ResponseOtherPlayerResumeGame::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_number_ = value;
}
inline void ResponseOtherPlayerResumeGame::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseOtherPlayerResumeGame.sequence_number)
}

// -------------------------------------------------------------------

// Player

// int32 id = 1;
inline void Player::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::id() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:syncframe.Player.id)
}

// int32 role_id = 2;
inline void Player::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::role_id() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.role_id)
  return _internal_role_id();
}
inline void Player::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void Player::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:syncframe.Player.role_id)
}

// string nickname = 3;
inline void Player::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& Player::nickname() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.Player.nickname)
}
inline std::string* Player::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:syncframe.Player.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Player::_internal_nickname() const {
  return nickname_.Get();
}
inline void Player::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_nickname() {
  // @@protoc_insertion_point(field_release:syncframe.Player.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.Player.nickname)
}

// int32 status = 4;
inline void Player::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::status() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.status)
  return _internal_status();
}
inline void Player::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void Player::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:syncframe.Player.status)
}

// int32 add_time = 5;
inline void Player::clear_add_time() {
  add_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_add_time() const {
  return add_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::add_time() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.add_time)
  return _internal_add_time();
}
inline void Player::_internal_set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_time_ = value;
}
inline void Player::set_add_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add_time(value);
  // @@protoc_insertion_point(field_set:syncframe.Player.add_time)
}

// int32 upTime = 6;
inline void Player::clear_uptime() {
  uptime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::uptime() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.upTime)
  return _internal_uptime();
}
inline void Player::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uptime_ = value;
}
inline void Player::set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:syncframe.Player.upTime)
}

// string room_id = 7;
inline void Player::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& Player::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.Player.room_id)
}
inline std::string* Player::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.Player.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& Player::_internal_room_id() const {
  return room_id_.Get();
}
inline void Player::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.Player.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.Player.room_id)
}

// int32 upd_port = 8;
inline void Player::clear_upd_port() {
  upd_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_upd_port() const {
  return upd_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::upd_port() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.upd_port)
  return _internal_upd_port();
}
inline void Player::_internal_set_upd_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upd_port_ = value;
}
inline void Player::set_upd_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upd_port(value);
  // @@protoc_insertion_point(field_set:syncframe.Player.upd_port)
}

// string ip = 9;
inline void Player::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Player::ip() const {
  // @@protoc_insertion_point(field_get:syncframe.Player.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.Player.ip)
}
inline std::string* Player::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:syncframe.Player.ip)
  return _internal_mutable_ip();
}
inline const std::string& Player::_internal_ip() const {
  return ip_.Get();
}
inline void Player::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_ip() {
  // @@protoc_insertion_point(field_release:syncframe.Player.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.Player.ip)
}

// -------------------------------------------------------------------

// ResponseRestartGame

// string room_id = 1;
inline void ResponseRestartGame::clear_room_id() {
  room_id_.ClearToEmpty();
}
inline const std::string& ResponseRestartGame::room_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseRestartGame.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseRestartGame::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponseRestartGame.room_id)
}
inline std::string* ResponseRestartGame::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponseRestartGame.room_id)
  return _internal_mutable_room_id();
}
inline const std::string& ResponseRestartGame::_internal_room_id() const {
  return room_id_.Get();
}
inline void ResponseRestartGame::_internal_set_room_id(const std::string& value) {
  
  room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseRestartGame::_internal_mutable_room_id() {
  
  return room_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseRestartGame::release_room_id() {
  // @@protoc_insertion_point(field_release:syncframe.ResponseRestartGame.room_id)
  return room_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseRestartGame::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponseRestartGame.room_id)
}

// repeated int32 player_ids = 2;
inline int ResponseRestartGame::_internal_player_ids_size() const {
  return player_ids_.size();
}
inline int ResponseRestartGame::player_ids_size() const {
  return _internal_player_ids_size();
}
inline void ResponseRestartGame::clear_player_ids() {
  player_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseRestartGame::_internal_player_ids(int index) const {
  return player_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseRestartGame::player_ids(int index) const {
  // @@protoc_insertion_point(field_get:syncframe.ResponseRestartGame.player_ids)
  return _internal_player_ids(index);
}
inline void ResponseRestartGame::set_player_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  player_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:syncframe.ResponseRestartGame.player_ids)
}
inline void ResponseRestartGame::_internal_add_player_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  player_ids_.Add(value);
}
inline void ResponseRestartGame::add_player_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_player_ids(value);
  // @@protoc_insertion_point(field_add:syncframe.ResponseRestartGame.player_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResponseRestartGame::_internal_player_ids() const {
  return player_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ResponseRestartGame::player_ids() const {
  // @@protoc_insertion_point(field_list:syncframe.ResponseRestartGame.player_ids)
  return _internal_player_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResponseRestartGame::_internal_mutable_player_ids() {
  return &player_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ResponseRestartGame::mutable_player_ids() {
  // @@protoc_insertion_point(field_mutable_list:syncframe.ResponseRestartGame.player_ids)
  return _internal_mutable_player_ids();
}

// -------------------------------------------------------------------

// ResponsePlayerMatchSignFailed

// int32 player_id = 1;
inline void ResponsePlayerMatchSignFailed::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchSignFailed::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchSignFailed::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerMatchSignFailed.player_id)
  return _internal_player_id();
}
inline void ResponsePlayerMatchSignFailed::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void ResponsePlayerMatchSignFailed::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerMatchSignFailed.player_id)
}

// string msg = 2;
inline void ResponsePlayerMatchSignFailed::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ResponsePlayerMatchSignFailed::msg() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerMatchSignFailed.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePlayerMatchSignFailed::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerMatchSignFailed.msg)
}
inline std::string* ResponsePlayerMatchSignFailed::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePlayerMatchSignFailed.msg)
  return _internal_mutable_msg();
}
inline const std::string& ResponsePlayerMatchSignFailed::_internal_msg() const {
  return msg_.Get();
}
inline void ResponsePlayerMatchSignFailed::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePlayerMatchSignFailed::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePlayerMatchSignFailed::release_msg() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePlayerMatchSignFailed.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePlayerMatchSignFailed::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePlayerMatchSignFailed.msg)
}

// int32 code = 3;
inline void ResponsePlayerMatchSignFailed::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchSignFailed::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchSignFailed::code() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerMatchSignFailed.code)
  return _internal_code();
}
inline void ResponsePlayerMatchSignFailed::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ResponsePlayerMatchSignFailed::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerMatchSignFailed.code)
}

// -------------------------------------------------------------------

// ResponsePlayerMatchingFailed

// int32 player_id = 1;
inline void ResponsePlayerMatchingFailed::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchingFailed::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchingFailed::player_id() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerMatchingFailed.player_id)
  return _internal_player_id();
}
inline void ResponsePlayerMatchingFailed::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void ResponsePlayerMatchingFailed::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerMatchingFailed.player_id)
}

// string msg = 2;
inline void ResponsePlayerMatchingFailed::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ResponsePlayerMatchingFailed::msg() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerMatchingFailed.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePlayerMatchingFailed::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerMatchingFailed.msg)
}
inline std::string* ResponsePlayerMatchingFailed::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePlayerMatchingFailed.msg)
  return _internal_mutable_msg();
}
inline const std::string& ResponsePlayerMatchingFailed::_internal_msg() const {
  return msg_.Get();
}
inline void ResponsePlayerMatchingFailed::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePlayerMatchingFailed::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePlayerMatchingFailed::release_msg() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePlayerMatchingFailed.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePlayerMatchingFailed::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePlayerMatchingFailed.msg)
}

// string roomId = 3;
inline void ResponsePlayerMatchingFailed::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& ResponsePlayerMatchingFailed::roomid() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerMatchingFailed.roomId)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponsePlayerMatchingFailed::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerMatchingFailed.roomId)
}
inline std::string* ResponsePlayerMatchingFailed::mutable_roomid() {
  // @@protoc_insertion_point(field_mutable:syncframe.ResponsePlayerMatchingFailed.roomId)
  return _internal_mutable_roomid();
}
inline const std::string& ResponsePlayerMatchingFailed::_internal_roomid() const {
  return roomid_.Get();
}
inline void ResponsePlayerMatchingFailed::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponsePlayerMatchingFailed::_internal_mutable_roomid() {
  
  return roomid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponsePlayerMatchingFailed::release_roomid() {
  // @@protoc_insertion_point(field_release:syncframe.ResponsePlayerMatchingFailed.roomId)
  return roomid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponsePlayerMatchingFailed::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.ResponsePlayerMatchingFailed.roomId)
}

// int32 code = 4;
inline void ResponsePlayerMatchingFailed::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchingFailed::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponsePlayerMatchingFailed::code() const {
  // @@protoc_insertion_point(field_get:syncframe.ResponsePlayerMatchingFailed.code)
  return _internal_code();
}
inline void ResponsePlayerMatchingFailed::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ResponsePlayerMatchingFailed::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:syncframe.ResponsePlayerMatchingFailed.code)
}

// -------------------------------------------------------------------

// CfgServer

// string ListenIp = 1;
inline void CfgServer::clear_listenip() {
  listenip_.ClearToEmpty();
}
inline const std::string& CfgServer::listenip() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.ListenIp)
  return _internal_listenip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgServer::set_listenip(ArgT0&& arg0, ArgT... args) {
 
 listenip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.ListenIp)
}
inline std::string* CfgServer::mutable_listenip() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgServer.ListenIp)
  return _internal_mutable_listenip();
}
inline const std::string& CfgServer::_internal_listenip() const {
  return listenip_.Get();
}
inline void CfgServer::_internal_set_listenip(const std::string& value) {
  
  listenip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgServer::_internal_mutable_listenip() {
  
  return listenip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgServer::release_listenip() {
  // @@protoc_insertion_point(field_release:syncframe.CfgServer.ListenIp)
  return listenip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgServer::set_allocated_listenip(std::string* listenip) {
  if (listenip != nullptr) {
    
  } else {
    
  }
  listenip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listenip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgServer.ListenIp)
}

// string OutIp = 2;
inline void CfgServer::clear_outip() {
  outip_.ClearToEmpty();
}
inline const std::string& CfgServer::outip() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.OutIp)
  return _internal_outip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgServer::set_outip(ArgT0&& arg0, ArgT... args) {
 
 outip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.OutIp)
}
inline std::string* CfgServer::mutable_outip() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgServer.OutIp)
  return _internal_mutable_outip();
}
inline const std::string& CfgServer::_internal_outip() const {
  return outip_.Get();
}
inline void CfgServer::_internal_set_outip(const std::string& value) {
  
  outip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgServer::_internal_mutable_outip() {
  
  return outip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgServer::release_outip() {
  // @@protoc_insertion_point(field_release:syncframe.CfgServer.OutIp)
  return outip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgServer::set_allocated_outip(std::string* outip) {
  if (outip != nullptr) {
    
  } else {
    
  }
  outip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgServer.OutIp)
}

// string Port = 3;
inline void CfgServer::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& CfgServer::port() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.Port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgServer::set_port(ArgT0&& arg0, ArgT... args) {
 
 port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.Port)
}
inline std::string* CfgServer::mutable_port() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgServer.Port)
  return _internal_mutable_port();
}
inline const std::string& CfgServer::_internal_port() const {
  return port_.Get();
}
inline void CfgServer::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgServer::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgServer::release_port() {
  // @@protoc_insertion_point(field_release:syncframe.CfgServer.Port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgServer::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgServer.Port)
}

// string UdpPort = 4;
inline void CfgServer::clear_udpport() {
  udpport_.ClearToEmpty();
}
inline const std::string& CfgServer::udpport() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.UdpPort)
  return _internal_udpport();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgServer::set_udpport(ArgT0&& arg0, ArgT... args) {
 
 udpport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.UdpPort)
}
inline std::string* CfgServer::mutable_udpport() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgServer.UdpPort)
  return _internal_mutable_udpport();
}
inline const std::string& CfgServer::_internal_udpport() const {
  return udpport_.Get();
}
inline void CfgServer::_internal_set_udpport(const std::string& value) {
  
  udpport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgServer::_internal_mutable_udpport() {
  
  return udpport_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgServer::release_udpport() {
  // @@protoc_insertion_point(field_release:syncframe.CfgServer.UdpPort)
  return udpport_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgServer::set_allocated_udpport(std::string* udpport) {
  if (udpport != nullptr) {
    
  } else {
    
  }
  udpport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udpport,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgServer.UdpPort)
}

// int32 Protocol = 5;
inline void CfgServer::clear_protocol() {
  protocol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_protocol() const {
  return protocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::protocol() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.Protocol)
  return _internal_protocol();
}
inline void CfgServer::_internal_set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protocol_ = value;
}
inline void CfgServer::set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.Protocol)
}

// string WsUri = 6;
inline void CfgServer::clear_wsuri() {
  wsuri_.ClearToEmpty();
}
inline const std::string& CfgServer::wsuri() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.WsUri)
  return _internal_wsuri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgServer::set_wsuri(ArgT0&& arg0, ArgT... args) {
 
 wsuri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.WsUri)
}
inline std::string* CfgServer::mutable_wsuri() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgServer.WsUri)
  return _internal_mutable_wsuri();
}
inline const std::string& CfgServer::_internal_wsuri() const {
  return wsuri_.Get();
}
inline void CfgServer::_internal_set_wsuri(const std::string& value) {
  
  wsuri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgServer::_internal_mutable_wsuri() {
  
  return wsuri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgServer::release_wsuri() {
  // @@protoc_insertion_point(field_release:syncframe.CfgServer.WsUri)
  return wsuri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgServer::set_allocated_wsuri(std::string* wsuri) {
  if (wsuri != nullptr) {
    
  } else {
    
  }
  wsuri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wsuri,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgServer.WsUri)
}

// int32 ContentType = 7;
inline void CfgServer::clear_contenttype() {
  contenttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_contenttype() const {
  return contenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::contenttype() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.ContentType)
  return _internal_contenttype();
}
inline void CfgServer::_internal_set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contenttype_ = value;
}
inline void CfgServer::set_contenttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.ContentType)
}

// string LoginAuthType = 8;
inline void CfgServer::clear_loginauthtype() {
  loginauthtype_.ClearToEmpty();
}
inline const std::string& CfgServer::loginauthtype() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.LoginAuthType)
  return _internal_loginauthtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgServer::set_loginauthtype(ArgT0&& arg0, ArgT... args) {
 
 loginauthtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.LoginAuthType)
}
inline std::string* CfgServer::mutable_loginauthtype() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgServer.LoginAuthType)
  return _internal_mutable_loginauthtype();
}
inline const std::string& CfgServer::_internal_loginauthtype() const {
  return loginauthtype_.Get();
}
inline void CfgServer::_internal_set_loginauthtype(const std::string& value) {
  
  loginauthtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgServer::_internal_mutable_loginauthtype() {
  
  return loginauthtype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgServer::release_loginauthtype() {
  // @@protoc_insertion_point(field_release:syncframe.CfgServer.LoginAuthType)
  return loginauthtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgServer::set_allocated_loginauthtype(std::string* loginauthtype) {
  if (loginauthtype != nullptr) {
    
  } else {
    
  }
  loginauthtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginauthtype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgServer.LoginAuthType)
}

// string LoginAuthSecretKey = 9;
inline void CfgServer::clear_loginauthsecretkey() {
  loginauthsecretkey_.ClearToEmpty();
}
inline const std::string& CfgServer::loginauthsecretkey() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.LoginAuthSecretKey)
  return _internal_loginauthsecretkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgServer::set_loginauthsecretkey(ArgT0&& arg0, ArgT... args) {
 
 loginauthsecretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.LoginAuthSecretKey)
}
inline std::string* CfgServer::mutable_loginauthsecretkey() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgServer.LoginAuthSecretKey)
  return _internal_mutable_loginauthsecretkey();
}
inline const std::string& CfgServer::_internal_loginauthsecretkey() const {
  return loginauthsecretkey_.Get();
}
inline void CfgServer::_internal_set_loginauthsecretkey(const std::string& value) {
  
  loginauthsecretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgServer::_internal_mutable_loginauthsecretkey() {
  
  return loginauthsecretkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgServer::release_loginauthsecretkey() {
  // @@protoc_insertion_point(field_release:syncframe.CfgServer.LoginAuthSecretKey)
  return loginauthsecretkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgServer::set_allocated_loginauthsecretkey(std::string* loginauthsecretkey) {
  if (loginauthsecretkey != nullptr) {
    
  } else {
    
  }
  loginauthsecretkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginauthsecretkey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgServer.LoginAuthSecretKey)
}

// int32 MaxClientConnNum = 10;
inline void CfgServer::clear_maxclientconnnum() {
  maxclientconnnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_maxclientconnnum() const {
  return maxclientconnnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::maxclientconnnum() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.MaxClientConnNum)
  return _internal_maxclientconnnum();
}
inline void CfgServer::_internal_set_maxclientconnnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxclientconnnum_ = value;
}
inline void CfgServer::set_maxclientconnnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxclientconnnum(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.MaxClientConnNum)
}

// int32 MsgContentMax = 11;
inline void CfgServer::clear_msgcontentmax() {
  msgcontentmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_msgcontentmax() const {
  return msgcontentmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::msgcontentmax() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.MsgContentMax)
  return _internal_msgcontentmax();
}
inline void CfgServer::_internal_set_msgcontentmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgcontentmax_ = value;
}
inline void CfgServer::set_msgcontentmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgcontentmax(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.MsgContentMax)
}

// int64 IOTimeout = 12;
inline void CfgServer::clear_iotimeout() {
  iotimeout_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CfgServer::_internal_iotimeout() const {
  return iotimeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CfgServer::iotimeout() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.IOTimeout)
  return _internal_iotimeout();
}
inline void CfgServer::_internal_set_iotimeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iotimeout_ = value;
}
inline void CfgServer::set_iotimeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iotimeout(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.IOTimeout)
}

// int32 ConnTimeout = 13;
inline void CfgServer::clear_conntimeout() {
  conntimeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_conntimeout() const {
  return conntimeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::conntimeout() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.ConnTimeout)
  return _internal_conntimeout();
}
inline void CfgServer::_internal_set_conntimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conntimeout_ = value;
}
inline void CfgServer::set_conntimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conntimeout(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.ConnTimeout)
}

// int32 MapSize = 14;
inline void CfgServer::clear_mapsize() {
  mapsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_mapsize() const {
  return mapsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::mapsize() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.MapSize)
  return _internal_mapsize();
}
inline void CfgServer::_internal_set_mapsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mapsize_ = value;
}
inline void CfgServer::set_mapsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mapsize(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.MapSize)
}

// int32 RoomPeople = 15;
inline void CfgServer::clear_roompeople() {
  roompeople_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_roompeople() const {
  return roompeople_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::roompeople() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.RoomPeople)
  return _internal_roompeople();
}
inline void CfgServer::_internal_set_roompeople(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roompeople_ = value;
}
inline void CfgServer::set_roompeople(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roompeople(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.RoomPeople)
}

// int32 RoomTimeout = 16;
inline void CfgServer::clear_roomtimeout() {
  roomtimeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_roomtimeout() const {
  return roomtimeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::roomtimeout() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.RoomTimeout)
  return _internal_roomtimeout();
}
inline void CfgServer::_internal_set_roomtimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomtimeout_ = value;
}
inline void CfgServer::set_roomtimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomtimeout(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.RoomTimeout)
}

// int32 OffLineWaitTime = 17;
inline void CfgServer::clear_offlinewaittime() {
  offlinewaittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_offlinewaittime() const {
  return offlinewaittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::offlinewaittime() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.OffLineWaitTime)
  return _internal_offlinewaittime();
}
inline void CfgServer::_internal_set_offlinewaittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offlinewaittime_ = value;
}
inline void CfgServer::set_offlinewaittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offlinewaittime(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.OffLineWaitTime)
}

// int32 LockMode = 18;
inline void CfgServer::clear_lockmode() {
  lockmode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_lockmode() const {
  return lockmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::lockmode() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.LockMode)
  return _internal_lockmode();
}
inline void CfgServer::_internal_set_lockmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lockmode_ = value;
}
inline void CfgServer::set_lockmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lockmode(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.LockMode)
}

// int32 FPS = 19;
inline void CfgServer::clear_fps() {
  fps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_fps() const {
  return fps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::fps() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.FPS)
  return _internal_fps();
}
inline void CfgServer::_internal_set_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fps_ = value;
}
inline void CfgServer::set_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.FPS)
}

// int32 RoomReadyTimeout = 20;
inline void CfgServer::clear_roomreadytimeout() {
  roomreadytimeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_roomreadytimeout() const {
  return roomreadytimeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::roomreadytimeout() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.RoomReadyTimeout)
  return _internal_roomreadytimeout();
}
inline void CfgServer::_internal_set_roomreadytimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomreadytimeout_ = value;
}
inline void CfgServer::set_roomreadytimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomreadytimeout(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.RoomReadyTimeout)
}

// int32 Store = 21;
inline void CfgServer::clear_store() {
  store_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::_internal_store() const {
  return store_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgServer::store() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgServer.Store)
  return _internal_store();
}
inline void CfgServer::_internal_set_store(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  store_ = value;
}
inline void CfgServer::set_store(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_store(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgServer.Store)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CfgProtocolActions

// map<int32, .syncframe.CfgActions> client = 1;
inline int CfgProtocolActions::_internal_client_size() const {
  return client_.size();
}
inline int CfgProtocolActions::client_size() const {
  return _internal_client_size();
}
inline void CfgProtocolActions::clear_client() {
  client_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
CfgProtocolActions::_internal_client() const {
  return client_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
CfgProtocolActions::client() const {
  // @@protoc_insertion_point(field_map:syncframe.CfgProtocolActions.client)
  return _internal_client();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
CfgProtocolActions::_internal_mutable_client() {
  return client_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
CfgProtocolActions::mutable_client() {
  // @@protoc_insertion_point(field_mutable_map:syncframe.CfgProtocolActions.client)
  return _internal_mutable_client();
}

// map<int32, .syncframe.CfgActions> server = 2;
inline int CfgProtocolActions::_internal_server_size() const {
  return server_.size();
}
inline int CfgProtocolActions::server_size() const {
  return _internal_server_size();
}
inline void CfgProtocolActions::clear_server() {
  server_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
CfgProtocolActions::_internal_server() const {
  return server_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >&
CfgProtocolActions::server() const {
  // @@protoc_insertion_point(field_map:syncframe.CfgProtocolActions.server)
  return _internal_server();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
CfgProtocolActions::_internal_mutable_server() {
  return server_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >*
CfgProtocolActions::mutable_server() {
  // @@protoc_insertion_point(field_mutable_map:syncframe.CfgProtocolActions.server)
  return _internal_mutable_server();
}

// -------------------------------------------------------------------

// CfgActions

// int32 id = 1;
inline void CfgActions::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgActions::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgActions::id() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgActions.id)
  return _internal_id();
}
inline void CfgActions::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CfgActions::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:syncframe.CfgActions.id)
}

// string action = 2;
inline void CfgActions::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& CfgActions::action() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgActions.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgActions::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgActions.action)
}
inline std::string* CfgActions::mutable_action() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgActions.action)
  return _internal_mutable_action();
}
inline const std::string& CfgActions::_internal_action() const {
  return action_.Get();
}
inline void CfgActions::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgActions::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgActions::release_action() {
  // @@protoc_insertion_point(field_release:syncframe.CfgActions.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgActions::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgActions.action)
}

// string desc = 3;
inline void CfgActions::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& CfgActions::desc() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgActions.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgActions::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgActions.desc)
}
inline std::string* CfgActions::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgActions.desc)
  return _internal_mutable_desc();
}
inline const std::string& CfgActions::_internal_desc() const {
  return desc_.Get();
}
inline void CfgActions::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgActions::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgActions::release_desc() {
  // @@protoc_insertion_point(field_release:syncframe.CfgActions.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgActions::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgActions.desc)
}

// string demo = 4;
inline void CfgActions::clear_demo() {
  demo_.ClearToEmpty();
}
inline const std::string& CfgActions::demo() const {
  // @@protoc_insertion_point(field_get:syncframe.CfgActions.demo)
  return _internal_demo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CfgActions::set_demo(ArgT0&& arg0, ArgT... args) {
 
 demo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:syncframe.CfgActions.demo)
}
inline std::string* CfgActions::mutable_demo() {
  // @@protoc_insertion_point(field_mutable:syncframe.CfgActions.demo)
  return _internal_mutable_demo();
}
inline const std::string& CfgActions::_internal_demo() const {
  return demo_.Get();
}
inline void CfgActions::_internal_set_demo(const std::string& value) {
  
  demo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CfgActions::_internal_mutable_demo() {
  
  return demo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CfgActions::release_demo() {
  // @@protoc_insertion_point(field_release:syncframe.CfgActions.demo)
  return demo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CfgActions::set_allocated_demo(std::string* demo) {
  if (demo != nullptr) {
    
  } else {
    
  }
  demo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), demo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:syncframe.CfgActions.demo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace syncframe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
