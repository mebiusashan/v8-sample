// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace syncframe {
constexpr RequestLogin::RequestLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RequestLoginDefaultTypeInternal {
  constexpr RequestLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestLoginDefaultTypeInternal() {}
  union {
    RequestLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestLoginDefaultTypeInternal _RequestLogin_default_instance_;
constexpr RequestClientPong::RequestClientPong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : add_time_(int64_t{0})
  , client_receive_time_(int64_t{0})
  , server_response_time_(int64_t{0})
  , rtt_timeout_(int64_t{0})
  , rtt_times_(0){}
struct RequestClientPongDefaultTypeInternal {
  constexpr RequestClientPongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestClientPongDefaultTypeInternal() {}
  union {
    RequestClientPong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestClientPongDefaultTypeInternal _RequestClientPong_default_instance_;
constexpr RequestPlayerOperations::RequestPlayerOperations(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operations_()
  , room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , sequence_number_(0){}
struct RequestPlayerOperationsDefaultTypeInternal {
  constexpr RequestPlayerOperationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPlayerOperationsDefaultTypeInternal() {}
  union {
    RequestPlayerOperations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPlayerOperationsDefaultTypeInternal _RequestPlayerOperations_default_instance_;
constexpr Operation::Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , player_id_(0){}
struct OperationDefaultTypeInternal {
  constexpr OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationDefaultTypeInternal _Operation_default_instance_;
constexpr RequestClientPing::RequestClientPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : add_time_(int64_t{0})
  , client_receive_time_(int64_t{0})
  , server_response_time_(int64_t{0})
  , rtt_timeout_(int64_t{0})
  , rtt_times_(0){}
struct RequestClientPingDefaultTypeInternal {
  constexpr RequestClientPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestClientPingDefaultTypeInternal() {}
  union {
    RequestClientPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestClientPingDefaultTypeInternal _RequestClientPing_default_instance_;
constexpr RequestPlayerResumeGame::RequestPlayerResumeGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , sequence_number_(0){}
struct RequestPlayerResumeGameDefaultTypeInternal {
  constexpr RequestPlayerResumeGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPlayerResumeGameDefaultTypeInternal() {}
  union {
    RequestPlayerResumeGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPlayerResumeGameDefaultTypeInternal _RequestPlayerResumeGame_default_instance_;
constexpr RequestPlayerMatchSign::RequestPlayerMatchSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0){}
struct RequestPlayerMatchSignDefaultTypeInternal {
  constexpr RequestPlayerMatchSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPlayerMatchSignDefaultTypeInternal() {}
  union {
    RequestPlayerMatchSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPlayerMatchSignDefaultTypeInternal _RequestPlayerMatchSign_default_instance_;
constexpr RequestPlayerReady::RequestPlayerReady(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0){}
struct RequestPlayerReadyDefaultTypeInternal {
  constexpr RequestPlayerReadyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPlayerReadyDefaultTypeInternal() {}
  union {
    RequestPlayerReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPlayerReadyDefaultTypeInternal _RequestPlayerReady_default_instance_;
constexpr RequestGetRoom::RequestGetRoom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0){}
struct RequestGetRoomDefaultTypeInternal {
  constexpr RequestGetRoomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestGetRoomDefaultTypeInternal() {}
  union {
    RequestGetRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestGetRoomDefaultTypeInternal _RequestGetRoom_default_instance_;
constexpr RequestRoomHistory::RequestRoomHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , sequence_numberstart_(0)
  , sequence_numberend_(0){}
struct RequestRoomHistoryDefaultTypeInternal {
  constexpr RequestRoomHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestRoomHistoryDefaultTypeInternal() {}
  union {
    RequestRoomHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestRoomHistoryDefaultTypeInternal _RequestRoomHistory_default_instance_;
constexpr RequestPlayerMatchSignCancel::RequestPlayerMatchSignCancel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0){}
struct RequestPlayerMatchSignCancelDefaultTypeInternal {
  constexpr RequestPlayerMatchSignCancelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPlayerMatchSignCancelDefaultTypeInternal() {}
  union {
    RequestPlayerMatchSignCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPlayerMatchSignCancelDefaultTypeInternal _RequestPlayerMatchSignCancel_default_instance_;
constexpr RequestClientHeartbeat::RequestClientHeartbeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(int64_t{0}){}
struct RequestClientHeartbeatDefaultTypeInternal {
  constexpr RequestClientHeartbeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestClientHeartbeatDefaultTypeInternal() {}
  union {
    RequestClientHeartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestClientHeartbeatDefaultTypeInternal _RequestClientHeartbeat_default_instance_;
constexpr RequestGameOver::RequestGameOver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , sequence_number_(0){}
struct RequestGameOverDefaultTypeInternal {
  constexpr RequestGameOverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestGameOverDefaultTypeInternal() {}
  union {
    RequestGameOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestGameOverDefaultTypeInternal _RequestGameOver_default_instance_;
constexpr RequestPlayerOver::RequestPlayerOver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , sequence_number_(0){}
struct RequestPlayerOverDefaultTypeInternal {
  constexpr RequestPlayerOverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestPlayerOverDefaultTypeInternal() {}
  union {
    RequestPlayerOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPlayerOverDefaultTypeInternal _RequestPlayerOver_default_instance_;
constexpr ResponseLoginRes::ResponseLoginRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_(nullptr)
  , code_(0){}
struct ResponseLoginResDefaultTypeInternal {
  constexpr ResponseLoginResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseLoginResDefaultTypeInternal() {}
  union {
    ResponseLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseLoginResDefaultTypeInternal _ResponseLoginRes_default_instance_;
constexpr ResponsePlayerStatus::ResponsePlayerStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , status_(0)
  , add_time_(0)
  , up_time_(0){}
struct ResponsePlayerStatusDefaultTypeInternal {
  constexpr ResponsePlayerStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePlayerStatusDefaultTypeInternal() {}
  union {
    ResponsePlayerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePlayerStatusDefaultTypeInternal _ResponsePlayerStatus_default_instance_;
constexpr ResponseOtherPlayerOffline::ResponseOtherPlayerOffline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0){}
struct ResponseOtherPlayerOfflineDefaultTypeInternal {
  constexpr ResponseOtherPlayerOfflineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseOtherPlayerOfflineDefaultTypeInternal() {}
  union {
    ResponseOtherPlayerOffline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseOtherPlayerOfflineDefaultTypeInternal _ResponseOtherPlayerOffline_default_instance_;
constexpr ResponseKickOff::ResponseKickOff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(int64_t{0}){}
struct ResponseKickOffDefaultTypeInternal {
  constexpr ResponseKickOffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseKickOffDefaultTypeInternal() {}
  union {
    ResponseKickOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseKickOffDefaultTypeInternal _ResponseKickOff_default_instance_;
constexpr ResponseStartBattle::ResponseStartBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_number_start_(0){}
struct ResponseStartBattleDefaultTypeInternal {
  constexpr ResponseStartBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseStartBattleDefaultTypeInternal() {}
  union {
    ResponseStartBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseStartBattleDefaultTypeInternal _ResponseStartBattle_default_instance_;
constexpr ResponseServerPing::ResponseServerPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : add_time_(int64_t{0})
  , client_receive_time_(int64_t{0})
  , server_response_time_(int64_t{0})
  , rtt_timeout_(int64_t{0})
  , rtt_times_(0){}
struct ResponseServerPingDefaultTypeInternal {
  constexpr ResponseServerPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseServerPingDefaultTypeInternal() {}
  union {
    ResponseServerPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseServerPingDefaultTypeInternal _ResponseServerPing_default_instance_;
constexpr ResponseServerPong::ResponseServerPong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : add_time_(int64_t{0})
  , client_receive_time_(int64_t{0})
  , server_response_time_(int64_t{0})
  , rtt_timeout_(int64_t{0})
  , rtt_times_(0){}
struct ResponseServerPongDefaultTypeInternal {
  constexpr ResponseServerPongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseServerPongDefaultTypeInternal() {}
  union {
    ResponseServerPong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseServerPongDefaultTypeInternal _ResponseServerPong_default_instance_;
constexpr ResponseEnterBattle::ResponseEnterBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_list_()
  , room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rand_seek_(0)
  , sequence_number_(0)
  , status_(0)
  , add_time_(0)
  , time_(int64_t{0}){}
struct ResponseEnterBattleDefaultTypeInternal {
  constexpr ResponseEnterBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseEnterBattleDefaultTypeInternal() {}
  union {
    ResponseEnterBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseEnterBattleDefaultTypeInternal _ResponseEnterBattle_default_instance_;
constexpr ResponsePushLogicFrame::ResponsePushLogicFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operations_()
  , room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , sequence_number_(0){}
struct ResponsePushLogicFrameDefaultTypeInternal {
  constexpr ResponsePushLogicFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePushLogicFrameDefaultTypeInternal() {}
  union {
    ResponsePushLogicFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePushLogicFrameDefaultTypeInternal _ResponsePushLogicFrame_default_instance_;
constexpr ResponseOtherPlayerOver::ResponseOtherPlayerOver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , sequence_number_(0){}
struct ResponseOtherPlayerOverDefaultTypeInternal {
  constexpr ResponseOtherPlayerOverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseOtherPlayerOverDefaultTypeInternal() {}
  union {
    ResponseOtherPlayerOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseOtherPlayerOverDefaultTypeInternal _ResponseOtherPlayerOver_default_instance_;
constexpr ResponseGameOver::ResponseGameOver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , sequence_number_(0){}
struct ResponseGameOverDefaultTypeInternal {
  constexpr ResponseGameOverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseGameOverDefaultTypeInternal() {}
  union {
    ResponseGameOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseGameOverDefaultTypeInternal _ResponseGameOver_default_instance_;
constexpr ResponseReadyTimeout::ResponseReadyTimeout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResponseReadyTimeoutDefaultTypeInternal {
  constexpr ResponseReadyTimeoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseReadyTimeoutDefaultTypeInternal() {}
  union {
    ResponseReadyTimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseReadyTimeoutDefaultTypeInternal _ResponseReadyTimeout_default_instance_;
constexpr ResponsePushRoomInfo::ResponsePushRoomInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_list_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_time_(0)
  , status_(0)
  , timeout_(0)
  , sequence_number_(0)
  , rand_seek_(0)
  , start_time_(0)
  , end_time_(0){}
struct ResponsePushRoomInfoDefaultTypeInternal {
  constexpr ResponsePushRoomInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePushRoomInfoDefaultTypeInternal() {}
  union {
    ResponsePushRoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePushRoomInfoDefaultTypeInternal _ResponsePushRoomInfo_default_instance_;
constexpr ResponsePushRoomHistory::ResponsePushRoomHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct ResponsePushRoomHistoryDefaultTypeInternal {
  constexpr ResponsePushRoomHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePushRoomHistoryDefaultTypeInternal() {}
  union {
    ResponsePushRoomHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePushRoomHistoryDefaultTypeInternal _ResponsePushRoomHistory_default_instance_;
constexpr ResponseRoomHistory::ResponseRoomHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct ResponseRoomHistoryDefaultTypeInternal {
  constexpr ResponseRoomHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseRoomHistoryDefaultTypeInternal() {}
  union {
    ResponseRoomHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseRoomHistoryDefaultTypeInternal _ResponseRoomHistory_default_instance_;
constexpr ResponseOtherPlayerResumeGame::ResponseOtherPlayerResumeGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , sequence_number_(0){}
struct ResponseOtherPlayerResumeGameDefaultTypeInternal {
  constexpr ResponseOtherPlayerResumeGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseOtherPlayerResumeGameDefaultTypeInternal() {}
  union {
    ResponseOtherPlayerResumeGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseOtherPlayerResumeGameDefaultTypeInternal _ResponseOtherPlayerResumeGame_default_instance_;
constexpr Player::Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , role_id_(0)
  , status_(0)
  , add_time_(0)
  , uptime_(0)
  , upd_port_(0){}
struct PlayerDefaultTypeInternal {
  constexpr PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerDefaultTypeInternal _Player_default_instance_;
constexpr ResponseRestartGame::ResponseRestartGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_ids_()
  , _player_ids_cached_byte_size_()
  , room_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResponseRestartGameDefaultTypeInternal {
  constexpr ResponseRestartGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseRestartGameDefaultTypeInternal() {}
  union {
    ResponseRestartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseRestartGameDefaultTypeInternal _ResponseRestartGame_default_instance_;
constexpr ResponsePlayerMatchSignFailed::ResponsePlayerMatchSignFailed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , code_(0){}
struct ResponsePlayerMatchSignFailedDefaultTypeInternal {
  constexpr ResponsePlayerMatchSignFailedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePlayerMatchSignFailedDefaultTypeInternal() {}
  union {
    ResponsePlayerMatchSignFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePlayerMatchSignFailedDefaultTypeInternal _ResponsePlayerMatchSignFailed_default_instance_;
constexpr ResponsePlayerMatchingFailed::ResponsePlayerMatchingFailed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roomid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , code_(0){}
struct ResponsePlayerMatchingFailedDefaultTypeInternal {
  constexpr ResponsePlayerMatchingFailedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsePlayerMatchingFailedDefaultTypeInternal() {}
  union {
    ResponsePlayerMatchingFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePlayerMatchingFailedDefaultTypeInternal _ResponsePlayerMatchingFailed_default_instance_;
constexpr CfgServer::CfgServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : listenip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , outip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , udpport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wsuri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loginauthtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loginauthsecretkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(0)
  , contenttype_(0)
  , maxclientconnnum_(0)
  , msgcontentmax_(0)
  , iotimeout_(int64_t{0})
  , conntimeout_(0)
  , mapsize_(0)
  , roompeople_(0)
  , roomtimeout_(0)
  , offlinewaittime_(0)
  , lockmode_(0)
  , fps_(0)
  , roomreadytimeout_(0)
  , store_(0){}
struct CfgServerDefaultTypeInternal {
  constexpr CfgServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CfgServerDefaultTypeInternal() {}
  union {
    CfgServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CfgServerDefaultTypeInternal _CfgServer_default_instance_;
constexpr CfgProtocolActions_ClientEntry_DoNotUse::CfgProtocolActions_ClientEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CfgProtocolActions_ClientEntry_DoNotUseDefaultTypeInternal {
  constexpr CfgProtocolActions_ClientEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CfgProtocolActions_ClientEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CfgProtocolActions_ClientEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CfgProtocolActions_ClientEntry_DoNotUseDefaultTypeInternal _CfgProtocolActions_ClientEntry_DoNotUse_default_instance_;
constexpr CfgProtocolActions_ServerEntry_DoNotUse::CfgProtocolActions_ServerEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CfgProtocolActions_ServerEntry_DoNotUseDefaultTypeInternal {
  constexpr CfgProtocolActions_ServerEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CfgProtocolActions_ServerEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CfgProtocolActions_ServerEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CfgProtocolActions_ServerEntry_DoNotUseDefaultTypeInternal _CfgProtocolActions_ServerEntry_DoNotUse_default_instance_;
constexpr CfgProtocolActions::CfgProtocolActions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , server_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct CfgProtocolActionsDefaultTypeInternal {
  constexpr CfgProtocolActionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CfgProtocolActionsDefaultTypeInternal() {}
  union {
    CfgProtocolActions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CfgProtocolActionsDefaultTypeInternal _CfgProtocolActions_default_instance_;
constexpr CfgActions::CfgActions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , demo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct CfgActionsDefaultTypeInternal {
  constexpr CfgActionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CfgActionsDefaultTypeInternal() {}
  union {
    CfgActions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CfgActionsDefaultTypeInternal _CfgActions_default_instance_;
}  // namespace syncframe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[39];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestLogin, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPong, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPong, client_receive_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPong, server_response_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPong, rtt_timeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPong, rtt_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOperations, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOperations, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOperations, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOperations, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::Operation, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Operation, event_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Operation, value_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Operation, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPing, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPing, client_receive_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPing, server_response_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPing, rtt_timeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientPing, rtt_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerResumeGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerResumeGame, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerResumeGame, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerResumeGame, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerMatchSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerMatchSign, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerReady, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerReady, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGetRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGetRoom, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGetRoom, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestRoomHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestRoomHistory, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestRoomHistory, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestRoomHistory, sequence_numberstart_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestRoomHistory, sequence_numberend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerMatchSignCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerMatchSignCancel, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestClientHeartbeat, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGameOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGameOver, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGameOver, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGameOver, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestGameOver, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOver, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::RequestPlayerOver, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseLoginRes, code_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseLoginRes, errmsg_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseLoginRes, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerStatus, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerStatus, nickname_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerStatus, status_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerStatus, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerStatus, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerStatus, up_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerOffline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerOffline, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseKickOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseKickOff, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseStartBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseStartBattle, sequence_number_start_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPing, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPing, client_receive_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPing, server_response_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPing, rtt_timeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPing, rtt_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPong, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPong, client_receive_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPong, server_response_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPong, rtt_timeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseServerPong, rtt_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, rand_seek_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, status_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseEnterBattle, player_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushLogicFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushLogicFrame, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushLogicFrame, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushLogicFrame, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushLogicFrame, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerOver, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerOver, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseGameOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseGameOver, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseGameOver, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseGameOver, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseGameOver, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseReadyTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseReadyTimeout, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, status_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, timeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, rand_seek_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, player_list_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomInfo, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePushRoomHistory, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseRoomHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseRoomHistory, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseRoomHistory, action_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseRoomHistory, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerResumeGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerResumeGame, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerResumeGame, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseOtherPlayerResumeGame, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, role_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, nickname_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, status_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, add_time_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, uptime_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, upd_port_),
  PROTOBUF_FIELD_OFFSET(::syncframe::Player, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseRestartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseRestartGame, room_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponseRestartGame, player_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchSignFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchSignFailed, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchSignFailed, msg_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchSignFailed, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchingFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchingFailed, player_id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchingFailed, msg_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchingFailed, roomid_),
  PROTOBUF_FIELD_OFFSET(::syncframe::ResponsePlayerMatchingFailed, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, listenip_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, outip_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, port_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, udpport_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, protocol_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, wsuri_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, contenttype_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, loginauthtype_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, loginauthsecretkey_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, maxclientconnnum_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, msgcontentmax_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, iotimeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, conntimeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, mapsize_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, roompeople_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, roomtimeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, offlinewaittime_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, lockmode_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, fps_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, roomreadytimeout_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgServer, store_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ClientEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ClientEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ClientEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ClientEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ServerEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ServerEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ServerEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions_ServerEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions, client_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgProtocolActions, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgActions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgActions, id_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgActions, action_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgActions, desc_),
  PROTOBUF_FIELD_OFFSET(::syncframe::CfgActions, demo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::syncframe::RequestLogin)},
  { 6, -1, sizeof(::syncframe::RequestClientPong)},
  { 16, -1, sizeof(::syncframe::RequestPlayerOperations)},
  { 25, -1, sizeof(::syncframe::Operation)},
  { 34, -1, sizeof(::syncframe::RequestClientPing)},
  { 44, -1, sizeof(::syncframe::RequestPlayerResumeGame)},
  { 52, -1, sizeof(::syncframe::RequestPlayerMatchSign)},
  { 58, -1, sizeof(::syncframe::RequestPlayerReady)},
  { 65, -1, sizeof(::syncframe::RequestGetRoom)},
  { 72, -1, sizeof(::syncframe::RequestRoomHistory)},
  { 81, -1, sizeof(::syncframe::RequestPlayerMatchSignCancel)},
  { 87, -1, sizeof(::syncframe::RequestClientHeartbeat)},
  { 93, -1, sizeof(::syncframe::RequestGameOver)},
  { 102, -1, sizeof(::syncframe::RequestPlayerOver)},
  { 109, -1, sizeof(::syncframe::ResponseLoginRes)},
  { 117, -1, sizeof(::syncframe::ResponsePlayerStatus)},
  { 128, -1, sizeof(::syncframe::ResponseOtherPlayerOffline)},
  { 134, -1, sizeof(::syncframe::ResponseKickOff)},
  { 140, -1, sizeof(::syncframe::ResponseStartBattle)},
  { 146, -1, sizeof(::syncframe::ResponseServerPing)},
  { 156, -1, sizeof(::syncframe::ResponseServerPong)},
  { 166, -1, sizeof(::syncframe::ResponseEnterBattle)},
  { 178, -1, sizeof(::syncframe::ResponsePushLogicFrame)},
  { 187, -1, sizeof(::syncframe::ResponseOtherPlayerOver)},
  { 194, -1, sizeof(::syncframe::ResponseGameOver)},
  { 203, -1, sizeof(::syncframe::ResponseReadyTimeout)},
  { 209, -1, sizeof(::syncframe::ResponsePushRoomInfo)},
  { 224, -1, sizeof(::syncframe::ResponsePushRoomHistory)},
  { 230, -1, sizeof(::syncframe::ResponseRoomHistory)},
  { 238, -1, sizeof(::syncframe::ResponseOtherPlayerResumeGame)},
  { 246, -1, sizeof(::syncframe::Player)},
  { 260, -1, sizeof(::syncframe::ResponseRestartGame)},
  { 267, -1, sizeof(::syncframe::ResponsePlayerMatchSignFailed)},
  { 275, -1, sizeof(::syncframe::ResponsePlayerMatchingFailed)},
  { 284, -1, sizeof(::syncframe::CfgServer)},
  { 310, 317, sizeof(::syncframe::CfgProtocolActions_ClientEntry_DoNotUse)},
  { 319, 326, sizeof(::syncframe::CfgProtocolActions_ServerEntry_DoNotUse)},
  { 328, -1, sizeof(::syncframe::CfgProtocolActions)},
  { 335, -1, sizeof(::syncframe::CfgActions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestClientPong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestPlayerOperations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestClientPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestPlayerResumeGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestPlayerMatchSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestPlayerReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestGetRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestRoomHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestPlayerMatchSignCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestClientHeartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestGameOver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_RequestPlayerOver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseLoginRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponsePlayerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseOtherPlayerOffline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseKickOff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseStartBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseServerPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseServerPong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseEnterBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponsePushLogicFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseOtherPlayerOver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseGameOver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseReadyTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponsePushRoomInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponsePushRoomHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseRoomHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseOtherPlayerResumeGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponseRestartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponsePlayerMatchSignFailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_ResponsePlayerMatchingFailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_CfgServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_CfgProtocolActions_ClientEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_CfgProtocolActions_ServerEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_CfgProtocolActions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syncframe::_CfgActions_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\tsyncframe\"\035\n\014RequestLog"
  "in\022\r\n\005token\030\001 \001(\t\"\210\001\n\021RequestClientPong\022"
  "\020\n\010add_time\030\001 \001(\003\022\033\n\023client_receive_time"
  "\030\002 \001(\003\022\034\n\024server_response_time\030\003 \001(\003\022\023\n\013"
  "rtt_timeout\030\004 \001(\003\022\021\n\trtt_times\030\005 \001(\005\"y\n\027"
  "RequestPlayerOperations\022\n\n\002id\030\001 \001(\005\022\017\n\007r"
  "oom_id\030\002 \001(\t\022\027\n\017sequence_number\030\003 \001(\005\022(\n"
  "\noperations\030\004 \003(\0132\024.syncframe.Operation\""
  "H\n\tOperation\022\n\n\002id\030\001 \001(\005\022\r\n\005event\030\002 \001(\t\022"
  "\r\n\005value\030\003 \001(\t\022\021\n\tplayer_id\030\004 \001(\005\"\210\001\n\021Re"
  "questClientPing\022\020\n\010add_time\030\001 \001(\003\022\033\n\023cli"
  "ent_receive_time\030\002 \001(\003\022\034\n\024server_respons"
  "e_time\030\003 \001(\003\022\023\n\013rtt_timeout\030\004 \001(\003\022\021\n\trtt"
  "_times\030\005 \001(\005\"V\n\027RequestPlayerResumeGame\022"
  "\021\n\tplayer_id\030\001 \001(\005\022\017\n\007room_id\030\002 \001(\t\022\027\n\017s"
  "equence_number\030\003 \001(\005\"+\n\026RequestPlayerMat"
  "chSign\022\021\n\tplayer_id\030\001 \001(\005\"8\n\022RequestPlay"
  "erReady\022\021\n\tplayer_id\030\001 \001(\005\022\017\n\007room_id\030\002 "
  "\001(\t\"4\n\016RequestGetRoom\022\021\n\tplayer_id\030\001 \001(\005"
  "\022\017\n\007room_id\030\002 \001(\t\"r\n\022RequestRoomHistory\022"
  "\021\n\tplayer_id\030\001 \001(\005\022\017\n\007room_id\030\002 \001(\t\022\034\n\024s"
  "equence_numberStart\030\003 \001(\005\022\032\n\022sequence_nu"
  "mberEnd\030\004 \001(\005\"1\n\034RequestPlayerMatchSignC"
  "ancel\022\021\n\tplayer_id\030\001 \001(\005\"&\n\026RequestClien"
  "tHeartbeat\022\014\n\004time\030\001 \001(\003\"^\n\017RequestGameO"
  "ver\022\021\n\tplayer_id\030\001 \001(\005\022\017\n\007room_id\030\002 \001(\t\022"
  "\027\n\017sequence_number\030\003 \001(\005\022\016\n\006result\030\004 \001(\t"
  "\"\?\n\021RequestPlayerOver\022\021\n\tplayer_id\030\001 \001(\005"
  "\022\027\n\017sequence_number\030\002 \001(\005\"S\n\020ResponseLog"
  "inRes\022\014\n\004code\030\001 \001(\005\022\016\n\006errMsg\030\002 \001(\t\022!\n\006p"
  "layer\030\003 \001(\0132\021.syncframe.Player\"x\n\024Respon"
  "sePlayerStatus\022\n\n\002id\030\001 \001(\005\022\020\n\010nickname\030\002"
  " \001(\t\022\016\n\006status\030\003 \001(\005\022\017\n\007room_id\030\004 \001(\t\022\020\n"
  "\010add_time\030\005 \001(\005\022\017\n\007up_time\030\006 \001(\005\"/\n\032Resp"
  "onseOtherPlayerOffline\022\021\n\tplayer_id\030\001 \001("
  "\005\"\037\n\017ResponseKickOff\022\014\n\004time\030\001 \001(\003\"4\n\023Re"
  "sponseStartBattle\022\035\n\025sequence_number_sta"
  "rt\030\001 \001(\005\"\211\001\n\022ResponseServerPing\022\020\n\010add_t"
  "ime\030\001 \001(\003\022\033\n\023client_receive_time\030\002 \001(\003\022\034"
  "\n\024server_response_time\030\003 \001(\003\022\023\n\013rtt_time"
  "out\030\004 \001(\003\022\021\n\trtt_times\030\005 \001(\005\"\211\001\n\022Respons"
  "eServerPong\022\020\n\010add_time\030\001 \001(\003\022\033\n\023client_"
  "receive_time\030\002 \001(\003\022\034\n\024server_response_ti"
  "me\030\003 \001(\003\022\023\n\013rtt_timeout\030\004 \001(\003\022\021\n\trtt_tim"
  "es\030\005 \001(\005\"\252\001\n\023ResponseEnterBattle\022\021\n\trand"
  "_seek\030\001 \001(\005\022\017\n\007room_id\030\002 \001(\t\022\027\n\017sequence"
  "_number\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\022\020\n\010add_tim"
  "e\030\005 \001(\005\022\014\n\004time\030\006 \001(\003\022&\n\013player_list\030\007 \003"
  "(\0132\021.syncframe.Player\"x\n\026ResponsePushLog"
  "icFrame\022\n\n\002id\030\001 \001(\005\022\017\n\007room_id\030\002 \001(\t\022\027\n\017"
  "sequence_number\030\003 \001(\005\022(\n\noperations\030\004 \003("
  "\0132\024.syncframe.Operation\"E\n\027ResponseOther"
  "PlayerOver\022\021\n\tplayer_id\030\001 \001(\005\022\027\n\017sequenc"
  "e_number\030\002 \001(\005\"_\n\020ResponseGameOver\022\021\n\tpl"
  "ayer_id\030\001 \001(\005\022\017\n\007room_id\030\002 \001(\t\022\027\n\017sequen"
  "ce_number\030\003 \001(\005\022\016\n\006result\030\004 \001(\t\"\'\n\024Respo"
  "nseReadyTimeout\022\017\n\007room_id\030\001 \001(\t\"\340\001\n\024Res"
  "ponsePushRoomInfo\022\n\n\002id\030\001 \001(\t\022\020\n\010add_tim"
  "e\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\022\017\n\007timeout\030\004 \001(\005"
  "\022\027\n\017sequence_number\030\005 \001(\005\022\021\n\trand_seek\030\006"
  " \001(\005\022&\n\013player_list\030\007 \003(\0132\021.syncframe.Pl"
  "ayer\022\017\n\007room_id\030\010 \001(\t\022\022\n\nstart_time\030\t \001("
  "\005\022\020\n\010end_time\030\n \001(\005\"G\n\027ResponsePushRoomH"
  "istory\022,\n\004list\030\001 \003(\0132\036.syncframe.Respons"
  "eRoomHistory\"B\n\023ResponseRoomHistory\022\n\n\002i"
  "d\030\001 \001(\005\022\016\n\006action\030\002 \001(\t\022\017\n\007content\030\003 \001(\t"
  "\"\\\n\035ResponseOtherPlayerResumeGame\022\021\n\tpla"
  "yer_id\030\001 \001(\005\022\017\n\007room_id\030\002 \001(\t\022\027\n\017sequenc"
  "e_number\030\003 \001(\005\"\230\001\n\006Player\022\n\n\002id\030\001 \001(\005\022\017\n"
  "\007role_id\030\002 \001(\005\022\020\n\010nickname\030\003 \001(\t\022\016\n\006stat"
  "us\030\004 \001(\005\022\020\n\010add_time\030\005 \001(\005\022\016\n\006upTime\030\006 \001"
  "(\005\022\017\n\007room_id\030\007 \001(\t\022\020\n\010upd_port\030\010 \001(\005\022\n\n"
  "\002ip\030\t \001(\t\":\n\023ResponseRestartGame\022\017\n\007room"
  "_id\030\001 \001(\t\022\022\n\nplayer_ids\030\002 \003(\005\"M\n\035Respons"
  "ePlayerMatchSignFailed\022\021\n\tplayer_id\030\001 \001("
  "\005\022\013\n\003msg\030\002 \001(\t\022\014\n\004code\030\003 \001(\005\"\\\n\034Response"
  "PlayerMatchingFailed\022\021\n\tplayer_id\030\001 \001(\005\022"
  "\013\n\003msg\030\002 \001(\t\022\016\n\006roomId\030\003 \001(\t\022\014\n\004code\030\004 \001"
  "(\005\"\250\003\n\tCfgServer\022\020\n\010ListenIp\030\001 \001(\t\022\r\n\005Ou"
  "tIp\030\002 \001(\t\022\014\n\004Port\030\003 \001(\t\022\017\n\007UdpPort\030\004 \001(\t"
  "\022\020\n\010Protocol\030\005 \001(\005\022\r\n\005WsUri\030\006 \001(\t\022\023\n\013Con"
  "tentType\030\007 \001(\005\022\025\n\rLoginAuthType\030\010 \001(\t\022\032\n"
  "\022LoginAuthSecretKey\030\t \001(\t\022\030\n\020MaxClientCo"
  "nnNum\030\n \001(\005\022\025\n\rMsgContentMax\030\013 \001(\005\022\021\n\tIO"
  "Timeout\030\014 \001(\003\022\023\n\013ConnTimeout\030\r \001(\005\022\017\n\007Ma"
  "pSize\030\016 \001(\005\022\022\n\nRoomPeople\030\017 \001(\005\022\023\n\013RoomT"
  "imeout\030\020 \001(\005\022\027\n\017OffLineWaitTime\030\021 \001(\005\022\020\n"
  "\010LockMode\030\022 \001(\005\022\013\n\003FPS\030\023 \001(\005\022\030\n\020RoomRead"
  "yTimeout\030\024 \001(\005\022\r\n\005Store\030\025 \001(\005\"\226\002\n\022CfgPro"
  "tocolActions\0229\n\006client\030\001 \003(\0132).syncframe"
  ".CfgProtocolActions.ClientEntry\0229\n\006serve"
  "r\030\002 \003(\0132).syncframe.CfgProtocolActions.S"
  "erverEntry\032D\n\013ClientEntry\022\013\n\003key\030\001 \001(\005\022$"
  "\n\005value\030\002 \001(\0132\025.syncframe.CfgActions:\0028\001"
  "\032D\n\013ServerEntry\022\013\n\003key\030\001 \001(\005\022$\n\005value\030\002 "
  "\001(\0132\025.syncframe.CfgActions:\0028\001\"D\n\nCfgAct"
  "ions\022\n\n\002id\030\001 \001(\005\022\016\n\006action\030\002 \001(\t\022\014\n\004desc"
  "\030\003 \001(\t\022\014\n\004demo\030\004 \001(\tB\014Z\n./;myprotob\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 3922, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 39,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace syncframe {

// ===================================================================

class RequestLogin::_Internal {
 public:
};

RequestLogin::RequestLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestLogin)
}
RequestLogin::RequestLogin(const RequestLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestLogin)
}

void RequestLogin::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestLogin::~RequestLogin() {
  // @@protoc_insertion_point(destructor:syncframe.RequestLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestLogin::ArenaDtor(void* object) {
  RequestLogin* _this = reinterpret_cast< RequestLogin* >(object);
  (void)_this;
}
void RequestLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestLogin.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestLogin.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestLogin)
  return target;
}

size_t RequestLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestLogin)
    MergeFrom(*source);
  }
}

void RequestLogin::MergeFrom(const RequestLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.token().empty()) {
    _internal_set_token(from._internal_token());
  }
}

void RequestLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLogin::CopyFrom(const RequestLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLogin::IsInitialized() const {
  return true;
}

void RequestLogin::InternalSwap(RequestLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class RequestClientPong::_Internal {
 public:
};

RequestClientPong::RequestClientPong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestClientPong)
}
RequestClientPong::RequestClientPong(const RequestClientPong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add_time_, &from.add_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestClientPong)
}

void RequestClientPong::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
}

RequestClientPong::~RequestClientPong() {
  // @@protoc_insertion_point(destructor:syncframe.RequestClientPong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestClientPong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestClientPong::ArenaDtor(void* object) {
  RequestClientPong* _this = reinterpret_cast< RequestClientPong* >(object);
  (void)_this;
}
void RequestClientPong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestClientPong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestClientPong::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestClientPong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtt_times_) -
      reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestClientPong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 add_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_receive_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_receive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 server_response_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_response_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rtt_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rtt_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rtt_times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rtt_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestClientPong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestClientPong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_add_time(), target);
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_client_receive_time(), target);
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_server_response_time(), target);
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_rtt_timeout(), target);
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rtt_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestClientPong)
  return target;
}

size_t RequestClientPong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestClientPong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_time());
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_client_receive_time());
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_response_time());
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rtt_timeout());
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rtt_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestClientPong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestClientPong)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestClientPong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestClientPong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestClientPong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestClientPong)
    MergeFrom(*source);
  }
}

void RequestClientPong::MergeFrom(const RequestClientPong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestClientPong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.client_receive_time() != 0) {
    _internal_set_client_receive_time(from._internal_client_receive_time());
  }
  if (from.server_response_time() != 0) {
    _internal_set_server_response_time(from._internal_server_response_time());
  }
  if (from.rtt_timeout() != 0) {
    _internal_set_rtt_timeout(from._internal_rtt_timeout());
  }
  if (from.rtt_times() != 0) {
    _internal_set_rtt_times(from._internal_rtt_times());
  }
}

void RequestClientPong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestClientPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestClientPong::CopyFrom(const RequestClientPong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestClientPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestClientPong::IsInitialized() const {
  return true;
}

void RequestClientPong::InternalSwap(RequestClientPong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestClientPong, rtt_times_)
      + sizeof(RequestClientPong::rtt_times_)
      - PROTOBUF_FIELD_OFFSET(RequestClientPong, add_time_)>(
          reinterpret_cast<char*>(&add_time_),
          reinterpret_cast<char*>(&other->add_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestClientPong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class RequestPlayerOperations::_Internal {
 public:
};

RequestPlayerOperations::RequestPlayerOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  operations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestPlayerOperations)
}
RequestPlayerOperations::RequestPlayerOperations(const RequestPlayerOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestPlayerOperations)
}

void RequestPlayerOperations::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sequence_number_));
}

RequestPlayerOperations::~RequestPlayerOperations() {
  // @@protoc_insertion_point(destructor:syncframe.RequestPlayerOperations)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestPlayerOperations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestPlayerOperations::ArenaDtor(void* object) {
  RequestPlayerOperations* _this = reinterpret_cast< RequestPlayerOperations* >(object);
  (void)_this;
}
void RequestPlayerOperations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPlayerOperations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPlayerOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestPlayerOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  room_id_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPlayerOperations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestPlayerOperations.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .syncframe.Operation operations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPlayerOperations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestPlayerOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestPlayerOperations.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // repeated .syncframe.Operation operations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestPlayerOperations)
  return target;
}

size_t RequestPlayerOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestPlayerOperations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .syncframe.Operation operations = 4;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlayerOperations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestPlayerOperations)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlayerOperations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPlayerOperations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestPlayerOperations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestPlayerOperations)
    MergeFrom(*source);
  }
}

void RequestPlayerOperations::MergeFrom(const RequestPlayerOperations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestPlayerOperations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void RequestPlayerOperations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestPlayerOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlayerOperations::CopyFrom(const RequestPlayerOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestPlayerOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlayerOperations::IsInitialized() const {
  return true;
}

void RequestPlayerOperations::InternalSwap(RequestPlayerOperations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operations_.InternalSwap(&other->operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestPlayerOperations, sequence_number_)
      + sizeof(RequestPlayerOperations::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(RequestPlayerOperations, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPlayerOperations::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class Operation::_Internal {
 public:
};

Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event().empty()) {
    event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:syncframe.Operation)
}

void Operation::SharedCtor() {
event_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(player_id_));
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:syncframe.Operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_event();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.Operation.event"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.Operation.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string event = 2;
  if (!this->event().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event().data(), static_cast<int>(this->_internal_event().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.Operation.event");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event(), target);
  }

  // string value = 3;
  if (!this->value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.Operation.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // int32 player_id = 4;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event = 2;
  if (!this->event().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event());
  }

  // string value = 3;
  if (!this->value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 player_id = 4;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.event().empty()) {
    _internal_set_event(from._internal_event());
  }
  if (!from.value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_, GetArenaForAllocation(),
      &other->event_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, player_id_)
      + sizeof(Operation::player_id_)
      - PROTOBUF_FIELD_OFFSET(Operation, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class RequestClientPing::_Internal {
 public:
};

RequestClientPing::RequestClientPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestClientPing)
}
RequestClientPing::RequestClientPing(const RequestClientPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add_time_, &from.add_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestClientPing)
}

void RequestClientPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
}

RequestClientPing::~RequestClientPing() {
  // @@protoc_insertion_point(destructor:syncframe.RequestClientPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestClientPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestClientPing::ArenaDtor(void* object) {
  RequestClientPing* _this = reinterpret_cast< RequestClientPing* >(object);
  (void)_this;
}
void RequestClientPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestClientPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestClientPing::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestClientPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtt_times_) -
      reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestClientPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 add_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_receive_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_receive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 server_response_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_response_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rtt_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rtt_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rtt_times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rtt_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestClientPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestClientPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_add_time(), target);
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_client_receive_time(), target);
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_server_response_time(), target);
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_rtt_timeout(), target);
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rtt_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestClientPing)
  return target;
}

size_t RequestClientPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestClientPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_time());
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_client_receive_time());
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_response_time());
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rtt_timeout());
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rtt_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestClientPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestClientPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestClientPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestClientPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestClientPing)
    MergeFrom(*source);
  }
}

void RequestClientPing::MergeFrom(const RequestClientPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.client_receive_time() != 0) {
    _internal_set_client_receive_time(from._internal_client_receive_time());
  }
  if (from.server_response_time() != 0) {
    _internal_set_server_response_time(from._internal_server_response_time());
  }
  if (from.rtt_timeout() != 0) {
    _internal_set_rtt_timeout(from._internal_rtt_timeout());
  }
  if (from.rtt_times() != 0) {
    _internal_set_rtt_times(from._internal_rtt_times());
  }
}

void RequestClientPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestClientPing::CopyFrom(const RequestClientPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestClientPing::IsInitialized() const {
  return true;
}

void RequestClientPing::InternalSwap(RequestClientPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestClientPing, rtt_times_)
      + sizeof(RequestClientPing::rtt_times_)
      - PROTOBUF_FIELD_OFFSET(RequestClientPing, add_time_)>(
          reinterpret_cast<char*>(&add_time_),
          reinterpret_cast<char*>(&other->add_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestClientPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class RequestPlayerResumeGame::_Internal {
 public:
};

RequestPlayerResumeGame::RequestPlayerResumeGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestPlayerResumeGame)
}
RequestPlayerResumeGame::RequestPlayerResumeGame(const RequestPlayerResumeGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestPlayerResumeGame)
}

void RequestPlayerResumeGame::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
}

RequestPlayerResumeGame::~RequestPlayerResumeGame() {
  // @@protoc_insertion_point(destructor:syncframe.RequestPlayerResumeGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestPlayerResumeGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestPlayerResumeGame::ArenaDtor(void* object) {
  RequestPlayerResumeGame* _this = reinterpret_cast< RequestPlayerResumeGame* >(object);
  (void)_this;
}
void RequestPlayerResumeGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPlayerResumeGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPlayerResumeGame::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestPlayerResumeGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPlayerResumeGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestPlayerResumeGame.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPlayerResumeGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestPlayerResumeGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestPlayerResumeGame.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestPlayerResumeGame)
  return target;
}

size_t RequestPlayerResumeGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestPlayerResumeGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlayerResumeGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestPlayerResumeGame)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlayerResumeGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPlayerResumeGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestPlayerResumeGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestPlayerResumeGame)
    MergeFrom(*source);
  }
}

void RequestPlayerResumeGame::MergeFrom(const RequestPlayerResumeGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestPlayerResumeGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void RequestPlayerResumeGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestPlayerResumeGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlayerResumeGame::CopyFrom(const RequestPlayerResumeGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestPlayerResumeGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlayerResumeGame::IsInitialized() const {
  return true;
}

void RequestPlayerResumeGame::InternalSwap(RequestPlayerResumeGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestPlayerResumeGame, sequence_number_)
      + sizeof(RequestPlayerResumeGame::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(RequestPlayerResumeGame, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPlayerResumeGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

class RequestPlayerMatchSign::_Internal {
 public:
};

RequestPlayerMatchSign::RequestPlayerMatchSign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestPlayerMatchSign)
}
RequestPlayerMatchSign::RequestPlayerMatchSign(const RequestPlayerMatchSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestPlayerMatchSign)
}

void RequestPlayerMatchSign::SharedCtor() {
player_id_ = 0;
}

RequestPlayerMatchSign::~RequestPlayerMatchSign() {
  // @@protoc_insertion_point(destructor:syncframe.RequestPlayerMatchSign)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestPlayerMatchSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestPlayerMatchSign::ArenaDtor(void* object) {
  RequestPlayerMatchSign* _this = reinterpret_cast< RequestPlayerMatchSign* >(object);
  (void)_this;
}
void RequestPlayerMatchSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPlayerMatchSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPlayerMatchSign::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestPlayerMatchSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPlayerMatchSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPlayerMatchSign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestPlayerMatchSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestPlayerMatchSign)
  return target;
}

size_t RequestPlayerMatchSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestPlayerMatchSign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlayerMatchSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestPlayerMatchSign)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlayerMatchSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPlayerMatchSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestPlayerMatchSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestPlayerMatchSign)
    MergeFrom(*source);
  }
}

void RequestPlayerMatchSign::MergeFrom(const RequestPlayerMatchSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestPlayerMatchSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void RequestPlayerMatchSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestPlayerMatchSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlayerMatchSign::CopyFrom(const RequestPlayerMatchSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestPlayerMatchSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlayerMatchSign::IsInitialized() const {
  return true;
}

void RequestPlayerMatchSign::InternalSwap(RequestPlayerMatchSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPlayerMatchSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[6]);
}

// ===================================================================

class RequestPlayerReady::_Internal {
 public:
};

RequestPlayerReady::RequestPlayerReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestPlayerReady)
}
RequestPlayerReady::RequestPlayerReady(const RequestPlayerReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestPlayerReady)
}

void RequestPlayerReady::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = 0;
}

RequestPlayerReady::~RequestPlayerReady() {
  // @@protoc_insertion_point(destructor:syncframe.RequestPlayerReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestPlayerReady::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestPlayerReady::ArenaDtor(void* object) {
  RequestPlayerReady* _this = reinterpret_cast< RequestPlayerReady* >(object);
  (void)_this;
}
void RequestPlayerReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPlayerReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPlayerReady::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestPlayerReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPlayerReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestPlayerReady.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPlayerReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestPlayerReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestPlayerReady.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestPlayerReady)
  return target;
}

size_t RequestPlayerReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestPlayerReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlayerReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestPlayerReady)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlayerReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPlayerReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestPlayerReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestPlayerReady)
    MergeFrom(*source);
  }
}

void RequestPlayerReady::MergeFrom(const RequestPlayerReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestPlayerReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void RequestPlayerReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestPlayerReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlayerReady::CopyFrom(const RequestPlayerReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestPlayerReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlayerReady::IsInitialized() const {
  return true;
}

void RequestPlayerReady::InternalSwap(RequestPlayerReady* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPlayerReady::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[7]);
}

// ===================================================================

class RequestGetRoom::_Internal {
 public:
};

RequestGetRoom::RequestGetRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestGetRoom)
}
RequestGetRoom::RequestGetRoom(const RequestGetRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestGetRoom)
}

void RequestGetRoom::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = 0;
}

RequestGetRoom::~RequestGetRoom() {
  // @@protoc_insertion_point(destructor:syncframe.RequestGetRoom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestGetRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestGetRoom::ArenaDtor(void* object) {
  RequestGetRoom* _this = reinterpret_cast< RequestGetRoom* >(object);
  (void)_this;
}
void RequestGetRoom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestGetRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestGetRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestGetRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestGetRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestGetRoom.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestGetRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestGetRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestGetRoom.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestGetRoom)
  return target;
}

size_t RequestGetRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestGetRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGetRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestGetRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGetRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestGetRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestGetRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestGetRoom)
    MergeFrom(*source);
  }
}

void RequestGetRoom::MergeFrom(const RequestGetRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestGetRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void RequestGetRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestGetRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetRoom::CopyFrom(const RequestGetRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestGetRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetRoom::IsInitialized() const {
  return true;
}

void RequestGetRoom::InternalSwap(RequestGetRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestGetRoom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[8]);
}

// ===================================================================

class RequestRoomHistory::_Internal {
 public:
};

RequestRoomHistory::RequestRoomHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestRoomHistory)
}
RequestRoomHistory::RequestRoomHistory(const RequestRoomHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_numberend_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_numberend_));
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestRoomHistory)
}

void RequestRoomHistory::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_numberend_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_numberend_));
}

RequestRoomHistory::~RequestRoomHistory() {
  // @@protoc_insertion_point(destructor:syncframe.RequestRoomHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestRoomHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestRoomHistory::ArenaDtor(void* object) {
  RequestRoomHistory* _this = reinterpret_cast< RequestRoomHistory* >(object);
  (void)_this;
}
void RequestRoomHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestRoomHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestRoomHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestRoomHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_numberend_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_numberend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestRoomHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestRoomHistory.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_numberStart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_numberstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_numberEnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_numberend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestRoomHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestRoomHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestRoomHistory.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_numberStart = 3;
  if (this->sequence_numberstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_numberstart(), target);
  }

  // int32 sequence_numberEnd = 4;
  if (this->sequence_numberend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence_numberend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestRoomHistory)
  return target;
}

size_t RequestRoomHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestRoomHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 sequence_numberStart = 3;
  if (this->sequence_numberstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_numberstart());
  }

  // int32 sequence_numberEnd = 4;
  if (this->sequence_numberend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_numberend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRoomHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestRoomHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRoomHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestRoomHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestRoomHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestRoomHistory)
    MergeFrom(*source);
  }
}

void RequestRoomHistory::MergeFrom(const RequestRoomHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestRoomHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.sequence_numberstart() != 0) {
    _internal_set_sequence_numberstart(from._internal_sequence_numberstart());
  }
  if (from.sequence_numberend() != 0) {
    _internal_set_sequence_numberend(from._internal_sequence_numberend());
  }
}

void RequestRoomHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestRoomHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRoomHistory::CopyFrom(const RequestRoomHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestRoomHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRoomHistory::IsInitialized() const {
  return true;
}

void RequestRoomHistory::InternalSwap(RequestRoomHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestRoomHistory, sequence_numberend_)
      + sizeof(RequestRoomHistory::sequence_numberend_)
      - PROTOBUF_FIELD_OFFSET(RequestRoomHistory, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestRoomHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[9]);
}

// ===================================================================

class RequestPlayerMatchSignCancel::_Internal {
 public:
};

RequestPlayerMatchSignCancel::RequestPlayerMatchSignCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestPlayerMatchSignCancel)
}
RequestPlayerMatchSignCancel::RequestPlayerMatchSignCancel(const RequestPlayerMatchSignCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestPlayerMatchSignCancel)
}

void RequestPlayerMatchSignCancel::SharedCtor() {
player_id_ = 0;
}

RequestPlayerMatchSignCancel::~RequestPlayerMatchSignCancel() {
  // @@protoc_insertion_point(destructor:syncframe.RequestPlayerMatchSignCancel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestPlayerMatchSignCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestPlayerMatchSignCancel::ArenaDtor(void* object) {
  RequestPlayerMatchSignCancel* _this = reinterpret_cast< RequestPlayerMatchSignCancel* >(object);
  (void)_this;
}
void RequestPlayerMatchSignCancel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPlayerMatchSignCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPlayerMatchSignCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestPlayerMatchSignCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPlayerMatchSignCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPlayerMatchSignCancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestPlayerMatchSignCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestPlayerMatchSignCancel)
  return target;
}

size_t RequestPlayerMatchSignCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestPlayerMatchSignCancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlayerMatchSignCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestPlayerMatchSignCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlayerMatchSignCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPlayerMatchSignCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestPlayerMatchSignCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestPlayerMatchSignCancel)
    MergeFrom(*source);
  }
}

void RequestPlayerMatchSignCancel::MergeFrom(const RequestPlayerMatchSignCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestPlayerMatchSignCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void RequestPlayerMatchSignCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestPlayerMatchSignCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlayerMatchSignCancel::CopyFrom(const RequestPlayerMatchSignCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestPlayerMatchSignCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlayerMatchSignCancel::IsInitialized() const {
  return true;
}

void RequestPlayerMatchSignCancel::InternalSwap(RequestPlayerMatchSignCancel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPlayerMatchSignCancel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[10]);
}

// ===================================================================

class RequestClientHeartbeat::_Internal {
 public:
};

RequestClientHeartbeat::RequestClientHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestClientHeartbeat)
}
RequestClientHeartbeat::RequestClientHeartbeat(const RequestClientHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestClientHeartbeat)
}

void RequestClientHeartbeat::SharedCtor() {
time_ = int64_t{0};
}

RequestClientHeartbeat::~RequestClientHeartbeat() {
  // @@protoc_insertion_point(destructor:syncframe.RequestClientHeartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestClientHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestClientHeartbeat::ArenaDtor(void* object) {
  RequestClientHeartbeat* _this = reinterpret_cast< RequestClientHeartbeat* >(object);
  (void)_this;
}
void RequestClientHeartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestClientHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestClientHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestClientHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestClientHeartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestClientHeartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestClientHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestClientHeartbeat)
  return target;
}

size_t RequestClientHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestClientHeartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestClientHeartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestClientHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestClientHeartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestClientHeartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestClientHeartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestClientHeartbeat)
    MergeFrom(*source);
  }
}

void RequestClientHeartbeat::MergeFrom(const RequestClientHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestClientHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void RequestClientHeartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestClientHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestClientHeartbeat::CopyFrom(const RequestClientHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestClientHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestClientHeartbeat::IsInitialized() const {
  return true;
}

void RequestClientHeartbeat::InternalSwap(RequestClientHeartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestClientHeartbeat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[11]);
}

// ===================================================================

class RequestGameOver::_Internal {
 public:
};

RequestGameOver::RequestGameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestGameOver)
}
RequestGameOver::RequestGameOver(const RequestGameOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestGameOver)
}

void RequestGameOver::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
}

RequestGameOver::~RequestGameOver() {
  // @@protoc_insertion_point(destructor:syncframe.RequestGameOver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestGameOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestGameOver::ArenaDtor(void* object) {
  RequestGameOver* _this = reinterpret_cast< RequestGameOver* >(object);
  (void)_this;
}
void RequestGameOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestGameOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestGameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestGameOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  result_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestGameOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestGameOver.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.RequestGameOver.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestGameOver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestGameOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestGameOver.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // string result = 4;
  if (!this->result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.RequestGameOver.result");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestGameOver)
  return target;
}

size_t RequestGameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestGameOver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string result = 4;
  if (!this->result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGameOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGameOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestGameOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestGameOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestGameOver)
    MergeFrom(*source);
  }
}

void RequestGameOver::MergeFrom(const RequestGameOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (!from.result().empty()) {
    _internal_set_result(from._internal_result());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void RequestGameOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGameOver::CopyFrom(const RequestGameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGameOver::IsInitialized() const {
  return true;
}

void RequestGameOver::InternalSwap(RequestGameOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, GetArenaForAllocation(),
      &other->result_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestGameOver, sequence_number_)
      + sizeof(RequestGameOver::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(RequestGameOver, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestGameOver::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[12]);
}

// ===================================================================

class RequestPlayerOver::_Internal {
 public:
};

RequestPlayerOver::RequestPlayerOver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.RequestPlayerOver)
}
RequestPlayerOver::RequestPlayerOver(const RequestPlayerOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.RequestPlayerOver)
}

void RequestPlayerOver::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
}

RequestPlayerOver::~RequestPlayerOver() {
  // @@protoc_insertion_point(destructor:syncframe.RequestPlayerOver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestPlayerOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestPlayerOver::ArenaDtor(void* object) {
  RequestPlayerOver* _this = reinterpret_cast< RequestPlayerOver* >(object);
  (void)_this;
}
void RequestPlayerOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestPlayerOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestPlayerOver::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.RequestPlayerOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPlayerOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestPlayerOver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.RequestPlayerOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.RequestPlayerOver)
  return target;
}

size_t RequestPlayerOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.RequestPlayerOver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPlayerOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.RequestPlayerOver)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPlayerOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestPlayerOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.RequestPlayerOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.RequestPlayerOver)
    MergeFrom(*source);
  }
}

void RequestPlayerOver::MergeFrom(const RequestPlayerOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.RequestPlayerOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void RequestPlayerOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.RequestPlayerOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlayerOver::CopyFrom(const RequestPlayerOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.RequestPlayerOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlayerOver::IsInitialized() const {
  return true;
}

void RequestPlayerOver::InternalSwap(RequestPlayerOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestPlayerOver, sequence_number_)
      + sizeof(RequestPlayerOver::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(RequestPlayerOver, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPlayerOver::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[13]);
}

// ===================================================================

class ResponseLoginRes::_Internal {
 public:
  static const ::syncframe::Player& player(const ResponseLoginRes* msg);
};

const ::syncframe::Player&
ResponseLoginRes::_Internal::player(const ResponseLoginRes* msg) {
  return *msg->player_;
}
ResponseLoginRes::ResponseLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseLoginRes)
}
ResponseLoginRes::ResponseLoginRes(const ResponseLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    player_ = new ::syncframe::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseLoginRes)
}

void ResponseLoginRes::SharedCtor() {
errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&player_)) + sizeof(code_));
}

ResponseLoginRes::~ResponseLoginRes() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseLoginRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void ResponseLoginRes::ArenaDtor(void* object) {
  ResponseLoginRes* _this = reinterpret_cast< ResponseLoginRes* >(object);
  (void)_this;
}
void ResponseLoginRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseLoginRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseLoginRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLoginRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseLoginRes.errMsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .syncframe.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseLoginRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseLoginRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string errMsg = 2;
  if (!this->errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseLoginRes.errMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  // .syncframe.Player player = 3;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseLoginRes)
  return target;
}

size_t ResponseLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseLoginRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errMsg = 2;
  if (!this->errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // .syncframe.Player player = 3;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseLoginRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseLoginRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseLoginRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseLoginRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseLoginRes)
    MergeFrom(*source);
  }
}

void ResponseLoginRes::MergeFrom(const ResponseLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from.has_player()) {
    _internal_mutable_player()->::syncframe::Player::MergeFrom(from._internal_player());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResponseLoginRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLoginRes::CopyFrom(const ResponseLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLoginRes::IsInitialized() const {
  return true;
}

void ResponseLoginRes::InternalSwap(ResponseLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errmsg_, GetArenaForAllocation(),
      &other->errmsg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseLoginRes, code_)
      + sizeof(ResponseLoginRes::code_)
      - PROTOBUF_FIELD_OFFSET(ResponseLoginRes, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLoginRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[14]);
}

// ===================================================================

class ResponsePlayerStatus::_Internal {
 public:
};

ResponsePlayerStatus::ResponsePlayerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponsePlayerStatus)
}
ResponsePlayerStatus::ResponsePlayerStatus(const ResponsePlayerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&up_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(up_time_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponsePlayerStatus)
}

void ResponsePlayerStatus::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&up_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(up_time_));
}

ResponsePlayerStatus::~ResponsePlayerStatus() {
  // @@protoc_insertion_point(destructor:syncframe.ResponsePlayerStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePlayerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePlayerStatus::ArenaDtor(void* object) {
  ResponsePlayerStatus* _this = reinterpret_cast< ResponsePlayerStatus* >(object);
  (void)_this;
}
void ResponsePlayerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePlayerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsePlayerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponsePlayerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  room_id_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&up_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(up_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePlayerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePlayerStatus.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePlayerStatus.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 up_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          up_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePlayerStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponsePlayerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string nickname = 2;
  if (!this->nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePlayerStatus.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // string room_id = 4;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePlayerStatus.room_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_room_id(), target);
  }

  // int32 add_time = 5;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_add_time(), target);
  }

  // int32 up_time = 6;
  if (this->up_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_up_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponsePlayerStatus)
  return target;
}

size_t ResponsePlayerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponsePlayerStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string room_id = 4;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 add_time = 5;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_time());
  }

  // int32 up_time = 6;
  if (this->up_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_up_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePlayerStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponsePlayerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePlayerStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePlayerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponsePlayerStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponsePlayerStatus)
    MergeFrom(*source);
  }
}

void ResponsePlayerStatus::MergeFrom(const ResponsePlayerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponsePlayerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.up_time() != 0) {
    _internal_set_up_time(from._internal_up_time());
  }
}

void ResponsePlayerStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponsePlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePlayerStatus::CopyFrom(const ResponsePlayerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponsePlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePlayerStatus::IsInitialized() const {
  return true;
}

void ResponsePlayerStatus::InternalSwap(ResponsePlayerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsePlayerStatus, up_time_)
      + sizeof(ResponsePlayerStatus::up_time_)
      - PROTOBUF_FIELD_OFFSET(ResponsePlayerStatus, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePlayerStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[15]);
}

// ===================================================================

class ResponseOtherPlayerOffline::_Internal {
 public:
};

ResponseOtherPlayerOffline::ResponseOtherPlayerOffline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseOtherPlayerOffline)
}
ResponseOtherPlayerOffline::ResponseOtherPlayerOffline(const ResponseOtherPlayerOffline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseOtherPlayerOffline)
}

void ResponseOtherPlayerOffline::SharedCtor() {
player_id_ = 0;
}

ResponseOtherPlayerOffline::~ResponseOtherPlayerOffline() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseOtherPlayerOffline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseOtherPlayerOffline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseOtherPlayerOffline::ArenaDtor(void* object) {
  ResponseOtherPlayerOffline* _this = reinterpret_cast< ResponseOtherPlayerOffline* >(object);
  (void)_this;
}
void ResponseOtherPlayerOffline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseOtherPlayerOffline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseOtherPlayerOffline::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseOtherPlayerOffline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseOtherPlayerOffline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseOtherPlayerOffline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseOtherPlayerOffline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseOtherPlayerOffline)
  return target;
}

size_t ResponseOtherPlayerOffline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseOtherPlayerOffline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseOtherPlayerOffline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseOtherPlayerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseOtherPlayerOffline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseOtherPlayerOffline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseOtherPlayerOffline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseOtherPlayerOffline)
    MergeFrom(*source);
  }
}

void ResponseOtherPlayerOffline::MergeFrom(const ResponseOtherPlayerOffline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseOtherPlayerOffline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void ResponseOtherPlayerOffline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseOtherPlayerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseOtherPlayerOffline::CopyFrom(const ResponseOtherPlayerOffline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseOtherPlayerOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOtherPlayerOffline::IsInitialized() const {
  return true;
}

void ResponseOtherPlayerOffline::InternalSwap(ResponseOtherPlayerOffline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOtherPlayerOffline::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[16]);
}

// ===================================================================

class ResponseKickOff::_Internal {
 public:
};

ResponseKickOff::ResponseKickOff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseKickOff)
}
ResponseKickOff::ResponseKickOff(const ResponseKickOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseKickOff)
}

void ResponseKickOff::SharedCtor() {
time_ = int64_t{0};
}

ResponseKickOff::~ResponseKickOff() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseKickOff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseKickOff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseKickOff::ArenaDtor(void* object) {
  ResponseKickOff* _this = reinterpret_cast< ResponseKickOff* >(object);
  (void)_this;
}
void ResponseKickOff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseKickOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseKickOff::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseKickOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseKickOff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseKickOff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseKickOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseKickOff)
  return target;
}

size_t ResponseKickOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseKickOff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseKickOff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseKickOff)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseKickOff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseKickOff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseKickOff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseKickOff)
    MergeFrom(*source);
  }
}

void ResponseKickOff::MergeFrom(const ResponseKickOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseKickOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void ResponseKickOff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseKickOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseKickOff::CopyFrom(const ResponseKickOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseKickOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseKickOff::IsInitialized() const {
  return true;
}

void ResponseKickOff::InternalSwap(ResponseKickOff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseKickOff::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[17]);
}

// ===================================================================

class ResponseStartBattle::_Internal {
 public:
};

ResponseStartBattle::ResponseStartBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseStartBattle)
}
ResponseStartBattle::ResponseStartBattle(const ResponseStartBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_number_start_ = from.sequence_number_start_;
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseStartBattle)
}

void ResponseStartBattle::SharedCtor() {
sequence_number_start_ = 0;
}

ResponseStartBattle::~ResponseStartBattle() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseStartBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseStartBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseStartBattle::ArenaDtor(void* object) {
  ResponseStartBattle* _this = reinterpret_cast< ResponseStartBattle* >(object);
  (void)_this;
}
void ResponseStartBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseStartBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseStartBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseStartBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_number_start_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseStartBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sequence_number_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_number_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseStartBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseStartBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number_start = 1;
  if (this->sequence_number_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence_number_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseStartBattle)
  return target;
}

size_t ResponseStartBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseStartBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sequence_number_start = 1;
  if (this->sequence_number_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number_start());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseStartBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseStartBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseStartBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseStartBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseStartBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseStartBattle)
    MergeFrom(*source);
  }
}

void ResponseStartBattle::MergeFrom(const ResponseStartBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseStartBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_number_start() != 0) {
    _internal_set_sequence_number_start(from._internal_sequence_number_start());
  }
}

void ResponseStartBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseStartBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStartBattle::CopyFrom(const ResponseStartBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseStartBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStartBattle::IsInitialized() const {
  return true;
}

void ResponseStartBattle::InternalSwap(ResponseStartBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sequence_number_start_, other->sequence_number_start_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseStartBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[18]);
}

// ===================================================================

class ResponseServerPing::_Internal {
 public:
};

ResponseServerPing::ResponseServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseServerPing)
}
ResponseServerPing::ResponseServerPing(const ResponseServerPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add_time_, &from.add_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseServerPing)
}

void ResponseServerPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
}

ResponseServerPing::~ResponseServerPing() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseServerPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseServerPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseServerPing::ArenaDtor(void* object) {
  ResponseServerPing* _this = reinterpret_cast< ResponseServerPing* >(object);
  (void)_this;
}
void ResponseServerPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseServerPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseServerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseServerPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtt_times_) -
      reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseServerPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 add_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_receive_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_receive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 server_response_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_response_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rtt_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rtt_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rtt_times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rtt_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseServerPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseServerPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_add_time(), target);
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_client_receive_time(), target);
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_server_response_time(), target);
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_rtt_timeout(), target);
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rtt_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseServerPing)
  return target;
}

size_t ResponseServerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseServerPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_time());
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_client_receive_time());
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_response_time());
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rtt_timeout());
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rtt_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseServerPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseServerPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseServerPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseServerPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseServerPing)
    MergeFrom(*source);
  }
}

void ResponseServerPing::MergeFrom(const ResponseServerPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseServerPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.client_receive_time() != 0) {
    _internal_set_client_receive_time(from._internal_client_receive_time());
  }
  if (from.server_response_time() != 0) {
    _internal_set_server_response_time(from._internal_server_response_time());
  }
  if (from.rtt_timeout() != 0) {
    _internal_set_rtt_timeout(from._internal_rtt_timeout());
  }
  if (from.rtt_times() != 0) {
    _internal_set_rtt_times(from._internal_rtt_times());
  }
}

void ResponseServerPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseServerPing::CopyFrom(const ResponseServerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseServerPing::IsInitialized() const {
  return true;
}

void ResponseServerPing::InternalSwap(ResponseServerPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseServerPing, rtt_times_)
      + sizeof(ResponseServerPing::rtt_times_)
      - PROTOBUF_FIELD_OFFSET(ResponseServerPing, add_time_)>(
          reinterpret_cast<char*>(&add_time_),
          reinterpret_cast<char*>(&other->add_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseServerPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[19]);
}

// ===================================================================

class ResponseServerPong::_Internal {
 public:
};

ResponseServerPong::ResponseServerPong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseServerPong)
}
ResponseServerPong::ResponseServerPong(const ResponseServerPong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&add_time_, &from.add_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseServerPong)
}

void ResponseServerPong::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtt_times_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
}

ResponseServerPong::~ResponseServerPong() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseServerPong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseServerPong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseServerPong::ArenaDtor(void* object) {
  ResponseServerPong* _this = reinterpret_cast< ResponseServerPong* >(object);
  (void)_this;
}
void ResponseServerPong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseServerPong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseServerPong::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseServerPong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtt_times_) -
      reinterpret_cast<char*>(&add_time_)) + sizeof(rtt_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseServerPong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 add_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_receive_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_receive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 server_response_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_response_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rtt_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rtt_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rtt_times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rtt_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseServerPong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseServerPong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_add_time(), target);
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_client_receive_time(), target);
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_server_response_time(), target);
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_rtt_timeout(), target);
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rtt_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseServerPong)
  return target;
}

size_t ResponseServerPong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseServerPong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 add_time = 1;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_time());
  }

  // int64 client_receive_time = 2;
  if (this->client_receive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_client_receive_time());
  }

  // int64 server_response_time = 3;
  if (this->server_response_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_response_time());
  }

  // int64 rtt_timeout = 4;
  if (this->rtt_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rtt_timeout());
  }

  // int32 rtt_times = 5;
  if (this->rtt_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rtt_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseServerPong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseServerPong)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseServerPong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseServerPong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseServerPong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseServerPong)
    MergeFrom(*source);
  }
}

void ResponseServerPong::MergeFrom(const ResponseServerPong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseServerPong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.client_receive_time() != 0) {
    _internal_set_client_receive_time(from._internal_client_receive_time());
  }
  if (from.server_response_time() != 0) {
    _internal_set_server_response_time(from._internal_server_response_time());
  }
  if (from.rtt_timeout() != 0) {
    _internal_set_rtt_timeout(from._internal_rtt_timeout());
  }
  if (from.rtt_times() != 0) {
    _internal_set_rtt_times(from._internal_rtt_times());
  }
}

void ResponseServerPong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseServerPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseServerPong::CopyFrom(const ResponseServerPong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseServerPong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseServerPong::IsInitialized() const {
  return true;
}

void ResponseServerPong::InternalSwap(ResponseServerPong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseServerPong, rtt_times_)
      + sizeof(ResponseServerPong::rtt_times_)
      - PROTOBUF_FIELD_OFFSET(ResponseServerPong, add_time_)>(
          reinterpret_cast<char*>(&add_time_),
          reinterpret_cast<char*>(&other->add_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseServerPong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[20]);
}

// ===================================================================

class ResponseEnterBattle::_Internal {
 public:
};

ResponseEnterBattle::ResponseEnterBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseEnterBattle)
}
ResponseEnterBattle::ResponseEnterBattle(const ResponseEnterBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_list_(from.player_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&rand_seek_, &from.rand_seek_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&rand_seek_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseEnterBattle)
}

void ResponseEnterBattle::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rand_seek_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&rand_seek_)) + sizeof(time_));
}

ResponseEnterBattle::~ResponseEnterBattle() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseEnterBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseEnterBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseEnterBattle::ArenaDtor(void* object) {
  ResponseEnterBattle* _this = reinterpret_cast< ResponseEnterBattle* >(object);
  (void)_this;
}
void ResponseEnterBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseEnterBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseEnterBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseEnterBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  room_id_.ClearToEmpty();
  ::memset(&rand_seek_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&rand_seek_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseEnterBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rand_seek = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rand_seek_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseEnterBattle.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .syncframe.Player player_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseEnterBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseEnterBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rand_seek = 1;
  if (this->rand_seek() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rand_seek(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseEnterBattle.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // int32 add_time = 5;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_add_time(), target);
  }

  // int64 time = 6;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_time(), target);
  }

  // repeated .syncframe.Player player_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_player_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseEnterBattle)
  return target;
}

size_t ResponseEnterBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseEnterBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .syncframe.Player player_list = 7;
  total_size += 1UL * this->_internal_player_list_size();
  for (const auto& msg : this->player_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 rand_seek = 1;
  if (this->rand_seek() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rand_seek());
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 add_time = 5;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_time());
  }

  // int64 time = 6;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseEnterBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseEnterBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEnterBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseEnterBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseEnterBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseEnterBattle)
    MergeFrom(*source);
  }
}

void ResponseEnterBattle::MergeFrom(const ResponseEnterBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseEnterBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.rand_seek() != 0) {
    _internal_set_rand_seek(from._internal_rand_seek());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void ResponseEnterBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseEnterBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEnterBattle::CopyFrom(const ResponseEnterBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseEnterBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEnterBattle::IsInitialized() const {
  return true;
}

void ResponseEnterBattle::InternalSwap(ResponseEnterBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  player_list_.InternalSwap(&other->player_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseEnterBattle, time_)
      + sizeof(ResponseEnterBattle::time_)
      - PROTOBUF_FIELD_OFFSET(ResponseEnterBattle, rand_seek_)>(
          reinterpret_cast<char*>(&rand_seek_),
          reinterpret_cast<char*>(&other->rand_seek_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseEnterBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[21]);
}

// ===================================================================

class ResponsePushLogicFrame::_Internal {
 public:
};

ResponsePushLogicFrame::ResponsePushLogicFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  operations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponsePushLogicFrame)
}
ResponsePushLogicFrame::ResponsePushLogicFrame(const ResponsePushLogicFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponsePushLogicFrame)
}

void ResponsePushLogicFrame::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sequence_number_));
}

ResponsePushLogicFrame::~ResponsePushLogicFrame() {
  // @@protoc_insertion_point(destructor:syncframe.ResponsePushLogicFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePushLogicFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePushLogicFrame::ArenaDtor(void* object) {
  ResponsePushLogicFrame* _this = reinterpret_cast< ResponsePushLogicFrame* >(object);
  (void)_this;
}
void ResponsePushLogicFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePushLogicFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsePushLogicFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponsePushLogicFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  room_id_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePushLogicFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePushLogicFrame.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .syncframe.Operation operations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePushLogicFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponsePushLogicFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePushLogicFrame.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // repeated .syncframe.Operation operations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponsePushLogicFrame)
  return target;
}

size_t ResponsePushLogicFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponsePushLogicFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .syncframe.Operation operations = 4;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePushLogicFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponsePushLogicFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePushLogicFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePushLogicFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponsePushLogicFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponsePushLogicFrame)
    MergeFrom(*source);
  }
}

void ResponsePushLogicFrame::MergeFrom(const ResponsePushLogicFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponsePushLogicFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void ResponsePushLogicFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponsePushLogicFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePushLogicFrame::CopyFrom(const ResponsePushLogicFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponsePushLogicFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePushLogicFrame::IsInitialized() const {
  return true;
}

void ResponsePushLogicFrame::InternalSwap(ResponsePushLogicFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operations_.InternalSwap(&other->operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsePushLogicFrame, sequence_number_)
      + sizeof(ResponsePushLogicFrame::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResponsePushLogicFrame, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePushLogicFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[22]);
}

// ===================================================================

class ResponseOtherPlayerOver::_Internal {
 public:
};

ResponseOtherPlayerOver::ResponseOtherPlayerOver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseOtherPlayerOver)
}
ResponseOtherPlayerOver::ResponseOtherPlayerOver(const ResponseOtherPlayerOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseOtherPlayerOver)
}

void ResponseOtherPlayerOver::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
}

ResponseOtherPlayerOver::~ResponseOtherPlayerOver() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseOtherPlayerOver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseOtherPlayerOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseOtherPlayerOver::ArenaDtor(void* object) {
  ResponseOtherPlayerOver* _this = reinterpret_cast< ResponseOtherPlayerOver* >(object);
  (void)_this;
}
void ResponseOtherPlayerOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseOtherPlayerOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseOtherPlayerOver::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseOtherPlayerOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseOtherPlayerOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseOtherPlayerOver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseOtherPlayerOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseOtherPlayerOver)
  return target;
}

size_t ResponseOtherPlayerOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseOtherPlayerOver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseOtherPlayerOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseOtherPlayerOver)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseOtherPlayerOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseOtherPlayerOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseOtherPlayerOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseOtherPlayerOver)
    MergeFrom(*source);
  }
}

void ResponseOtherPlayerOver::MergeFrom(const ResponseOtherPlayerOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseOtherPlayerOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void ResponseOtherPlayerOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseOtherPlayerOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseOtherPlayerOver::CopyFrom(const ResponseOtherPlayerOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseOtherPlayerOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOtherPlayerOver::IsInitialized() const {
  return true;
}

void ResponseOtherPlayerOver::InternalSwap(ResponseOtherPlayerOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseOtherPlayerOver, sequence_number_)
      + sizeof(ResponseOtherPlayerOver::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResponseOtherPlayerOver, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOtherPlayerOver::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[23]);
}

// ===================================================================

class ResponseGameOver::_Internal {
 public:
};

ResponseGameOver::ResponseGameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseGameOver)
}
ResponseGameOver::ResponseGameOver(const ResponseGameOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseGameOver)
}

void ResponseGameOver::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
}

ResponseGameOver::~ResponseGameOver() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseGameOver)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseGameOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseGameOver::ArenaDtor(void* object) {
  ResponseGameOver* _this = reinterpret_cast< ResponseGameOver* >(object);
  (void)_this;
}
void ResponseGameOver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseGameOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseGameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseGameOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  result_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseGameOver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseGameOver.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseGameOver.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseGameOver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseGameOver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseGameOver.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // string result = 4;
  if (!this->result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseGameOver.result");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseGameOver)
  return target;
}

size_t ResponseGameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseGameOver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string result = 4;
  if (!this->result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseGameOver::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseGameOver* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseGameOver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseGameOver)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseGameOver)
    MergeFrom(*source);
  }
}

void ResponseGameOver::MergeFrom(const ResponseGameOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (!from.result().empty()) {
    _internal_set_result(from._internal_result());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void ResponseGameOver::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGameOver::CopyFrom(const ResponseGameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGameOver::IsInitialized() const {
  return true;
}

void ResponseGameOver::InternalSwap(ResponseGameOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, GetArenaForAllocation(),
      &other->result_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseGameOver, sequence_number_)
      + sizeof(ResponseGameOver::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResponseGameOver, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseGameOver::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[24]);
}

// ===================================================================

class ResponseReadyTimeout::_Internal {
 public:
};

ResponseReadyTimeout::ResponseReadyTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseReadyTimeout)
}
ResponseReadyTimeout::ResponseReadyTimeout(const ResponseReadyTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseReadyTimeout)
}

void ResponseReadyTimeout::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResponseReadyTimeout::~ResponseReadyTimeout() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseReadyTimeout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseReadyTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseReadyTimeout::ArenaDtor(void* object) {
  ResponseReadyTimeout* _this = reinterpret_cast< ResponseReadyTimeout* >(object);
  (void)_this;
}
void ResponseReadyTimeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseReadyTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseReadyTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseReadyTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseReadyTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseReadyTimeout.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseReadyTimeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseReadyTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseReadyTimeout.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseReadyTimeout)
  return target;
}

size_t ResponseReadyTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseReadyTimeout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseReadyTimeout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseReadyTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseReadyTimeout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseReadyTimeout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseReadyTimeout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseReadyTimeout)
    MergeFrom(*source);
  }
}

void ResponseReadyTimeout::MergeFrom(const ResponseReadyTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseReadyTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
}

void ResponseReadyTimeout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseReadyTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseReadyTimeout::CopyFrom(const ResponseReadyTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseReadyTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseReadyTimeout::IsInitialized() const {
  return true;
}

void ResponseReadyTimeout::InternalSwap(ResponseReadyTimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseReadyTimeout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[25]);
}

// ===================================================================

class ResponsePushRoomInfo::_Internal {
 public:
};

ResponsePushRoomInfo::ResponsePushRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponsePushRoomInfo)
}
ResponsePushRoomInfo::ResponsePushRoomInfo(const ResponsePushRoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_list_(from.player_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&add_time_, &from.add_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponsePushRoomInfo)
}

void ResponsePushRoomInfo::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&add_time_)) + sizeof(end_time_));
}

ResponsePushRoomInfo::~ResponsePushRoomInfo() {
  // @@protoc_insertion_point(destructor:syncframe.ResponsePushRoomInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePushRoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePushRoomInfo::ArenaDtor(void* object) {
  ResponsePushRoomInfo* _this = reinterpret_cast< ResponsePushRoomInfo* >(object);
  (void)_this;
}
void ResponsePushRoomInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePushRoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsePushRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponsePushRoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_list_.Clear();
  id_.ClearToEmpty();
  room_id_.ClearToEmpty();
  ::memset(&add_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&add_time_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePushRoomInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePushRoomInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rand_seek = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rand_seek_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .syncframe.Player player_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string room_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePushRoomInfo.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePushRoomInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponsePushRoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePushRoomInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 add_time = 2;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_add_time(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int32 timeout = 4;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_timeout(), target);
  }

  // int32 sequence_number = 5;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sequence_number(), target);
  }

  // int32 rand_seek = 6;
  if (this->rand_seek() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rand_seek(), target);
  }

  // repeated .syncframe.Player player_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_player_list(i), target, stream);
  }

  // string room_id = 8;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePushRoomInfo.room_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_room_id(), target);
  }

  // int32 start_time = 9;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_start_time(), target);
  }

  // int32 end_time = 10;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponsePushRoomInfo)
  return target;
}

size_t ResponsePushRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponsePushRoomInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .syncframe.Player player_list = 7;
  total_size += 1UL * this->_internal_player_list_size();
  for (const auto& msg : this->player_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string room_id = 8;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 add_time = 2;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_time());
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 timeout = 4;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeout());
  }

  // int32 sequence_number = 5;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  // int32 rand_seek = 6;
  if (this->rand_seek() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rand_seek());
  }

  // int32 start_time = 9;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_time());
  }

  // int32 end_time = 10;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePushRoomInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponsePushRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePushRoomInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePushRoomInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponsePushRoomInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponsePushRoomInfo)
    MergeFrom(*source);
  }
}

void ResponsePushRoomInfo::MergeFrom(const ResponsePushRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponsePushRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_list_.MergeFrom(from.player_list_);
  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.rand_seek() != 0) {
    _internal_set_rand_seek(from._internal_rand_seek());
  }
  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
}

void ResponsePushRoomInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponsePushRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePushRoomInfo::CopyFrom(const ResponsePushRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponsePushRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePushRoomInfo::IsInitialized() const {
  return true;
}

void ResponsePushRoomInfo::InternalSwap(ResponsePushRoomInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  player_list_.InternalSwap(&other->player_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsePushRoomInfo, end_time_)
      + sizeof(ResponsePushRoomInfo::end_time_)
      - PROTOBUF_FIELD_OFFSET(ResponsePushRoomInfo, add_time_)>(
          reinterpret_cast<char*>(&add_time_),
          reinterpret_cast<char*>(&other->add_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePushRoomInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[26]);
}

// ===================================================================

class ResponsePushRoomHistory::_Internal {
 public:
};

ResponsePushRoomHistory::ResponsePushRoomHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponsePushRoomHistory)
}
ResponsePushRoomHistory::ResponsePushRoomHistory(const ResponsePushRoomHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponsePushRoomHistory)
}

void ResponsePushRoomHistory::SharedCtor() {
}

ResponsePushRoomHistory::~ResponsePushRoomHistory() {
  // @@protoc_insertion_point(destructor:syncframe.ResponsePushRoomHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePushRoomHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponsePushRoomHistory::ArenaDtor(void* object) {
  ResponsePushRoomHistory* _this = reinterpret_cast< ResponsePushRoomHistory* >(object);
  (void)_this;
}
void ResponsePushRoomHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePushRoomHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsePushRoomHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponsePushRoomHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePushRoomHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .syncframe.ResponseRoomHistory list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePushRoomHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponsePushRoomHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .syncframe.ResponseRoomHistory list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponsePushRoomHistory)
  return target;
}

size_t ResponsePushRoomHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponsePushRoomHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .syncframe.ResponseRoomHistory list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePushRoomHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponsePushRoomHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePushRoomHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePushRoomHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponsePushRoomHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponsePushRoomHistory)
    MergeFrom(*source);
  }
}

void ResponsePushRoomHistory::MergeFrom(const ResponsePushRoomHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponsePushRoomHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void ResponsePushRoomHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponsePushRoomHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePushRoomHistory::CopyFrom(const ResponsePushRoomHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponsePushRoomHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePushRoomHistory::IsInitialized() const {
  return true;
}

void ResponsePushRoomHistory::InternalSwap(ResponsePushRoomHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePushRoomHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[27]);
}

// ===================================================================

class ResponseRoomHistory::_Internal {
 public:
};

ResponseRoomHistory::ResponseRoomHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseRoomHistory)
}
ResponseRoomHistory::ResponseRoomHistory(const ResponseRoomHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseRoomHistory)
}

void ResponseRoomHistory::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

ResponseRoomHistory::~ResponseRoomHistory() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseRoomHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseRoomHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseRoomHistory::ArenaDtor(void* object) {
  ResponseRoomHistory* _this = reinterpret_cast< ResponseRoomHistory* >(object);
  (void)_this;
}
void ResponseRoomHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseRoomHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseRoomHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseRoomHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  content_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseRoomHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseRoomHistory.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseRoomHistory.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseRoomHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseRoomHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string action = 2;
  if (!this->action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseRoomHistory.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // string content = 3;
  if (!this->content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseRoomHistory.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseRoomHistory)
  return target;
}

size_t ResponseRoomHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseRoomHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 2;
  if (!this->action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 3;
  if (!this->content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseRoomHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseRoomHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseRoomHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseRoomHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseRoomHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseRoomHistory)
    MergeFrom(*source);
  }
}

void ResponseRoomHistory::MergeFrom(const ResponseRoomHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseRoomHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from.content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ResponseRoomHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseRoomHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRoomHistory::CopyFrom(const ResponseRoomHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseRoomHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRoomHistory::IsInitialized() const {
  return true;
}

void ResponseRoomHistory::InternalSwap(ResponseRoomHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, GetArenaForAllocation(),
      &other->action_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, GetArenaForAllocation(),
      &other->content_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseRoomHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[28]);
}

// ===================================================================

class ResponseOtherPlayerResumeGame::_Internal {
 public:
};

ResponseOtherPlayerResumeGame::ResponseOtherPlayerResumeGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseOtherPlayerResumeGame)
}
ResponseOtherPlayerResumeGame::ResponseOtherPlayerResumeGame(const ResponseOtherPlayerResumeGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseOtherPlayerResumeGame)
}

void ResponseOtherPlayerResumeGame::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
}

ResponseOtherPlayerResumeGame::~ResponseOtherPlayerResumeGame() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseOtherPlayerResumeGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseOtherPlayerResumeGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseOtherPlayerResumeGame::ArenaDtor(void* object) {
  ResponseOtherPlayerResumeGame* _this = reinterpret_cast< ResponseOtherPlayerResumeGame* >(object);
  (void)_this;
}
void ResponseOtherPlayerResumeGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseOtherPlayerResumeGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseOtherPlayerResumeGame::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseOtherPlayerResumeGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseOtherPlayerResumeGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseOtherPlayerResumeGame.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseOtherPlayerResumeGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseOtherPlayerResumeGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string room_id = 2;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseOtherPlayerResumeGame.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseOtherPlayerResumeGame)
  return target;
}

size_t ResponseOtherPlayerResumeGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseOtherPlayerResumeGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 2;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseOtherPlayerResumeGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseOtherPlayerResumeGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseOtherPlayerResumeGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseOtherPlayerResumeGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseOtherPlayerResumeGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseOtherPlayerResumeGame)
    MergeFrom(*source);
  }
}

void ResponseOtherPlayerResumeGame::MergeFrom(const ResponseOtherPlayerResumeGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseOtherPlayerResumeGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void ResponseOtherPlayerResumeGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseOtherPlayerResumeGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseOtherPlayerResumeGame::CopyFrom(const ResponseOtherPlayerResumeGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseOtherPlayerResumeGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOtherPlayerResumeGame::IsInitialized() const {
  return true;
}

void ResponseOtherPlayerResumeGame::InternalSwap(ResponseOtherPlayerResumeGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseOtherPlayerResumeGame, sequence_number_)
      + sizeof(ResponseOtherPlayerResumeGame::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResponseOtherPlayerResumeGame, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOtherPlayerResumeGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[29]);
}

// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upd_port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(upd_port_));
  // @@protoc_insertion_point(copy_constructor:syncframe.Player)
}

void Player::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upd_port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(upd_port_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:syncframe.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  room_id_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upd_port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(upd_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.Player.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          add_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.Player.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 upd_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          upd_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.Player.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 role_id = 2;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_role_id(), target);
  }

  // string nickname = 3;
  if (!this->nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.Player.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // int32 add_time = 5;
  if (this->add_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_add_time(), target);
  }

  // int32 upTime = 6;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_uptime(), target);
  }

  // string room_id = 7;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.Player.room_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_room_id(), target);
  }

  // int32 upd_port = 8;
  if (this->upd_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_upd_port(), target);
  }

  // string ip = 9;
  if (!this->ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.Player.ip");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 3;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string room_id = 7;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string ip = 9;
  if (!this->ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_id());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 add_time = 5;
  if (this->add_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_time());
  }

  // int32 upTime = 6;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uptime());
  }

  // int32 upd_port = 8;
  if (this->upd_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upd_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (!from.ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.add_time() != 0) {
    _internal_set_add_time(from._internal_add_time());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (from.upd_port() != 0) {
    _internal_set_upd_port(from._internal_upd_port());
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, upd_port_)
      + sizeof(Player::upd_port_)
      - PROTOBUF_FIELD_OFFSET(Player, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[30]);
}

// ===================================================================

class ResponseRestartGame::_Internal {
 public:
};

ResponseRestartGame::ResponseRestartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponseRestartGame)
}
ResponseRestartGame::ResponseRestartGame(const ResponseRestartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_ids_(from.player_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_id().empty()) {
    room_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponseRestartGame)
}

void ResponseRestartGame::SharedCtor() {
room_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResponseRestartGame::~ResponseRestartGame() {
  // @@protoc_insertion_point(destructor:syncframe.ResponseRestartGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseRestartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  room_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseRestartGame::ArenaDtor(void* object) {
  ResponseRestartGame* _this = reinterpret_cast< ResponseRestartGame* >(object);
  (void)_this;
}
void ResponseRestartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseRestartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseRestartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponseRestartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_ids_.Clear();
  room_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseRestartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponseRestartGame.room_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 player_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseRestartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponseRestartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponseRestartGame.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // repeated int32 player_ids = 2;
  {
    int byte_size = _player_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_player_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponseRestartGame)
  return target;
}

size_t ResponseRestartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponseRestartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->player_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string room_id = 1;
  if (!this->room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseRestartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponseRestartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseRestartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseRestartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponseRestartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponseRestartGame)
    MergeFrom(*source);
  }
}

void ResponseRestartGame::MergeFrom(const ResponseRestartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponseRestartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_ids_.MergeFrom(from.player_ids_);
  if (!from.room_id().empty()) {
    _internal_set_room_id(from._internal_room_id());
  }
}

void ResponseRestartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponseRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRestartGame::CopyFrom(const ResponseRestartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponseRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRestartGame::IsInitialized() const {
  return true;
}

void ResponseRestartGame::InternalSwap(ResponseRestartGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  player_ids_.InternalSwap(&other->player_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &room_id_, GetArenaForAllocation(),
      &other->room_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseRestartGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[31]);
}

// ===================================================================

class ResponsePlayerMatchSignFailed::_Internal {
 public:
};

ResponsePlayerMatchSignFailed::ResponsePlayerMatchSignFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponsePlayerMatchSignFailed)
}
ResponsePlayerMatchSignFailed::ResponsePlayerMatchSignFailed(const ResponsePlayerMatchSignFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponsePlayerMatchSignFailed)
}

void ResponsePlayerMatchSignFailed::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(code_));
}

ResponsePlayerMatchSignFailed::~ResponsePlayerMatchSignFailed() {
  // @@protoc_insertion_point(destructor:syncframe.ResponsePlayerMatchSignFailed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePlayerMatchSignFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePlayerMatchSignFailed::ArenaDtor(void* object) {
  ResponsePlayerMatchSignFailed* _this = reinterpret_cast< ResponsePlayerMatchSignFailed* >(object);
  (void)_this;
}
void ResponsePlayerMatchSignFailed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePlayerMatchSignFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsePlayerMatchSignFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponsePlayerMatchSignFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePlayerMatchSignFailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePlayerMatchSignFailed.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePlayerMatchSignFailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponsePlayerMatchSignFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string msg = 2;
  if (!this->msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePlayerMatchSignFailed.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponsePlayerMatchSignFailed)
  return target;
}

size_t ResponsePlayerMatchSignFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponsePlayerMatchSignFailed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePlayerMatchSignFailed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponsePlayerMatchSignFailed)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePlayerMatchSignFailed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePlayerMatchSignFailed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponsePlayerMatchSignFailed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponsePlayerMatchSignFailed)
    MergeFrom(*source);
  }
}

void ResponsePlayerMatchSignFailed::MergeFrom(const ResponsePlayerMatchSignFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponsePlayerMatchSignFailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResponsePlayerMatchSignFailed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponsePlayerMatchSignFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePlayerMatchSignFailed::CopyFrom(const ResponsePlayerMatchSignFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponsePlayerMatchSignFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePlayerMatchSignFailed::IsInitialized() const {
  return true;
}

void ResponsePlayerMatchSignFailed::InternalSwap(ResponsePlayerMatchSignFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsePlayerMatchSignFailed, code_)
      + sizeof(ResponsePlayerMatchSignFailed::code_)
      - PROTOBUF_FIELD_OFFSET(ResponsePlayerMatchSignFailed, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePlayerMatchSignFailed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[32]);
}

// ===================================================================

class ResponsePlayerMatchingFailed::_Internal {
 public:
};

ResponsePlayerMatchingFailed::ResponsePlayerMatchingFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.ResponsePlayerMatchingFailed)
}
ResponsePlayerMatchingFailed::ResponsePlayerMatchingFailed(const ResponsePlayerMatchingFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomid().empty()) {
    roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:syncframe.ResponsePlayerMatchingFailed)
}

void ResponsePlayerMatchingFailed::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(code_));
}

ResponsePlayerMatchingFailed::~ResponsePlayerMatchingFailed() {
  // @@protoc_insertion_point(destructor:syncframe.ResponsePlayerMatchingFailed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponsePlayerMatchingFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponsePlayerMatchingFailed::ArenaDtor(void* object) {
  ResponsePlayerMatchingFailed* _this = reinterpret_cast< ResponsePlayerMatchingFailed* >(object);
  (void)_this;
}
void ResponsePlayerMatchingFailed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsePlayerMatchingFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsePlayerMatchingFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.ResponsePlayerMatchingFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  roomid_.ClearToEmpty();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePlayerMatchingFailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePlayerMatchingFailed.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_roomid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.ResponsePlayerMatchingFailed.roomId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsePlayerMatchingFailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.ResponsePlayerMatchingFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // string msg = 2;
  if (!this->msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePlayerMatchingFailed.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string roomId = 3;
  if (!this->roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.ResponsePlayerMatchingFailed.roomId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_roomid(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.ResponsePlayerMatchingFailed)
  return target;
}

size_t ResponsePlayerMatchingFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.ResponsePlayerMatchingFailed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string roomId = 3;
  if (!this->roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePlayerMatchingFailed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.ResponsePlayerMatchingFailed)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePlayerMatchingFailed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponsePlayerMatchingFailed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.ResponsePlayerMatchingFailed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.ResponsePlayerMatchingFailed)
    MergeFrom(*source);
  }
}

void ResponsePlayerMatchingFailed::MergeFrom(const ResponsePlayerMatchingFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.ResponsePlayerMatchingFailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from.roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResponsePlayerMatchingFailed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.ResponsePlayerMatchingFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePlayerMatchingFailed::CopyFrom(const ResponsePlayerMatchingFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.ResponsePlayerMatchingFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePlayerMatchingFailed::IsInitialized() const {
  return true;
}

void ResponsePlayerMatchingFailed::InternalSwap(ResponsePlayerMatchingFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomid_, GetArenaForAllocation(),
      &other->roomid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponsePlayerMatchingFailed, code_)
      + sizeof(ResponsePlayerMatchingFailed::code_)
      - PROTOBUF_FIELD_OFFSET(ResponsePlayerMatchingFailed, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePlayerMatchingFailed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[33]);
}

// ===================================================================

class CfgServer::_Internal {
 public:
};

CfgServer::CfgServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.CfgServer)
}
CfgServer::CfgServer(const CfgServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  listenip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_listenip().empty()) {
    listenip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_listenip(), 
      GetArenaForAllocation());
  }
  outip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outip().empty()) {
    outip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outip(), 
      GetArenaForAllocation());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port(), 
      GetArenaForAllocation());
  }
  udpport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udpport().empty()) {
    udpport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_udpport(), 
      GetArenaForAllocation());
  }
  wsuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wsuri().empty()) {
    wsuri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wsuri(), 
      GetArenaForAllocation());
  }
  loginauthtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loginauthtype().empty()) {
    loginauthtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loginauthtype(), 
      GetArenaForAllocation());
  }
  loginauthsecretkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loginauthsecretkey().empty()) {
    loginauthsecretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loginauthsecretkey(), 
      GetArenaForAllocation());
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&store_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(store_));
  // @@protoc_insertion_point(copy_constructor:syncframe.CfgServer)
}

void CfgServer::SharedCtor() {
listenip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
outip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
udpport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
wsuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
loginauthtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
loginauthsecretkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protocol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&store_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(store_));
}

CfgServer::~CfgServer() {
  // @@protoc_insertion_point(destructor:syncframe.CfgServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CfgServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  listenip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udpport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wsuri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loginauthtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loginauthsecretkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CfgServer::ArenaDtor(void* object) {
  CfgServer* _this = reinterpret_cast< CfgServer* >(object);
  (void)_this;
}
void CfgServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CfgServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CfgServer::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.CfgServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listenip_.ClearToEmpty();
  outip_.ClearToEmpty();
  port_.ClearToEmpty();
  udpport_.ClearToEmpty();
  wsuri_.ClearToEmpty();
  loginauthtype_.ClearToEmpty();
  loginauthsecretkey_.ClearToEmpty();
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(store_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CfgServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ListenIp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_listenip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgServer.ListenIp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OutIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_outip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgServer.OutIp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgServer.Port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UdpPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_udpport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgServer.UdpPort"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string WsUri = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_wsuri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgServer.WsUri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ContentType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          contenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string LoginAuthType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_loginauthtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgServer.LoginAuthType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string LoginAuthSecretKey = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_loginauthsecretkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgServer.LoginAuthSecretKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxClientConnNum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          maxclientconnnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MsgContentMax = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          msgcontentmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 IOTimeout = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          iotimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ConnTimeout = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          conntimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MapSize = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          mapsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RoomPeople = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          roompeople_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RoomTimeout = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          roomtimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OffLineWaitTime = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          offlinewaittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LockMode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          lockmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FPS = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RoomReadyTimeout = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          roomreadytimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Store = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          store_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CfgServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.CfgServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ListenIp = 1;
  if (!this->listenip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listenip().data(), static_cast<int>(this->_internal_listenip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgServer.ListenIp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_listenip(), target);
  }

  // string OutIp = 2;
  if (!this->outip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outip().data(), static_cast<int>(this->_internal_outip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgServer.OutIp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_outip(), target);
  }

  // string Port = 3;
  if (!this->port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgServer.Port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port(), target);
  }

  // string UdpPort = 4;
  if (!this->udpport().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udpport().data(), static_cast<int>(this->_internal_udpport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgServer.UdpPort");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_udpport(), target);
  }

  // int32 Protocol = 5;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_protocol(), target);
  }

  // string WsUri = 6;
  if (!this->wsuri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wsuri().data(), static_cast<int>(this->_internal_wsuri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgServer.WsUri");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_wsuri(), target);
  }

  // int32 ContentType = 7;
  if (this->contenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_contenttype(), target);
  }

  // string LoginAuthType = 8;
  if (!this->loginauthtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginauthtype().data(), static_cast<int>(this->_internal_loginauthtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgServer.LoginAuthType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_loginauthtype(), target);
  }

  // string LoginAuthSecretKey = 9;
  if (!this->loginauthsecretkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginauthsecretkey().data(), static_cast<int>(this->_internal_loginauthsecretkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgServer.LoginAuthSecretKey");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_loginauthsecretkey(), target);
  }

  // int32 MaxClientConnNum = 10;
  if (this->maxclientconnnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_maxclientconnnum(), target);
  }

  // int32 MsgContentMax = 11;
  if (this->msgcontentmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_msgcontentmax(), target);
  }

  // int64 IOTimeout = 12;
  if (this->iotimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_iotimeout(), target);
  }

  // int32 ConnTimeout = 13;
  if (this->conntimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_conntimeout(), target);
  }

  // int32 MapSize = 14;
  if (this->mapsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_mapsize(), target);
  }

  // int32 RoomPeople = 15;
  if (this->roompeople() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_roompeople(), target);
  }

  // int32 RoomTimeout = 16;
  if (this->roomtimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_roomtimeout(), target);
  }

  // int32 OffLineWaitTime = 17;
  if (this->offlinewaittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_offlinewaittime(), target);
  }

  // int32 LockMode = 18;
  if (this->lockmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_lockmode(), target);
  }

  // int32 FPS = 19;
  if (this->fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_fps(), target);
  }

  // int32 RoomReadyTimeout = 20;
  if (this->roomreadytimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_roomreadytimeout(), target);
  }

  // int32 Store = 21;
  if (this->store() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_store(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.CfgServer)
  return target;
}

size_t CfgServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.CfgServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ListenIp = 1;
  if (!this->listenip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listenip());
  }

  // string OutIp = 2;
  if (!this->outip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outip());
  }

  // string Port = 3;
  if (!this->port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // string UdpPort = 4;
  if (!this->udpport().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udpport());
  }

  // string WsUri = 6;
  if (!this->wsuri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wsuri());
  }

  // string LoginAuthType = 8;
  if (!this->loginauthtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginauthtype());
  }

  // string LoginAuthSecretKey = 9;
  if (!this->loginauthsecretkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginauthsecretkey());
  }

  // int32 Protocol = 5;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_protocol());
  }

  // int32 ContentType = 7;
  if (this->contenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contenttype());
  }

  // int32 MaxClientConnNum = 10;
  if (this->maxclientconnnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxclientconnnum());
  }

  // int32 MsgContentMax = 11;
  if (this->msgcontentmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgcontentmax());
  }

  // int64 IOTimeout = 12;
  if (this->iotimeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_iotimeout());
  }

  // int32 ConnTimeout = 13;
  if (this->conntimeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_conntimeout());
  }

  // int32 MapSize = 14;
  if (this->mapsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mapsize());
  }

  // int32 RoomPeople = 15;
  if (this->roompeople() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roompeople());
  }

  // int32 RoomTimeout = 16;
  if (this->roomtimeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomtimeout());
  }

  // int32 OffLineWaitTime = 17;
  if (this->offlinewaittime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offlinewaittime());
  }

  // int32 LockMode = 18;
  if (this->lockmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lockmode());
  }

  // int32 FPS = 19;
  if (this->fps() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fps());
  }

  // int32 RoomReadyTimeout = 20;
  if (this->roomreadytimeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomreadytimeout());
  }

  // int32 Store = 21;
  if (this->store() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_store());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CfgServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.CfgServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CfgServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CfgServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.CfgServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.CfgServer)
    MergeFrom(*source);
  }
}

void CfgServer::MergeFrom(const CfgServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.CfgServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.listenip().empty()) {
    _internal_set_listenip(from._internal_listenip());
  }
  if (!from.outip().empty()) {
    _internal_set_outip(from._internal_outip());
  }
  if (!from.port().empty()) {
    _internal_set_port(from._internal_port());
  }
  if (!from.udpport().empty()) {
    _internal_set_udpport(from._internal_udpport());
  }
  if (!from.wsuri().empty()) {
    _internal_set_wsuri(from._internal_wsuri());
  }
  if (!from.loginauthtype().empty()) {
    _internal_set_loginauthtype(from._internal_loginauthtype());
  }
  if (!from.loginauthsecretkey().empty()) {
    _internal_set_loginauthsecretkey(from._internal_loginauthsecretkey());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.contenttype() != 0) {
    _internal_set_contenttype(from._internal_contenttype());
  }
  if (from.maxclientconnnum() != 0) {
    _internal_set_maxclientconnnum(from._internal_maxclientconnnum());
  }
  if (from.msgcontentmax() != 0) {
    _internal_set_msgcontentmax(from._internal_msgcontentmax());
  }
  if (from.iotimeout() != 0) {
    _internal_set_iotimeout(from._internal_iotimeout());
  }
  if (from.conntimeout() != 0) {
    _internal_set_conntimeout(from._internal_conntimeout());
  }
  if (from.mapsize() != 0) {
    _internal_set_mapsize(from._internal_mapsize());
  }
  if (from.roompeople() != 0) {
    _internal_set_roompeople(from._internal_roompeople());
  }
  if (from.roomtimeout() != 0) {
    _internal_set_roomtimeout(from._internal_roomtimeout());
  }
  if (from.offlinewaittime() != 0) {
    _internal_set_offlinewaittime(from._internal_offlinewaittime());
  }
  if (from.lockmode() != 0) {
    _internal_set_lockmode(from._internal_lockmode());
  }
  if (from.fps() != 0) {
    _internal_set_fps(from._internal_fps());
  }
  if (from.roomreadytimeout() != 0) {
    _internal_set_roomreadytimeout(from._internal_roomreadytimeout());
  }
  if (from.store() != 0) {
    _internal_set_store(from._internal_store());
  }
}

void CfgServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.CfgServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CfgServer::CopyFrom(const CfgServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.CfgServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CfgServer::IsInitialized() const {
  return true;
}

void CfgServer::InternalSwap(CfgServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &listenip_, GetArenaForAllocation(),
      &other->listenip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &outip_, GetArenaForAllocation(),
      &other->outip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &port_, GetArenaForAllocation(),
      &other->port_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &udpport_, GetArenaForAllocation(),
      &other->udpport_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wsuri_, GetArenaForAllocation(),
      &other->wsuri_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loginauthtype_, GetArenaForAllocation(),
      &other->loginauthtype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loginauthsecretkey_, GetArenaForAllocation(),
      &other->loginauthsecretkey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CfgServer, store_)
      + sizeof(CfgServer::store_)
      - PROTOBUF_FIELD_OFFSET(CfgServer, protocol_)>(
          reinterpret_cast<char*>(&protocol_),
          reinterpret_cast<char*>(&other->protocol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CfgServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[34]);
}

// ===================================================================

CfgProtocolActions_ClientEntry_DoNotUse::CfgProtocolActions_ClientEntry_DoNotUse() {}
CfgProtocolActions_ClientEntry_DoNotUse::CfgProtocolActions_ClientEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CfgProtocolActions_ClientEntry_DoNotUse::MergeFrom(const CfgProtocolActions_ClientEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CfgProtocolActions_ClientEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[35]);
}
void CfgProtocolActions_ClientEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

CfgProtocolActions_ServerEntry_DoNotUse::CfgProtocolActions_ServerEntry_DoNotUse() {}
CfgProtocolActions_ServerEntry_DoNotUse::CfgProtocolActions_ServerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CfgProtocolActions_ServerEntry_DoNotUse::MergeFrom(const CfgProtocolActions_ServerEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CfgProtocolActions_ServerEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[36]);
}
void CfgProtocolActions_ServerEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class CfgProtocolActions::_Internal {
 public:
};

CfgProtocolActions::CfgProtocolActions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  client_(arena),
  server_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.CfgProtocolActions)
}
CfgProtocolActions::CfgProtocolActions(const CfgProtocolActions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_.MergeFrom(from.client_);
  server_.MergeFrom(from.server_);
  // @@protoc_insertion_point(copy_constructor:syncframe.CfgProtocolActions)
}

void CfgProtocolActions::SharedCtor() {
}

CfgProtocolActions::~CfgProtocolActions() {
  // @@protoc_insertion_point(destructor:syncframe.CfgProtocolActions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CfgProtocolActions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CfgProtocolActions::ArenaDtor(void* object) {
  CfgProtocolActions* _this = reinterpret_cast< CfgProtocolActions* >(object);
  (void)_this;
  _this->client_. ~MapField();
  _this->server_. ~MapField();
}
inline void CfgProtocolActions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CfgProtocolActions::ArenaDtor);
  }
}
void CfgProtocolActions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CfgProtocolActions::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.CfgProtocolActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_.Clear();
  server_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CfgProtocolActions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .syncframe.CfgActions> client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&client_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .syncframe.CfgActions> server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&server_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CfgProtocolActions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.CfgProtocolActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .syncframe.CfgActions> client = 1;
  if (!this->_internal_client().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_client().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_client().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_iterator
          it = this->_internal_client().begin();
          it != this->_internal_client().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CfgProtocolActions_ClientEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_iterator
          it = this->_internal_client().begin();
          it != this->_internal_client().end(); ++it) {
        target = CfgProtocolActions_ClientEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .syncframe.CfgActions> server = 2;
  if (!this->_internal_server().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_server().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_server().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_iterator
          it = this->_internal_server().begin();
          it != this->_internal_server().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CfgProtocolActions_ServerEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_iterator
          it = this->_internal_server().begin();
          it != this->_internal_server().end(); ++it) {
        target = CfgProtocolActions_ServerEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.CfgProtocolActions)
  return target;
}

size_t CfgProtocolActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.CfgProtocolActions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .syncframe.CfgActions> client = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_client_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_iterator
      it = this->_internal_client().begin();
      it != this->_internal_client().end(); ++it) {
    total_size += CfgProtocolActions_ClientEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .syncframe.CfgActions> server = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_server_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::syncframe::CfgActions >::const_iterator
      it = this->_internal_server().begin();
      it != this->_internal_server().end(); ++it) {
    total_size += CfgProtocolActions_ServerEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CfgProtocolActions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.CfgProtocolActions)
  GOOGLE_DCHECK_NE(&from, this);
  const CfgProtocolActions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CfgProtocolActions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.CfgProtocolActions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.CfgProtocolActions)
    MergeFrom(*source);
  }
}

void CfgProtocolActions::MergeFrom(const CfgProtocolActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.CfgProtocolActions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_.MergeFrom(from.client_);
  server_.MergeFrom(from.server_);
}

void CfgProtocolActions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.CfgProtocolActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CfgProtocolActions::CopyFrom(const CfgProtocolActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.CfgProtocolActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CfgProtocolActions::IsInitialized() const {
  return true;
}

void CfgProtocolActions::InternalSwap(CfgProtocolActions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  client_.InternalSwap(&other->client_);
  server_.InternalSwap(&other->server_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CfgProtocolActions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[37]);
}

// ===================================================================

class CfgActions::_Internal {
 public:
};

CfgActions::CfgActions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:syncframe.CfgActions)
}
CfgActions::CfgActions(const CfgActions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  demo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_demo().empty()) {
    demo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_demo(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:syncframe.CfgActions)
}

void CfgActions::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
demo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0;
}

CfgActions::~CfgActions() {
  // @@protoc_insertion_point(destructor:syncframe.CfgActions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CfgActions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  demo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CfgActions::ArenaDtor(void* object) {
  CfgActions* _this = reinterpret_cast< CfgActions* >(object);
  (void)_this;
}
void CfgActions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CfgActions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CfgActions::Clear() {
// @@protoc_insertion_point(message_clear_start:syncframe.CfgActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  desc_.ClearToEmpty();
  demo_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CfgActions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgActions.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgActions.desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string demo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_demo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "syncframe.CfgActions.demo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CfgActions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:syncframe.CfgActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string action = 2;
  if (!this->action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgActions.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // string desc = 3;
  if (!this->desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgActions.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // string demo = 4;
  if (!this->demo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_demo().data(), static_cast<int>(this->_internal_demo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "syncframe.CfgActions.demo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_demo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syncframe.CfgActions)
  return target;
}

size_t CfgActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syncframe.CfgActions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 2;
  if (!this->action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string desc = 3;
  if (!this->desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string demo = 4;
  if (!this->demo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_demo());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CfgActions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syncframe.CfgActions)
  GOOGLE_DCHECK_NE(&from, this);
  const CfgActions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CfgActions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syncframe.CfgActions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syncframe.CfgActions)
    MergeFrom(*source);
  }
}

void CfgActions::MergeFrom(const CfgActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syncframe.CfgActions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from.desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (!from.demo().empty()) {
    _internal_set_demo(from._internal_demo());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CfgActions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syncframe.CfgActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CfgActions::CopyFrom(const CfgActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syncframe.CfgActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CfgActions::IsInitialized() const {
  return true;
}

void CfgActions::InternalSwap(CfgActions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, GetArenaForAllocation(),
      &other->action_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, GetArenaForAllocation(),
      &other->desc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &demo_, GetArenaForAllocation(),
      &other->demo_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CfgActions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace syncframe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::syncframe::RequestLogin* Arena::CreateMaybeMessage< ::syncframe::RequestLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestClientPong* Arena::CreateMaybeMessage< ::syncframe::RequestClientPong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestClientPong >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestPlayerOperations* Arena::CreateMaybeMessage< ::syncframe::RequestPlayerOperations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestPlayerOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::Operation* Arena::CreateMaybeMessage< ::syncframe::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestClientPing* Arena::CreateMaybeMessage< ::syncframe::RequestClientPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestClientPing >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestPlayerResumeGame* Arena::CreateMaybeMessage< ::syncframe::RequestPlayerResumeGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestPlayerResumeGame >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestPlayerMatchSign* Arena::CreateMaybeMessage< ::syncframe::RequestPlayerMatchSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestPlayerMatchSign >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestPlayerReady* Arena::CreateMaybeMessage< ::syncframe::RequestPlayerReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestPlayerReady >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestGetRoom* Arena::CreateMaybeMessage< ::syncframe::RequestGetRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestGetRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestRoomHistory* Arena::CreateMaybeMessage< ::syncframe::RequestRoomHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestRoomHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestPlayerMatchSignCancel* Arena::CreateMaybeMessage< ::syncframe::RequestPlayerMatchSignCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestPlayerMatchSignCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestClientHeartbeat* Arena::CreateMaybeMessage< ::syncframe::RequestClientHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestClientHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestGameOver* Arena::CreateMaybeMessage< ::syncframe::RequestGameOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestGameOver >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::RequestPlayerOver* Arena::CreateMaybeMessage< ::syncframe::RequestPlayerOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::RequestPlayerOver >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseLoginRes* Arena::CreateMaybeMessage< ::syncframe::ResponseLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponsePlayerStatus* Arena::CreateMaybeMessage< ::syncframe::ResponsePlayerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponsePlayerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseOtherPlayerOffline* Arena::CreateMaybeMessage< ::syncframe::ResponseOtherPlayerOffline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseOtherPlayerOffline >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseKickOff* Arena::CreateMaybeMessage< ::syncframe::ResponseKickOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseKickOff >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseStartBattle* Arena::CreateMaybeMessage< ::syncframe::ResponseStartBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseStartBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseServerPing* Arena::CreateMaybeMessage< ::syncframe::ResponseServerPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseServerPing >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseServerPong* Arena::CreateMaybeMessage< ::syncframe::ResponseServerPong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseServerPong >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseEnterBattle* Arena::CreateMaybeMessage< ::syncframe::ResponseEnterBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseEnterBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponsePushLogicFrame* Arena::CreateMaybeMessage< ::syncframe::ResponsePushLogicFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponsePushLogicFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseOtherPlayerOver* Arena::CreateMaybeMessage< ::syncframe::ResponseOtherPlayerOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseOtherPlayerOver >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseGameOver* Arena::CreateMaybeMessage< ::syncframe::ResponseGameOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseGameOver >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseReadyTimeout* Arena::CreateMaybeMessage< ::syncframe::ResponseReadyTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseReadyTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponsePushRoomInfo* Arena::CreateMaybeMessage< ::syncframe::ResponsePushRoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponsePushRoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponsePushRoomHistory* Arena::CreateMaybeMessage< ::syncframe::ResponsePushRoomHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponsePushRoomHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseRoomHistory* Arena::CreateMaybeMessage< ::syncframe::ResponseRoomHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseRoomHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseOtherPlayerResumeGame* Arena::CreateMaybeMessage< ::syncframe::ResponseOtherPlayerResumeGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseOtherPlayerResumeGame >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::Player* Arena::CreateMaybeMessage< ::syncframe::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponseRestartGame* Arena::CreateMaybeMessage< ::syncframe::ResponseRestartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponseRestartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponsePlayerMatchSignFailed* Arena::CreateMaybeMessage< ::syncframe::ResponsePlayerMatchSignFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponsePlayerMatchSignFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::ResponsePlayerMatchingFailed* Arena::CreateMaybeMessage< ::syncframe::ResponsePlayerMatchingFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::ResponsePlayerMatchingFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::CfgServer* Arena::CreateMaybeMessage< ::syncframe::CfgServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::CfgServer >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::CfgProtocolActions_ClientEntry_DoNotUse* Arena::CreateMaybeMessage< ::syncframe::CfgProtocolActions_ClientEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::CfgProtocolActions_ClientEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::CfgProtocolActions_ServerEntry_DoNotUse* Arena::CreateMaybeMessage< ::syncframe::CfgProtocolActions_ServerEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::CfgProtocolActions_ServerEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::CfgProtocolActions* Arena::CreateMaybeMessage< ::syncframe::CfgProtocolActions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::CfgProtocolActions >(arena);
}
template<> PROTOBUF_NOINLINE ::syncframe::CfgActions* Arena::CreateMaybeMessage< ::syncframe::CfgActions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::syncframe::CfgActions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
